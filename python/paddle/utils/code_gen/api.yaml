- api : full
  args : (const std::vector<int64_t>& shape, const Scalar& value, DataType dtype=DataType::UNDEFINED, Backend place=Backend::UNDEFINED, DataLayout layout=DataLayout::UNDEFINED)
  output: Tensor # Tensor or vector<Tensor>
  infer_meta : 
    func : FullInferShape
    param : [shape, dtype, layout]
  kernel : 
    func : fill_constant
    data_type : [dtype]
    backend : [place]
    layout : [layout]
  
- api : full_like
  args : (const Tensor& x, const Scalar& value, DataType dtype, Backend place)
  output: Tensor
  infer_meta : 
    func : UnchangedInferShape
    param : [x]
  kernel : 
    func : fill_any_like
    param : [x, value]
    data_type : [dtype, x]
    backend : [place, x]
    layout : []

- api : ones_like
  args : (const Tensor& x, DataType dtype, Backend place)
  output : Tensor
  invoke : full_like(x, 1, dtype, place)

- api : dot
  args : (const Tensor& x, const Tensor& y)
  output : Tensor
  infer_meta : 
    func : DotInferShape
    param : [x, y]
  kernel : 
    func : dot

# - api : full_like
#   args : (const Tensor& x, const Scalar& value, DataType dtype, Backend place)->Tensor
#   output: {Tensor : dtype}
#   kernel : fill_any_like
#   T : [dtype, x]
#   backend : [place, x]
#   layout : []
#   InferShape : UnchangedInferShape(x)