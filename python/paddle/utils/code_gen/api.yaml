- api : add
  args : (const Tensor& x, const Tensor& y)
  output : Tensor
  infer_meta : 
    func : ElementwiseInferMeta
    param : [x, y]
  kernel :
    func : add

- api : cast
  args : (const Tensor& x, DataType out_dtype)
  output : Tensor
  infer_meta : 
    func : CastInferMeta
  kernel :
    func : cast
    param : [x, out_dtype]
    data_type : x


- api : concat
  args : (const std::vector<Tensor>& x, const Scalar& axis)
  output : Tensor
  infer_meta :
    func : ConcatInferMeta
    param : [x, axis, true]
  kernel :
    func : concat

- api : conj
  args : (const Tensor& x)
  output : Tensor
  infer_meta :
    func : UnchangedInferMeta
  kernel :
    func : conj

- api : divide
  args : (const Tensor& x, const Tensor& y)
  output : Tensor
  infer_meta : 
    func : ElementwiseInferMeta
    param : [x, y]
  kernel :
    func : divide

- api : dot
  args : (const Tensor& x, const Tensor& y)
  output : Tensor
  infer_meta : 
    func : DotInferMeta
  kernel : 
    func : dot

- api : empty
  args : (const ScalarArray& shape, DataType dtype=DataType::FLOAT32, Backend place=Backend::CPU, DataLayout layout=DataLayout::NCHW)
  output: Tensor
  infer_meta : 
    func : CreateInferMeta
    param : [shape, dtype, layout]
  kernel : 
    func : empty
    param : [shape]
    data_type : dtype
    backend : place
    layout : layout
  
- api : empty_like
  args : (const Tensor& x, DataType dtype = DataType::UNDEFINED, Backend place = Backend::UNDEFINED, DataLayout layout = DataLayout::UNDEFINED)
  output: Tensor
  infer_meta : 
    func : CreateLikeInferMeta
    param : [x, dtype, layout]
  kernel : 
    func : empty_like
    param : []
    data_type : dtype > x
    backend : place > x
    layout : layout > x

- api : flatten
  args : (const Tensor& x, int start_axis, int stop_axis)
  output : Tensor
  infer_meta : 
    func : FlattenInferMeta
  kernel : 
    func : flatten

- api : full
  args : (const ScalarArray& shape, const Scalar& value, DataType dtype=DataType::FLOAT32, Backend place=Backend::CPU, DataLayout layout=DataLayout::NCHW)
  output: Tensor
  infer_meta : 
    func : CreateInferMeta
    param : [shape, dtype, layout]
  kernel : 
    func : full
    param : [shape, value]
    data_type : dtype
    backend : place
    layout : layout
  
- api : full_like
  args : (const Tensor& x, const Scalar& value, DataType dtype = DataType::UNDEFINED, Backend place = Backend::UNDEFINED, DataLayout layout = DataLayout::UNDEFINED)
  output: Tensor
  infer_meta : 
    func : CreateLikeInferMeta
    param : [x, dtype, layout]
  kernel : 
    func : full_like
    param : [value]
    data_type : dtype > x
    backend : place > x
    layout : layout > x

- api : matmul
  args : (const Tensor& x, const Tensor& y, bool transpose_x = false, bool transpose_y = false)
  output : Tensor
  infer_meta : 
    func : MatmulInferMeta
  kernel : 
    func : matmul

- api : mean
  args : (const Tensor& x, const std::vector<int64_t>& axis={}, bool keep_dim=false)
  output : Tensor
  infer_meta : 
    func : ReduceInferMeta
    param: [x, axis, keep_dim]
  kernel : 
    func : mean

- api : multiply
  args : (const Tensor& x, const Tensor& y)
  output : Tensor
  infer_meta : 
    func : ElementwiseInferMeta
    param : [x, y]
  kernel :
    func : multiply

- api : ones_like
  args : (const Tensor& x, DataType dtype=DataType::UNDEFINED, Backend place=Backend::UNDEFINED, DataLayout layout=DataLayout::UNDEFINED)
  output : Tensor
  invoke : full_like(x, 1, dtype, place, layout)

- api : reshape
  args : (const Tensor& x, const ScalarArray& shape)
  output : Tensor
  infer_meta : 
    func : ReshapeInferMeta
  kernel : 
    func : reshape

- api : scale
  args : (const Tensor& x, const Scalar& scale, float bias, bool bias_after_scale)
  output : Tensor
  infer_meta : 
    func : UnchangedInferMeta
    param : [x]
  kernel :
    func : scale

- api : subtract
  args : (const Tensor& x, const Tensor& y)
  output : Tensor
  infer_meta : 
    func : ElementwiseInferMeta
    param : [x, y]
  kernel :
    func : subtract

- api : sum
  args : (const Tensor& x, const std::vector<int64_t>& axis={}, DataType dtype=DataType::UNDEFINED, bool keep_dim=false)
  output : Tensor
  infer_meta : 
    func : SumInferMeta
    param: [x, axis, dtype, keep_dim]
  kernel : 
    func : sum
    param : [x, axis, dtype, keep_dim]
    data_type : x

- api : zeros_like
  args : (const Tensor& x, DataType dtype=DataType::UNDEFINED, Backend place=Backend::UNDEFINED, DataLayout layout=DataLayout::UNDEFINED)
  output : Tensor
  invoke : full_like(x, 0, dtype, place, layout)
