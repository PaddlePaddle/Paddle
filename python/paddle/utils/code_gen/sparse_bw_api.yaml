- backward_api : add_coo_grad
  forward : elementwise_add_coo(Tensor x, Tensor y) -> Tensor(out)
  args : (Tensor x, Tensor y, Tensor out_grad)
  output : Tensor(x_grad), Tensor(y_grad)
  kernel :
    func : sparse_elementwise_add_grad_coo{sparse_coo, sparse_coo, sparse_coo -> sparse_coo, sparse_coo}

- backward_api : add_csr_grad
  forward : elementwise_add_csr(Tensor x, Tensor y) -> Tensor(out)
  args : (Tensor x, Tensor y, Tensor out_grad)
  output : Tensor(x_grad), Tensor(y_grad)
  kernel :
    func : sparse_elementwise_add_grad_csr{sparse_csr, sparse_csr, sparse_csr -> sparse_csr, sparse_csr}

- backward_api : conv3d_grad
  forward : conv3d (Tensor x, Tensor kernel, int[] paddings, int[] dilations, int[] strides, int groups, bool subm) -> Tensor(out@SparseCooTensor), Tensor(rulebook@DenseTensor)
  args : (Tensor x, Tensor kernel, Tensor rulebook, Tensor out_grad, int[] paddings, int[] dilations, int[] strides, int groups, bool subm)
  output : Tensor(x_grad), Tensor(kernel_grad)
  kernel :
    func : sparse_conv3d_grad{sparse_coo, dense, dense, sparse_coo -> sparse_coo, dense}

- backward_api : coo_to_dense_grad
  forward : coo_to_dense(Tensor x) -> Tensor(out)
  args : (Tensor x, Tensor out_grad)
  output : Tensor(x_grad)
  kernel :
    func : sparse_coo_to_dense_grad{sparse_coo, dense-> sparse_coo}

- backward_api : create_sparse_coo_tensor_grad
  forward : create_sparse_coo_tensor(Tensor values, Tensor indices, IntArray dense_shape) -> Tensor(out)
  args : (Tensor indices, Tensor out_grad)
  output : Tensor(values_grad)
  kernel :
    func : sparse_coo_tensor_grad{dense, sparse_coo -> dense}

- backward_api : dense_to_coo_grad
  forward : dense_to_coo(Tensor x, int64_t sparse_dim) -> Tensor(out)
  args : (Tensor out_grad)
  output : Tensor(x_grad)
  invoke : to_dense_impl(out_grad)

- backward_api : div_coo_grad
  forward : elementwise_div_coo(Tensor x, Tensor y) -> Tensor(out)
  args : (Tensor x, Tensor y, Tensor out, Tensor out_grad)
  output : Tensor(x_grad), Tensor(y_grad)
  kernel :
    func : sparse_elementwise_div_grad_coo{sparse_coo, sparse_coo, sparse_coo, sparse_coo -> sparse_coo, sparse_coo}

- backward_api : div_csr_grad
  forward : elementwise_div_csr(Tensor x, Tensor y) -> Tensor(out)
  args : (Tensor x, Tensor y, Tensor out, Tensor out_grad)
  output : Tensor(x_grad), Tensor(y_grad)
  kernel :
    func : sparse_elementwise_div_grad_csr{sparse_csr, sparse_csr, sparse_csr, sparse_csr -> sparse_csr, sparse_csr}

- backward_api : mul_coo_grad
  forward : elementwise_mul_coo(Tensor x, Tensor y) -> Tensor(out)
  args : (Tensor x, Tensor y, Tensor out_grad)
  output : Tensor(x_grad), Tensor(y_grad)
  kernel :
    func : sparse_elementwise_mul_grad_coo{sparse_coo, sparse_coo, sparse_coo -> sparse_coo, sparse_coo}

- backward_api : mul_csr_grad
  forward : elementwise_mul_csr(Tensor x, Tensor y) -> Tensor(out)
  args : (Tensor x, Tensor y, Tensor out_grad)
  output : Tensor(x_grad), Tensor(y_grad)
  kernel :
    func : sparse_elementwise_mul_grad_csr{sparse_csr, sparse_csr, sparse_csr -> sparse_csr, sparse_csr}

- backward_api : relu_grad
  forward : relu(Tensor x) -> Tensor(out)
  args : (Tensor out, Tensor out_grad)
  output : Tensor(x_grad)
  kernel :
    func : sparse_coo_relu_grad {sparse_coo, sparse_coo -> sparse_coo}

- backward_api : sin_grad
  forward : sin(Tensor x) -> Tensor(out)
  args : (Tensor x, Tensor out_grad)
  output : Tensor(x_grad)
  kernel :
    func : sparse_coo_sin_grad {sparse_coo, sparse_coo -> sparse_coo}

- backward_api : sparse_maxpool_grad
  forward : sparse_maxpool(Tensor x, int[] kernel_sizes, int[] paddings, int[] dilations, int[] strides) -> Tensor(out), Tensor(rulebook)
  args : (Tensor x, Tensor rulebook, Tensor out, Tensor out_grad, int[] kernel_sizes)
  output : Tensor(x_grad)
  kernel :
    func : sparse_maxpool_grad {sparse_coo, dense, sparse_coo, sparse_coo -> sparse_coo}

- backward_api : sqrt_grad
  forward : sqrt(Tensor x) -> Tensor(out)
  args : (Tensor out, Tensor out_grad)
  output : Tensor(x_grad)
  kernel :
    func : sparse_coo_sqrt_grad {sparse_coo, sparse_coo -> sparse_coo}

- backward_api : sub_coo_grad
  forward : elementwise_sub_coo(Tensor x, Tensor y) -> Tensor(out)
  args : (Tensor x, Tensor y, Tensor out_grad)
  output : Tensor(x_grad), Tensor(y_grad)
  kernel :
    func : sparse_elementwise_sub_grad_coo{sparse_coo, sparse_coo, sparse_coo -> sparse_coo, sparse_coo}

- backward_api : sub_csr_grad
  forward : elementwise_sub_csr(Tensor x, Tensor y) -> Tensor(out)
  args : (Tensor x, Tensor y, Tensor out_grad)
  output : Tensor(x_grad), Tensor(y_grad)
  kernel :
    func : sparse_elementwise_div_grad_csr{sparse_csr, sparse_csr, sparse_csr -> sparse_csr, sparse_csr}

- backward_api : tanh_grad
  forward : tanh(Tensor x) -> Tensor(out)
  args : (Tensor out, Tensor out_grad)
  output : Tensor(x_grad)
  kernel :
    func : sparse_coo_tanh_grad {sparse_coo, sparse_coo -> sparse_coo}

- backward_api : values_grad
  forward : coo_values(Tensor x) -> Tensor(out)
  args : (Tensor x, Tensor out_grad)
  output : Tensor(x_grad)
  kernel :
    func : coo_values_grad{sparse_coo, dense-> sparse_coo}
