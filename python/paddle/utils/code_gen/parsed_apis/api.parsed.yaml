- name: abs
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: RealAndImagInferMeta
    param: [x]
  kernel:
    func: [abs]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: abs_grad
- name: accuracy
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: indices, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: accuracy, intermediate: false}
  - {typename: Tensor, name: correct, intermediate: false}
  - {typename: Tensor, name: total, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: AccuracyInferMeta
    param: [x, indices, label]
  kernel:
    func: [accuracy]
    param: [x, indices, label]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: acos
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [acos]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: acos_grad
- name: acosh
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [acosh]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: acosh_grad
- name: adadelta
  inputs:
  - {typename: Tensor, name: param, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: avg_squared_grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: avg_squared_update, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: rho}
  - {typename: float, name: epsilon}
  outputs:
  - {typename: Tensor, name: param_out, intermediate: false}
  - {typename: Tensor, name: moment_out, intermediate: false}
  - {typename: Tensor, name: inf_norm_out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: AdadeltaInferMeta
    param: [param, grad, avg_squared_grad, avg_squared_update, rho, epsilon]
  kernel:
    func: [adadelta]
    param: [param, grad, avg_squared_grad, avg_squared_update, rho, epsilon]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: adam
  inputs:
  - {typename: Tensor, name: param, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: learning_rate, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: moment1, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: moment2, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: beta1_pow, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: beta2_pow, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: master_param, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: skip_update, optional: true, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: beta1}
  - {typename: Scalar, name: beta2}
  - {typename: Scalar, name: epsilon}
  - {typename: bool, name: lazy_mode}
  - {typename: int64_t, name: min_row_size_to_use_multithread}
  - {typename: bool, name: multi_precision}
  - {typename: bool, name: use_global_beta_pow}
  outputs:
  - {typename: Tensor, name: param_out, intermediate: false}
  - {typename: Tensor, name: moment1_out, intermediate: false}
  - {typename: Tensor, name: moment2_out, intermediate: false}
  - {typename: Tensor, name: beta1_pow_out, intermediate: false}
  - {typename: Tensor, name: beta2_pow_out, intermediate: false}
  - {typename: Tensor, name: master_param_outs, intermediate: false}
  no_need_buffer: null
  invoke: {func: adam_impl, args: 'param, grad, learning_rate, moment1, moment2, beta1_pow,
      beta2_pow, master_param, skip_update, beta1, beta2, epsilon, lazy_mode, min_row_size_to_use_multithread,
      multi_precision, use_global_beta_pow'}
  backward: null
- name: adamax
  inputs:
  - {typename: Tensor, name: param, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: learning_rate, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: moment, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: inf_norm, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: beta1_pow, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: beta1}
  - {typename: float, name: beta2}
  - {typename: float, name: epsilon}
  outputs:
  - {typename: Tensor, name: param_out, intermediate: false}
  - {typename: Tensor, name: avg_squared_grad_out, intermediate: false}
  - {typename: Tensor, name: avg_squared_update_out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: AdamaxInferMeta
    param: [param, grad, learning_rate, moment, inf_norm, beta1_pow, beta1, beta2,
      epsilon]
  kernel:
    func: [adamax]
    param: [param, grad, learning_rate, moment, inf_norm, beta1_pow, beta1, beta2,
      epsilon]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: adamw
  inputs:
  - {typename: Tensor, name: param, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: learning_rate, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: moment1, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: moment2, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: beta1_pow, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: beta2_pow, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: master_param, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: skip_update, optional: true, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: beta1}
  - {typename: Scalar, name: beta2}
  - {typename: Scalar, name: epsilon}
  - {typename: float, name: lr_ratio}
  - {typename: float, name: coeff}
  - {typename: bool, name: with_decay}
  - {typename: bool, name: lazy_mode}
  - {typename: int64_t, name: min_row_size_to_use_multithread}
  - {typename: bool, name: multi_precision}
  - {typename: bool, name: use_global_beta_pow}
  outputs:
  - {typename: Tensor, name: param_out, intermediate: false}
  - {typename: Tensor, name: moment1_out, intermediate: false}
  - {typename: Tensor, name: moment2_out, intermediate: false}
  - {typename: Tensor, name: beta1_pow_out, intermediate: false}
  - {typename: Tensor, name: beta2_pow_out, intermediate: false}
  - {typename: Tensor, name: master_param_outs, intermediate: false}
  no_need_buffer: null
  invoke: {func: adamw_impl, args: 'param, grad, learning_rate, moment1, moment2,
      beta1_pow, beta2_pow, master_param, skip_update, beta1, beta2, epsilon, lr_ratio,
      coeff, with_decay, lazy_mode, min_row_size_to_use_multithread, multi_precision,
      use_global_beta_pow'}
  backward: null
- name: add
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [add]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: add_grad
- name: add_n
  inputs:
  - {typename: 'Tensor[]', name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: AddNInferMeta
    param: [x]
  kernel:
    func: [add_n]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: add_n_grad
- name: addmm
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: alpha}
  - {typename: float, name: beta}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: AddmmInferMeta
    param: [input, x, y, alpha, beta]
  kernel:
    func: [addmm]
    param: [input, x, y, alpha, beta]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: addmm_grad
- name: all
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: dims, default_value: '{}'}
  - {typename: bool, name: keep_dim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ReduceInferMeta
    param: [x, dims, keep_dim]
  kernel:
    func: [all]
    param: [x, dims, keep_dim]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: allclose
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: rtol}
  - {typename: Scalar, name: atol}
  - {typename: bool, name: equal_nan}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: AllValueCompareInferMeta
    param: [x, y]
  kernel:
    func: [allclose]
    param: [x, y, rtol, atol, equal_nan]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: any
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: dims, default_value: '{}'}
  - {typename: bool, name: keep_dim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ReduceInferMeta
    param: [x, dims, keep_dim]
  kernel:
    func: [any]
    param: [x, dims, keep_dim]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: arange
  inputs:
  - {typename: Tensor, name: start, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: end, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: step, optional: false, no_need_buffer: false}
  attrs:
  - {typename: DataType, name: dtype}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ArangeInferMeta
    param: [start, end, step]
  kernel:
    func: [arange]
    param: [start, end, step]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
  inplace: null
  backward: null
- name: argmax
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int64_t, name: axis}
  - {typename: bool, name: keepdims}
  - {typename: bool, name: flatten}
  - {typename: int, name: dtype}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ArgMinMaxInferMeta
    param: [x, axis, keepdims, flatten, dtype]
  kernel:
    func: [arg_max]
    param: [x, axis, keepdims, flatten, dtype]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: argmin
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int64_t, name: axis}
  - {typename: bool, name: keepdims}
  - {typename: bool, name: flatten}
  - {typename: int, name: dtype}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ArgMinMaxInferMeta
    param: [x, axis, keepdims, flatten, dtype]
  kernel:
    func: [arg_min]
    param: [x, axis, keepdims, flatten, dtype]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: argsort
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  - {typename: bool, name: descending}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: indices, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ArgsortInferMeta
    param: [x, axis, descending]
  kernel:
    func: [argsort]
    param: [x, axis, descending]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: argsort_grad
- name: asin
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [asin]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: asin_grad
- name: asinh
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [asinh]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: asinh_grad
- name: assign
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [assign]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: assign_grad
- name: assign_out_
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: output, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [assign]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: {out: output}
  backward: assign_out__grad
- name: atan
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [atan]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: atan_grad
- name: atan2
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: Atan2InferMeta
    param: [x, y]
  kernel:
    func: [atan2]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: atan2_grad
- name: atanh
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [atanh]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: atanh_grad
- name: auc
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: stat_pos, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: stat_neg, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: curve}
  - {typename: int, name: num_thresholds}
  - {typename: int, name: slide_steps}
  outputs:
  - {typename: Tensor, name: auc, intermediate: false}
  - {typename: Tensor, name: stat_pos_out, intermediate: false}
  - {typename: Tensor, name: stat_neg_out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: AucInferMeta
    param: [x, label, stat_pos, stat_neg, curve, num_thresholds, slide_steps]
  kernel:
    func: [auc]
    param: [x, label, stat_pos, stat_neg, curve, num_thresholds, slide_steps]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: batch_norm
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: scale, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: bias, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: mean, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: variance, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: momentum}
  - {typename: float, name: epsilon}
  - {typename: str, name: data_layout}
  - {typename: bool, name: is_test}
  - {typename: bool, name: use_global_stats}
  - {typename: bool, name: trainable_statistics}
  - {typename: bool, name: fuse_with_relu}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: mean_out, intermediate: false}
  - {typename: Tensor, name: variance_out, intermediate: false}
  - {typename: Tensor, name: saved_mean, intermediate: false}
  - {typename: Tensor, name: saved_variance, intermediate: false}
  - {typename: Tensor, name: reserve_space, intermediate: false}
  no_need_buffer: null
  invoke: {func: batch_norm_impl, args: 'x, scale, bias, mean, variance, momentum,
      epsilon, data_layout, is_test, use_global_stats, trainable_statistics, fuse_with_relu'}
  backward: batch_norm_grad
- name: bce_loss
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: BCELossInferMeta
    param: [input, label]
  kernel:
    func: [bce_loss]
    param: [input, label]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: bce_loss_grad
- name: bernoulli
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [bernoulli]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: bitwise_and
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [bitwise_and]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: bitwise_not
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [bitwise_not]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: bitwise_or
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [bitwise_or]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: bitwise_xor
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [bitwise_xor]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: brelu
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: t_min}
  - {typename: float, name: t_max}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [brelu]
    param: [x, t_min, t_max]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: brelu_grad
- name: cast
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: DataType, name: out_dtype}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CastInferMeta
    param: [x, out_dtype]
  kernel:
    func: [cast]
    param: [x, out_dtype]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: cast_grad
- name: ceil
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [ceil]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: ceil_grad
- name: celu
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: alpha}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [celu]
    param: [x, alpha]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: celu_grad
- name: cholesky
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: upper}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CholeskyInferMeta
    param: [x, upper]
  kernel:
    func: [cholesky]
    param: [x, upper]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: cholesky_grad
- name: cholesky_solve
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: upper}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CholeskySolveInferMeta
    param: [x, y, upper]
  kernel:
    func: [cholesky_solve]
    param: [x, y, upper]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: cholesky_solve_grad
- name: clip
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar(float), name: min}
  - {typename: Scalar(float), name: max}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [clip]
    param: [x, min, max]
    backend: null
    layout: null
    data_type: null
  inplace: {out: x}
  backward: clip_grad
- name: concat
  inputs:
  - {typename: 'Tensor[]', name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar(int64_t), name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ConcatInferMeta
    param: [x, axis]
  kernel:
    func: [concat]
    param: [x, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: concat_grad
- name: conj
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [conj]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: conj_grad
- name: conv2d
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: str, name: paddding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  - {typename: bool, name: use_addto}
  - {typename: int, name: workspace_size_MB}
  - {typename: bool, name: exhaustive_search}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  invoke: {func: conv2d_impl, args: 'input, filter, strides, paddings, paddding_algorithm,
      groups, dilations, data_format, use_addto, workspace_size_MB, exhaustive_search'}
  backward: conv2d_grad
- name: conv2d_transpose
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: 'int[]', name: output_padding}
  - {typename: 'int[]', name: output_size}
  - {typename: str, name: padding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ConvTransposeInferMeta
    param: [x, filter, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
  kernel:
    func: [conv2d_transpose]
    param: [x, filter, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: conv2d_transpose_grad
- name: conv3d
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: str, name: paddding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  - {typename: bool, name: use_addto}
  - {typename: int, name: workspace_size_MB}
  - {typename: bool, name: exhaustive_search}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  invoke: {func: conv3d_impl, args: 'input, filter, strides, paddings, paddding_algorithm,
      groups, dilations, data_format, use_addto, workspace_size_MB, exhaustive_search'}
  backward: conv3d_grad
- name: conv3d_transpose
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: 'int[]', name: output_padding}
  - {typename: 'int[]', name: output_size}
  - {typename: str, name: padding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ConvTransposeInferMeta
    param: [x, filter, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
  kernel:
    func: [conv3d_transpose]
    param: [x, filter, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: conv3d_transpose_grad
- name: copy_to
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Place, name: place}
  - {typename: bool, name: blocking}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  invoke: {func: copy_to_impl, args: 'x, place, blocking'}
  backward: null
- name: cos
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [cos]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: cos_grad
- name: cosh
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [cosh]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: cosh_grad
- name: cross
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '9'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CrossInferMeta
    param: [x, y, axis]
  kernel:
    func: [cross]
    param: [x, y, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: cross_grad
- name: cross_entropy_with_softmax
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: soft_label}
  - {typename: bool, name: use_softmax}
  - {typename: bool, name: numeric_stable_mode}
  - {typename: int, name: ignore_index}
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: softmax, intermediate: false}
  - {typename: Tensor, name: loss, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CrossEntropyWithSoftmaxInferMeta
    param: [input, label, soft_label, use_softmax, numeric_stable_mode, ignore_index,
      axis]
  kernel:
    func: [cross_entropy_with_softmax]
    param: [input, label, soft_label, use_softmax, numeric_stable_mode, ignore_index,
      axis]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [input]
  inplace: null
  backward: cross_entropy_with_softmax_grad
- name: cumprod
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: dim}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [cumprod]
    param: [x, dim]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: cumprod_grad
- name: cumsum
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  - {typename: bool, name: flatten}
  - {typename: bool, name: exclusive}
  - {typename: bool, name: reverse}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CumInferMeta
    param: [x, axis, flatten, exclusive, reverse]
  kernel:
    func: [cumsum]
    param: [x, axis, flatten, exclusive, reverse]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: cumsum_grad
- name: deformable_conv
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: offset, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: mask, optional: true, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: 'int[]', name: dilations}
  - {typename: int, name: deformable_groups}
  - {typename: int, name: groups}
  - {typename: int, name: im2col_step}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: DeformableConvInferMeta
    param: [x, offset, filter, mask, strides, paddings, dilations, deformable_groups,
      groups, im2col_step]
  kernel:
    func: [deformable_conv]
    param: [x, offset, filter, mask, strides, paddings, dilations, deformable_groups,
      groups, im2col_step]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: deformable_conv_grad
- name: depthwise_conv2d
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: str, name: padding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  - {typename: bool, name: use_addto}
  - {typename: int, name: workspace_size_MB}
  - {typename: bool, name: exhaustive_search}
  - {typename: bool, name: fuse_relu}
  - {typename: bool, name: use_gpudnn}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ConvInferMeta
    param: [x, filter, strides, paddings, padding_algorithm, groups, dilations, data_format,
      use_addto, workspace_size_MB, exhaustive_search]
  kernel:
    func: [depthwise_conv2d]
    param: [x, filter, strides, paddings, padding_algorithm, groups, dilations, data_format,
      use_addto, workspace_size_MB, exhaustive_search, fuse_relu]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: depthwise_conv2d_grad
- name: depthwise_conv2d_transpose
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: 'int[]', name: output_padding}
  - {typename: 'int[]', name: output_size}
  - {typename: str, name: padding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ConvTransposeInferMeta
    param: [x, filter, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
  kernel:
    func: [depthwise_conv2d_transpose]
    param: [x, filter, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: depthwise_conv2d_transpose_grad
- name: det
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [determinant]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: det_grad
- name: diag
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: offset}
  - {typename: float, name: padding_value}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: DiagInferMeta
    param: [x, offset, padding_value]
  kernel:
    func: [diag]
    param: [x, offset, padding_value]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: diagonal
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: offset}
  - {typename: int, name: axis1}
  - {typename: int, name: axis2}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: DiagonalInferMeta
    param: [x, offset, axis1, axis2]
  kernel:
    func: [diagonal]
    param: [x, offset, axis1, axis2]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: diagonal_grad
- name: digamma
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [digamma]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: digamma_grad
- name: dist
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: p}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: DistInferMeta
    param: [x, y, p]
  kernel:
    func: [dist]
    param: [x, y, p]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: dist_grad
- name: divide
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [divide]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: divide_grad
- name: dot
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: DotInferMeta
    param: [x, y]
  kernel:
    func: [dot]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: dropout
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: seed_tensor, optional: true, no_need_buffer: false}
  attrs:
  - {typename: float, name: p}
  - {typename: bool, name: is_test}
  - {typename: str, name: mode}
  - {typename: int, name: seed}
  - {typename: bool, name: fix_seed}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: mask, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: DropoutInferMeta
    param: [x, seed_tensor, p, is_test, mode, seed, fix_seed]
  kernel:
    func: [dropout]
    param: [x, seed_tensor, p, is_test, mode, seed, fix_seed]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: dropout_grad
- name: eigh
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: uplo}
  outputs:
  - {typename: Tensor, name: out_w, intermediate: false}
  - {typename: Tensor, name: out_v, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: EighInferMeta
    param: [x, uplo]
  kernel:
    func: [eigh]
    param: [x, uplo]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: eigh_grad
- name: einsum
  inputs:
  - {typename: 'Tensor[]', name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: equation}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: 'Tensor[]', name: out, size: x.size(), intermediate: false}
  - {typename: 'Tensor[]', name: out, size: x.size(), intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: EinsumInferMeta
    param: [x, equation]
  kernel:
    func: [einsum]
    param: [x, equation]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: einsum_grad
- name: elementwise_pow
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [elementwise_pow]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: elementwise_pow_grad
- name: elu
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: alpha}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [elu]
    param: [x, alpha]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: elu_grad
- name: embedding
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: weight, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int64_t, name: padding_idx, default_value: '-1'}
  - {typename: bool, name: sparse, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  invoke: {func: embedding_impl, args: 'x, weight, padding_idx, sparse'}
  backward: embedding_grad
- name: empty
  inputs: []
  attrs:
  - {typename: IntArray, name: shape}
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  - {typename: Place, name: place, default_value: CPUPlace()}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CreateInferMeta
    param: [shape, dtype]
  kernel:
    func: [empty]
    param: [shape, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
  inplace: null
  backward: null
- name: empty_like
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: DataType, name: dtype, default_value: 'DataType::UNDEFINED'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CreateLikeInferMeta
    param: [x, dtype]
  kernel:
    func: [empty_like]
    param: [x, dtype]
    backend:
      ordered: true
      candidates: [place, x]
    layout: null
    data_type:
      ordered: true
      candidates: [dtype, x]
  inplace: null
  backward: null
- name: equal
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CompareInferMeta
    param: [x, y, axis]
  kernel:
    func: [equal]
    param: [x, y, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: equal_all
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CompareAllInferMeta
    param: [x, y]
  kernel:
    func: [equal_all]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: erf
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [erf]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: erf_grad
- name: erfinv
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [erfinv]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: erfinv_grad
- name: exp
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [exp]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: exp_grad
- name: expand
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: shape}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ExpandInferMeta
    param: [x, shape]
  kernel:
    func: [expand]
    param: [x, shape]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: expand_grad
- name: expand_as
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: true, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: target_shape}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ExpandAsInferMeta
    param: [x, y, target_shape]
  kernel:
    func: [expand_as]
    param: [x, y, target_shape]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: expand_as_grad
- name: expm1
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [expm1]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: expm1_grad
- name: eye
  inputs: []
  attrs:
  - {typename: int64_t, name: num_rows}
  - {typename: int64_t, name: num_columns}
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: EyeInferMeta
    param: [num_rows, num_columns, dtype]
  kernel:
    func: [eye]
    param: [num_rows, num_columns, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
  inplace: null
  backward: null
- name: flatten
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: start_axis}
  - {typename: int, name: stop_axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: xshape, intermediate: true}
  no_need_buffer: null
  infer_meta:
    func: FlattenWithXShapeInferMeta
    param: [x, start_axis, stop_axis]
  kernel:
    func: [flatten_with_xshape]
    param: [x, start_axis, stop_axis]
    backend:
      ordered: false
      candidates: [x]
    layout: null
    data_type: null
  inplace: {out: x}
  backward: flatten_grad
- name: flip
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: FlipInferMeta
    param: [x, axis]
  kernel:
    func: [flip]
    param: [x, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: flip_grad
- name: floor
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [floor]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: floor_grad
- name: floor_divide
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [floor_divide]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: fmax
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    param: [x, y]
    func: ElementwiseInferMeta
  kernel:
    func: [fmax]
    param: [x, y, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: fmax_grad
- name: fmin
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    param: [x, y]
    func: ElementwiseInferMeta
  kernel:
    func: [fmin]
    param: [x, y, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: fmin_grad
- name: frobenius_norm
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: axis}
  - {typename: bool, name: keep_dim}
  - {typename: bool, name: reduce_all}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ReduceInferMetaBase
    param: [x, axis, keep_dim, reduce_all]
  kernel:
    func: [frobenius_norm]
    param: [x, axis, keep_dim, reduce_all]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: frobenius_norm_grad
- name: full
  inputs: []
  attrs:
  - {typename: IntArray, name: shape}
  - {typename: Scalar, name: value}
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  - {typename: Place, name: place, default_value: CPUPlace()}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CreateInferMeta
    param: [shape, dtype]
  kernel:
    func: [full]
    param: [shape, value, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
  inplace: null
  backward: null
- name: full_batch_size_like
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: shape}
  - {typename: DataType, name: dtype}
  - {typename: Scalar, name: value}
  - {typename: int, name: input_dim_idx}
  - {typename: int, name: output_dim_idx}
  - {typename: Place, name: place, default_value: CPUPlace()}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: FullBatchSizeLikeInferMeta
    param: [input, shape, value, dtype, input_dim_idx, output_dim_idx]
  kernel:
    func: [full_batch_size_like]
    param: [input, shape, value, dtype, input_dim_idx, output_dim_idx]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
  inplace: null
  backward: null
- name: full_like
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: value}
  - {typename: DataType, name: dtype, default_value: 'DataType::UNDEFINED'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CreateLikeInferMeta
    param: [x, dtype]
  kernel:
    func: [full_like]
    param: [x, value, dtype]
    backend:
      ordered: true
      candidates: [place, x]
    layout: null
    data_type:
      ordered: true
      candidates: [dtype, x]
  inplace: null
  backward: null
- name: gather
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar(int), name: axis, default_value: '0'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GatherInferMeta
    param: [x, index, axis]
  kernel:
    func: [gather]
    param: [x, index, axis]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: gather_grad
- name: gather_nd
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GatherNdInferMeta
    param: [x, index]
  kernel:
    func: [gather_nd]
    param: [x, index]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: gather_nd_grad
- name: gather_tree
  inputs:
  - {typename: Tensor, name: ids, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: parents, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GatherTreeMeta
    param: [ids, parents]
  kernel:
    func: [gather_tree]
    param: [ids, parents]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: gaussian_random
  inputs: []
  attrs:
  - {typename: IntArray, name: shape}
  - {typename: float, name: mean}
  - {typename: float, name: std}
  - {typename: int, name: seed}
  - {typename: DataType, name: dtype}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GaussianRandomInferMeta
    param: [shape, mean, std, seed, dtype]
  kernel:
    func: [gaussian_random]
    param: [shape, mean, std, seed, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
  inplace: null
  backward: null
- name: gelu
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: approximate}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [gelu]
    param: [x, approximate]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: gelu_grad
- name: graph_send_recv
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: src_index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: dst_index, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: pool_type, default_value: '"SUM"'}
  - {typename: int64_t, name: out_size, default_value: '0'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: dst_count, intermediate: true}
  no_need_buffer: null
  infer_meta:
    func: GraphSendRecvInferMeta
    param: [x, src_index, dst_index, pool_type, out_size]
  kernel:
    func: [graph_send_recv]
    param: [x, src_index, dst_index, pool_type, out_size]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: graph_send_recv_grad
- name: greater_equal
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CompareInferMeta
    param: [x, y, axis]
  kernel:
    func: [greater_equal]
    param: [x, y, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: greater_than
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CompareInferMeta
    param: [x, y, axis]
  kernel:
    func: [greater_than]
    param: [x, y, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: group_norm
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: scale, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: bias, optional: true, no_need_buffer: false}
  attrs:
  - {typename: float, name: epsilon}
  - {typename: int, name: groups}
  - {typename: str, name: data_layout}
  outputs:
  - {typename: Tensor, name: y, intermediate: false}
  - {typename: Tensor, name: mean, intermediate: true}
  - {typename: Tensor, name: variance, intermediate: true}
  no_need_buffer: null
  infer_meta:
    func: GroupNormInferMeta
    param: [x, scale, bias, epsilon, groups, data_layout]
  kernel:
    func: [group_norm]
    param: [x, scale, bias, epsilon, groups, data_layout]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: group_norm_grad
- name: gumbel_softmax
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: temperature}
  - {typename: bool, name: hard}
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GumbelSoftmaxInferMeta
    param: [x, temperature, hard, axis]
  kernel:
    func: [gumbel_softmax]
    param: [x, temperature, hard, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: gumbel_softmax_grad
- name: hard_shrink
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: threshold}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [hard_shrink]
    param: [x, threshold]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: hard_shrink_grad
- name: hard_sigmoid
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: slope}
  - {typename: float, name: offset}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [hard_sigmoid]
    param: [x, slope, offset]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: hard_sigmoid_grad
- name: hard_swish
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: threshold, default_value: '6.0'}
  - {typename: float, name: scale, default_value: '6.0'}
  - {typename: float, name: offset, default_value: '3.0'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [hard_swish]
    param: [x, threshold, scale, offset]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: hard_swish_grad
- name: histogram
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int64_t, name: bins}
  - {typename: int, name: min}
  - {typename: int, name: max}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: HistogramInferMeta
    param: [x, bins, min, max]
  kernel:
    func: [histogram]
    param: [x, bins, min, max]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: huber_loss
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: delta}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: residual, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: HuberLossInferMeta
    param: [input, label, delta]
  kernel:
    func: [huber_loss]
    param: [input, label, delta]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: huber_loss_grad
- name: imag
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: RealAndImagInferMeta
    param: [x]
  kernel:
    func: [imag]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: imag_grad
- name: increment
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: value}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: IncrementInferMeta
    param: [x, value]
  kernel:
    func: [increment]
    param: [x, value]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: index_sample
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: IndexSampleInferMeta
    param: [x, index]
  kernel:
    func: [index_sample]
    param: [x, index]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: index_sample_grad
- name: index_select
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: dim}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: IndexSelectInferMeta
    param: [x, index, dim]
  kernel:
    func: [index_select]
    param: [x, index, dim]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: index_select_grad
- name: instance_norm
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: scale, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: bias, optional: true, no_need_buffer: false}
  attrs:
  - {typename: float, name: epsilon}
  outputs:
  - {typename: Tensor, name: y, intermediate: false}
  - {typename: Tensor, name: saved_mean, intermediate: true}
  - {typename: Tensor, name: saved_variance, intermediate: true}
  no_need_buffer: null
  infer_meta:
    func: InstanceNormInferMeta
    param: [x, scale, bias, epsilon]
  kernel:
    func: [instance_norm]
    param: [x, scale, bias, epsilon]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: instance_norm_grad
- name: is_empty
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: IsEmptyInferMeta
    param: [x]
  kernel:
    func: [is_empty]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: isclose
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: rtol}
  - {typename: Scalar, name: atol}
  - {typename: bool, name: equal_nan}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ValueCompareInferMeta
    param: [x, y]
  kernel:
    func: [isclose]
    param: [x, y, rtol, atol, equal_nan]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: isfinite
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: IsfiniteInferMeta
    param: [x]
  kernel:
    func: [isfinite, infinite_sr]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: isinf
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: IsfiniteInferMeta
    param: [x]
  kernel:
    func: [isinf, isinf_sr]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: isnan
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: IsfiniteInferMeta
    param: [x]
  kernel:
    func: [isnan, isnan_sr]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: kldiv_loss
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: reduction}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: KLDivInferMeta
    param: [x, label, reduction]
  kernel:
    func: [kldiv_loss]
    param: [x, label, reduction]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: kldiv_loss_grad
- name: kron
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: KronInferMeta
    param: [x, y]
  kernel:
    func: [kron]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: kron_grad
- name: kthvalue
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: k}
  - {typename: int, name: axis}
  - {typename: bool, name: keepdim}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: indices, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: KthvalueInferMeta
    param: [x, k, axis, keepdim]
  kernel:
    func: [kthvalue]
    param: [x, k, axis, keepdim]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: kthvalue_grad
- name: label_smooth
  inputs:
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: prior_dist, optional: true, no_need_buffer: false}
  attrs:
  - {typename: float, name: epsilon}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [label]
  kernel:
    func: [label_smooth]
    param: [label, prior_dist, epsilon]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [label]
  inplace: null
  backward: label_smooth_grad
- name: layer_norm
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: scale, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: bias, optional: true, no_need_buffer: false}
  attrs:
  - {typename: float, name: epsilon}
  - {typename: int, name: begin_norm_axis}
  - {typename: bool, name: is_test}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: mean, intermediate: false}
  - {typename: Tensor, name: variance, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: LayerNormInferMeta
    param: [x, scale, bias, epsilon, begin_norm_axis, is_test]
  kernel:
    func: [layer_norm]
    param: [x, scale, bias, epsilon, begin_norm_axis, is_test]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: layer_norm_grad
- name: leaky_relu
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: alpha}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [leaky_relu]
    param: [x, alpha]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: leaky_relu_grad
- name: lerp
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: weight, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: LerpInferMeta
    param: [x, y, weight]
  kernel:
    func: [lerp]
    param: [x, y, weight]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: lerp_grad
- name: less_equal
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CompareInferMeta
    param: [x, y, axis]
  kernel:
    func: [less_equal]
    param: [x, y, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: less_than
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CompareInferMeta
    param: [x, y, axis]
  kernel:
    func: [less_than]
    param: [x, y, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: lgamma
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [lgamma]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: lgamma_grad
- name: linspace
  inputs:
  - {typename: Tensor, name: start, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: stop, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: number, optional: false, no_need_buffer: false}
  attrs:
  - {typename: DataType, name: dtype}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: LinspaceInferMeta
    param: [start, stop, number, dtype]
  kernel:
    func: [linspace]
    param: [start, stop, number, dtype]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
  inplace: null
  backward: null
- name: log
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [log]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: log_grad
- name: log10
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [log10]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: log10_grad
- name: log1p
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [log1p]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: log1p_grad
- name: log2
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [log2]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: log2_grad
- name: log_loss
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: epsilon}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: LogLossInferMeta
    param: [input, label, epsilon]
  kernel:
    func: [log_loss]
    param: [input, label, epsilon]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: log_loss_grad
- name: log_softmax
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMetaCheckAxis
    param: [x, axis]
  kernel:
    func: [log_softmax]
    param: [x, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: log_softmax_grad
- name: logcumsumexp
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  - {typename: bool, name: flatten}
  - {typename: bool, name: exclusive}
  - {typename: bool, name: reverse}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CumInferMeta
    param: [x, axis, flatten, exclusive, reverse]
  kernel:
    func: [logcumsumexp]
    param: [x, axis, flatten, exclusive, reverse]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: logcumsumexp_grad
- name: logical_and
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [logical_and]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: logical_not
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [logical_not]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: logical_or
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [logical_or]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: logical_xor
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [logical_xor]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: logit
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: eps, default_value: 1e-6f}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [logit]
    param: [x, eps]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: logit_grad
- name: logsigmoid
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [logsigmoid]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: logsigmoid_grad
- name: logsumexp
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: axis}
  - {typename: bool, name: keepdim}
  - {typename: bool, name: reduce_all}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: LogsumexpInferMeta
    param: [x, axis, keepdim, reduce_all]
  kernel:
    func: [logsumexp]
    param: [x, axis, keepdim, reduce_all]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: logsumexp_grad
- name: masked_select
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: mask, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MaskedSelectInferMeta
    param: [x, mask]
  kernel:
    func: [masked_select]
    param: [x, mask]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: masked_select_grad
- name: matmul
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: transpose_x, default_value: 'false'}
  - {typename: bool, name: transpose_y, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MatmulInferMeta
    param: [x, y, transpose_x, transpose_y]
  kernel:
    func: [matmul]
    param: [x, y, transpose_x, transpose_y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: matmul_grad
- name: matrix_power
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: n}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [matrix_power]
    param: [x, n]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: matrix_power_grad
- name: matrix_rank
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: tol}
  - {typename: bool, name: use_default_tol, default_value: 'true'}
  - {typename: bool, name: hermitian, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MatrixRankInferMeta
    param: [x, use_default_tol, hermitian]
  kernel:
    func: [matrix_rank]
    param: [x, tol, use_default_tol, hermitian]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: matrix_rank_tol
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: atol_tensor, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: use_default_tol, default_value: 'true'}
  - {typename: bool, name: hermitian, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MatrixRankTolInferMeta
    param: [x, atol_tensor, use_default_tol, hermitian]
  kernel:
    func: [matrix_rank_tol]
    param: [x, atol_tensor, use_default_tol, hermitian]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: max
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: dims, default_value: '{}'}
  - {typename: bool, name: keep_dim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ReduceInferMeta
    param: [x, dims, keep_dim]
  kernel:
    func: [max]
    param: [x, dims, keep_dim]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: max_grad
- name: max_pool2d_with_index
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: kernel_size}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: bool, name: global_pooling}
  - {typename: bool, name: adaptive}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: mask, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MaxPoolWithIndexInferMeta
    param: [x, kernel_size, strides, paddings, global_pooling, adaptive]
  kernel:
    func: [max_pool2d_with_index]
    param: [x, kernel_size, strides, paddings, global_pooling, adaptive]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: max_pool2d_with_index_grad
- name: max_pool3d_with_index
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: kernel_size}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: bool, name: global_pooling}
  - {typename: bool, name: adaptive}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: mask, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MaxPoolWithIndexInferMeta
    param: [x, kernel_size, strides, paddings, global_pooling, adaptive]
  kernel:
    func: [max_pool3d_with_index]
    param: [x, kernel_size, strides, paddings, global_pooling, adaptive]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: max_pool3d_with_index_grad
- name: maximum
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [maximum]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: maximum_grad
- name: maxout
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: groups}
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MaxOutInferMeta
    param: [x, groups, axis]
  kernel:
    func: [maxout]
    param: [x, groups, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: maxout_grad
- name: mean
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: dims, default_value: '{}'}
  - {typename: bool, name: keep_dim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ReduceInferMeta
    param: [x, dims, keep_dim]
  kernel:
    func: [mean]
    param: [x, dims, keep_dim]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: mean_grad
- name: mean_all
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MeanAllInferMeta
    param: [x]
  kernel:
    func: [mean_all]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: mean_all_grad
- name: meshgrid
  inputs:
  - {typename: 'Tensor[]', name: inputs, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: 'Tensor[]', name: out, size: inputs.size(), intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MeshgridInferMeta
    param: [inputs]
  kernel:
    func: [meshgrid]
    param: [inputs]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: meshgrid_grad
- name: min
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: dims, default_value: '{}'}
  - {typename: bool, name: keep_dim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ReduceInferMeta
    param: [x, dims, keep_dim]
  kernel:
    func: [min]
    param: [x, dims, keep_dim]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: min_grad
- name: minimum
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [minimum]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: minimum_grad
- name: mish
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: lambda}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [mish]
    param: [x, lambda]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: mish_grad
- name: mode
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  - {typename: bool, name: keepdim}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: indices, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ModeInferMeta
    param: [x, axis, keepdim]
  kernel:
    func: [mode]
    param: [x, axis, keepdim]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: mode_grad
- name: modulo
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [modulo]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: modulo_grad
- name: momentum
  inputs:
  - {typename: Tensor, name: param, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: velocity, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: learning_rate, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: master_param, optional: true, no_need_buffer: false}
  attrs:
  - {typename: float, name: mu}
  - {typename: bool, name: use_nesterov, default_value: 'false'}
  - {typename: str, name: regularization_method, default_value: '""'}
  - {typename: float, name: regularization_coeff, default_value: '0.0'}
  - {typename: bool, name: multi_precision, default_value: 'false'}
  - {typename: float, name: rescale_grad, default_value: 1.0f}
  outputs:
  - {typename: Tensor, name: param_out, intermediate: false}
  - {typename: Tensor, name: velocity_out, intermediate: false}
  - {typename: Tensor, name: master_param_out, intermediate: false}
  no_need_buffer: null
  invoke: {func: momentum_impl, args: 'param, grad, velocity, learning_rate, master_param,
      mu, use_nesterov, regularization_method, regularization_coeff, multi_precision,
      rescale_grad'}
  backward: null
- name: multi_dot
  inputs:
  - {typename: 'Tensor[]', name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MultiDotInferMeta
    param: [x]
  kernel:
    func: [multi_dot]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: multi_dot_grad
- name: multinomial
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: num_samples}
  - {typename: bool, name: replacement}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MultinomialInferMeta
    param: [x, num_samples, replacement]
  kernel:
    func: [multinomial]
    param: [x, num_samples, replacement]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: multiplex
  inputs:
  - {typename: 'Tensor[]', name: ins, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: ids, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MultiplexInferMeta
    param: [ins, ids]
  kernel:
    func: [multiplex]
    param: [ins, ids]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [ins]
  inplace: null
  backward: multiplex_grad
- name: multiply
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [multiply]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: multiply_grad
- name: mv
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: vec, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MvInferMeta
    param: [x, vec]
  kernel:
    func: [mv]
    param: [x, vec]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: mv_grad
- name: nll_loss
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: weight, optional: true, no_need_buffer: false}
  attrs:
  - {typename: int64_t, name: ignore_index}
  - {typename: str, name: reduction}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: total_weight, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: NllLossRawInferMeta
    param: [input, label, weight, ignore_index, reduction]
  kernel:
    func: [nll_loss]
    param: [input, label, weight, ignore_index, reduction]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [input]
  inplace: null
  backward: nll_loss_grad
- name: norm
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  - {typename: float, name: epsilon}
  - {typename: bool, name: is_test}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: norm, intermediate: true}
  no_need_buffer: null
  infer_meta:
    func: NormInferMeta
    param: [x, axis, epsilon, is_test]
  kernel:
    func: [norm]
    param: [x, axis, epsilon, is_test]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: norm_grad
- name: not_equal
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CompareInferMeta
    param: [x, y, axis]
  kernel:
    func: [not_equal]
    param: [x, y, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: one_hot
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar(int), name: num_classes}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: OneHotInferMeta
    param: [x, num_classes]
  kernel:
    func: [one_hot]
    param: [x, num_classes]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: ones_like
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: DataType, name: dtype, default_value: 'DataType::UNDEFINED'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  invoke: {func: full_like, args: 'x, 1, dtype, place'}
  backward: null
- name: p_norm
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: porder}
  - {typename: int, name: axis}
  - {typename: float, name: epsilon}
  - {typename: bool, name: keepdim}
  - {typename: bool, name: asvector, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: PNormInferMeta
    param: [x, porder, axis, epsilon, keepdim, asvector]
  kernel:
    func: [p_norm]
    param: [x, porder, axis, epsilon, keepdim, asvector]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: p_norm_grad
- name: pad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: paddings}
  - {typename: float, name: pad_value}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: PadInferMeta
    param: [x, paddings, pad_value]
  kernel:
    func: [pad]
    param: [x, paddings, pad_value]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: pad_grad
- name: pad3d
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: paddings}
  - {typename: str, name: mode}
  - {typename: float, name: pad_value}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: Pad3dInferMeta
    param: [x, paddings, mode, pad_value, data_format]
  kernel:
    func: [pad3d]
    param: [x, paddings, mode, pad_value, data_format]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: pad3d_grad
- name: pixel_shuffle
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: upscale_factor}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: PixelShuffleInferMeta
    param: [x, upscale_factor, data_format]
  kernel:
    func: [pixel_shuffle]
    param: [x, upscale_factor, data_format]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: pixel_shuffle_grad
- name: poisson
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [poisson]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: poisson_grad
- name: pool2d
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: kernel_size}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: bool, name: ceil_mode}
  - {typename: bool, name: exclusive}
  - {typename: str, name: data_format}
  - {typename: str, name: pooling_type}
  - {typename: bool, name: global_pooling}
  - {typename: bool, name: adaptive}
  - {typename: str, name: padding_algorithm}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: PoolInferMeta
    param: [x, kernel_size, strides, paddings, ceil_mode, exclusive, data_format,
      pooling_type, global_pooling, adaptive, padding_algorithm]
  kernel:
    func: [pool2d]
    param: [x, kernel_size, strides, paddings, ceil_mode, exclusive, data_format,
      pooling_type, global_pooling, adaptive, padding_algorithm]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: pool2d_grad
- name: pool2d_gpudnn_unused
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: kernel_size}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: bool, name: ceil_mode}
  - {typename: bool, name: exclusive}
  - {typename: str, name: data_format}
  - {typename: str, name: pooling_type}
  - {typename: bool, name: global_pooling}
  - {typename: bool, name: adaptive}
  - {typename: str, name: padding_algorithm}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: PoolInferMeta
    param: [x, kernel_size, strides, paddings, ceil_mode, exclusive, data_format,
      pooling_type, global_pooling, adaptive, padding_algorithm]
  kernel:
    func: [pool2d]
    param: [x, kernel_size, strides, paddings, ceil_mode, exclusive, data_format,
      pooling_type, global_pooling, adaptive, padding_algorithm]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: pool2d_grad_gpudnn_unused
- name: pool3d
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: kernel_size}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: bool, name: ceil_mode}
  - {typename: bool, name: exclusive}
  - {typename: str, name: data_format}
  - {typename: str, name: pooling_type}
  - {typename: bool, name: global_pooling}
  - {typename: bool, name: adaptive}
  - {typename: str, name: padding_algorithm}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: PoolInferMeta
    param: [x, kernel_size, strides, paddings, ceil_mode, exclusive, data_format,
      pooling_type, global_pooling, adaptive, padding_algorithm]
  kernel:
    func: [pool3d]
    param: [x, kernel_size, strides, paddings, ceil_mode, exclusive, data_format,
      pooling_type, global_pooling, adaptive, padding_algorithm]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: pool3d_grad
- name: pow
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: s}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [pow]
    param: [x, s]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: pow_grad
- name: prelu
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: alpha, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: data_format}
  - {typename: str, name: mode}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: PReluInferMeta
    param: [x, alpha, data_format, mode]
  kernel:
    func: [prelu]
    param: [x, alpha, data_format, mode]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: prelu_grad
- name: psroi_pool
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: boxes, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: boxes_num, optional: true, no_need_buffer: false}
  attrs:
  - {typename: int, name: pooled_height}
  - {typename: int, name: pooled_width}
  - {typename: int, name: output_channels}
  - {typename: float, name: spatial_scale}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: PsroiPoolInferMeta
    param: [x, boxes, boxes_num, pooled_height, pooled_width, output_channels, spatial_scale]
  kernel:
    func: [psroi_pool]
    param: [x, boxes, boxes_num, pooled_height, pooled_width, output_channels, spatial_scale]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: psroi_pool_grad
- name: put_along_axis
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: value, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  - {typename: str, name: reduce}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [index]
  kernel:
    func: [put_along_axis]
    param: [x, index, value, axis, reduce]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: put_along_axis_grad
- name: qr
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: mode}
  outputs:
  - {typename: Tensor, name: q, intermediate: false}
  - {typename: Tensor, name: r, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: QrInferMeta
    param: [x, mode]
  kernel:
    func: [qr]
    param: [x, mode]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: randint
  inputs: []
  attrs:
  - {typename: int, name: low}
  - {typename: int, name: high}
  - {typename: IntArray, name: shape}
  - {typename: DataType, name: dtype, default_value: 'DataType::INT64'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: RandintInferMeta
    param: [low, high, shape, dtype]
  kernel:
    func: [randint]
    param: [low, high, shape, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
  inplace: null
  backward: null
- name: randperm
  inputs: []
  attrs:
  - {typename: int, name: n}
  - {typename: DataType, name: dtype}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: RandpermInferMeta
    param: [n, dtype]
  kernel:
    func: [randperm]
    param: [n, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
  inplace: null
  backward: null
- name: real
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: RealAndImagInferMeta
    param: [x]
  kernel:
    func: [real]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: real_grad
- name: reciprocal
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [reciprocal]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: reciprocal_grad
- name: reduce_prod
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: dims}
  - {typename: bool, name: keep_dim}
  - {typename: bool, name: reduce_all}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ReduceInferMetaBase
    param: [x, dims, keep_dim, reduce_all]
  kernel:
    func: [prod_raw]
    param: [x, dims, keep_dim, reduce_all]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: reduce_prod_grad
- name: relu
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [relu]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: {out: x}
  backward: relu_grad
- name: reshape
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: shape}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: xshape, intermediate: true}
  no_need_buffer: null
  infer_meta:
    func: ReshapeWithXShapeInferMeta
    param: [x, shape]
  kernel:
    func: [reshape_with_xshape]
    param: [x, shape]
    backend: null
    layout: null
    data_type: null
  inplace: {out: x}
  backward: reshape_grad
- name: roi_align
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: boxes, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: boxes_num, optional: true, no_need_buffer: false}
  attrs:
  - {typename: int, name: pooled_height}
  - {typename: int, name: pooled_width}
  - {typename: float, name: spatial_scale}
  - {typename: int, name: sampling_ratio}
  - {typename: bool, name: aligned}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: RoiAlignInferMeta
    param: [x, boxes, boxes_num, pooled_height, pooled_width, spatial_scale, sampling_ratio,
      aligned]
  kernel:
    func: [roi_align]
    param: [x, boxes, boxes_num, pooled_height, pooled_width, spatial_scale, sampling_ratio,
      aligned]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: roi_align_grad
- name: roi_pool
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: boxes, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: boxes_num, optional: true, no_need_buffer: false}
  attrs:
  - {typename: int, name: pooled_height}
  - {typename: int, name: pooled_width}
  - {typename: float, name: spatial_scale}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: arg_max, intermediate: true}
  no_need_buffer: null
  infer_meta:
    func: RoiPoolInferMeta
    param: [x, boxes, boxes_num, pooled_height, pooled_width, spatial_scale]
  kernel:
    func: [roi_pool]
    param: [x, boxes, boxes_num, pooled_height, pooled_width, spatial_scale]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: roi_pool_grad
- name: roll
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: shifts}
  - {typename: 'int64_t[]', name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: RollInferMeta
    param: [x, shifts, axis]
  kernel:
    func: [roll]
    param: [x, shifts, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: roll_grad
- name: round
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [round]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: round_grad
- name: rsqrt
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [rsqrt]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: {out: x}
  backward: rsqrt_grad
- name: scale
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: scale}
  - {typename: float, name: bias}
  - {typename: bool, name: bias_after_scale}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [scale, scale_sr]
    param: [x, scale, bias, bias_after_scale]
    backend: null
    layout: null
    data_type: null
  inplace: {out: x}
  backward: scale_grad
- name: scatter
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: updates, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: overwrite}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ScatterInferMeta
    dtype: x
    param: [x, index, updates, overwrite]
  kernel:
    func: [scatter]
    param: [x, index, updates, overwrite]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: scatter_grad
- name: scatter_nd_add
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: updates, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ScatterNdAddInferMeta
    dtype: x
    param: [x, index, updates]
  kernel:
    func: [scatter_nd_add]
    param: [x, index, updates]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: scatter_nd_add_grad
- name: searchsorted
  inputs:
  - {typename: Tensor, name: sorted_sequence, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: value, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: out_int32}
  - {typename: bool, name: right}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: SearchsortedInferMeta
    param: [sorted_sequence, value, out_int32, right]
  kernel:
    func: [searchsorted]
    param: [sorted_sequence, value, out_int32, right]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [sorted_sequence]
  inplace: null
  backward: null
- name: segment_pool
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: segment_ids, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: pooltype}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: summed_ids, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: SegmentPoolInferMeta
    param: [x, segment_ids, pooltype]
  kernel:
    func: [segment_pool]
    param: [x, segment_ids, pooltype]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: segment_pool_grad
- name: selu
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: scale}
  - {typename: float, name: alpha}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [selu]
    param: [x, scale, alpha]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: selu_grad
- name: sgd
  inputs:
  - {typename: Tensor, name: param, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: learning_rate, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: master_param, optional: true, no_need_buffer: false}
  attrs:
  - {typename: bool, name: multi_precision}
  outputs:
  - {typename: Tensor, name: param_out, intermediate: false}
  - {typename: Tensor, name: master_param_out, intermediate: false}
  no_need_buffer: null
  invoke: {func: sgd_impl, args: 'param, learning_rate, grad, master_param, multi_precision'}
  backward: null
- name: shape
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ShapeInferMeta
    param: [input]
  kernel:
    func: [shape, shape_sr]
    param: [input]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: shard_index
  inputs:
  - {typename: Tensor, name: in, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: index_num}
  - {typename: int, name: nshards}
  - {typename: int, name: shard_id}
  - {typename: int, name: ignore_value}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ShardIndexInferMeta
    param: [in, index_num, nshards, shard_id, ignore_value]
  kernel:
    func: [shard_index]
    param: [in, index_num, nshards, shard_id, ignore_value]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: sigmoid
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [sigmoid]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: sigmoid_grad
- name: sigmoid_cross_entropy_with_logits
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: normalize}
  - {typename: int, name: ignore_index}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: SigmoidCrossEntropyWithLogitsInferMeta
    param: [x, label, normalize, ignore_index]
  kernel:
    func: [sigmoid_cross_entropy_with_logits]
    param: [x, label, normalize, ignore_index]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: sigmoid_cross_entropy_with_logits_grad
- name: sign
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [sign]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: silu
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [silu]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: silu_grad
- name: sin
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [sin]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: sin_grad
- name: sinh
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [sinh]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: sinh_grad
- name: size
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: SizeInferMeta
    param: [x]
  kernel:
    func: [size]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: slice
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: axes}
  - {typename: IntArray, name: starts}
  - {typename: IntArray, name: ends}
  - {typename: 'int64_t[]', name: infer_flags}
  - {typename: 'int64_t[]', name: decrease_axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: SliceRawInferMeta
    param: [input, axes, starts, ends, infer_flags, decrease_axis]
  kernel:
    func: [slice]
    param: [input, axes, starts, ends, infer_flags, decrease_axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: slice_grad
- name: soft_shrink
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: lambda}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [soft_shrink]
    param: [x, lambda]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: soft_shrink_grad
- name: softmax
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: SoftmaxInferMeta
    param: [x, axis]
  kernel:
    func: [softmax]
    param: [x, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: softmax_grad
- name: split
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: num_or_sections}
  - {typename: Scalar(int), name: axis}
  outputs:
  - {typename: 'Tensor[]', name: out, intermediate: false}
  no_need_buffer: null
  invoke: {func: split_impl, args: 'x, num_or_sections, axis'}
  backward: split_grad
- name: sqrt
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [sqrt]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: sqrt_grad
- name: square
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [square]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: square_grad
- name: squeeze
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: axes}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: xshape, intermediate: true}
  no_need_buffer: null
  infer_meta:
    func: SqueezeInferMeta
    param: [x, axes]
  kernel:
    func: [squeeze]
    param: [x, axes]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: squeeze_grad
- name: stack
  inputs:
  - {typename: 'Tensor[]', name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: StackInferMeta
    param: [x, axis]
  kernel:
    func: [stack]
    param: [x, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: stack_grad
- name: strided_slice
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: axes}
  - {typename: IntArray, name: starts}
  - {typename: IntArray, name: ends}
  - {typename: IntArray, name: strides}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: StridedSliceInferMeta
    param: [x, axes, starts, ends, strides]
  kernel:
    func: [strided_slice]
    param: [x, axes, starts, ends, strides]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: strided_slice_grad
- name: subtract
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [subtract]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: subtract_grad
- name: sum
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: dims, default_value: '{}'}
  - {typename: DataType, name: out_dtype, default_value: 'DataType::UNDEFINED'}
  - {typename: bool, name: keep_dim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: SumInferMeta
    param: [x, dims, out_dtype, keep_dim]
  kernel:
    func: [sum]
    param: [x, dims, out_dtype, keep_dim]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: sum_grad
- name: swish
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: beta, default_value: '1.0'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [swish]
    param: [x, beta]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: swish_grad
- name: take_along_axis
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [index]
  kernel:
    func: [take_along_axis]
    param: [x, index, axis]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: take_along_axis_grad
- name: tan
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [tan]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: tan_grad
- name: tanh
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [tanh]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: tanh_grad
- name: tanh_shrink
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [tanh_shrink]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: tanh_shrink_grad
- name: thresholded_relu
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: threshold}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [thresholded_relu]
    param: [x, threshold]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: thresholded_relu_grad
- name: tile
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: repeat_times}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: TileInferMeta
    param: [x, repeat_times]
  kernel:
    func: [tile]
    param: [x, repeat_times]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: tile_grad
- name: top_k
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: k}
  - {typename: int, name: axis, default_value: '-1'}
  - {typename: bool, name: largest, default_value: 'true'}
  - {typename: bool, name: sorted, default_value: 'true'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: indices, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: TopKInferMeta
    param: [x, k, axis, largest, sorted]
  kernel:
    func: [top_k]
    param: [x, k, axis, largest, sorted]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: top_k_grad
- name: trace
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: offset}
  - {typename: int, name: axis1}
  - {typename: int, name: axis2}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: TraceInferMeta
    param: [x, offset, axis1, axis2]
  kernel:
    func: [trace]
    param: [x, offset, axis1, axis2]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: trace_grad
- name: transpose
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: TransposeInferMeta
    param: [x, axis]
  kernel:
    func: [transpose]
    param: [x, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: transpose_grad
- name: triangular_solve
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: upper}
  - {typename: bool, name: transpose}
  - {typename: bool, name: unitriangular}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: TriangularSolveInferMeta
    param: [x, y, upper, transpose, unitriangular]
  kernel:
    func: [triangular_solve]
    param: [x, y, upper, transpose, unitriangular]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: triangular_solve_grad
- name: tril_indices
  inputs: []
  attrs:
  - {typename: int, name: rows}
  - {typename: int, name: cols}
  - {typename: int, name: offset}
  - {typename: DataType, name: dtype}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: TrilIndicesInferMeta
    param: [rows, cols, offset, dtype]
  kernel:
    func: [tril_indices]
    param: [rows, cols, offset, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
  inplace: null
  backward: null
- name: tril_triu
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: diagonal}
  - {typename: bool, name: lower}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: TrilTriuInferMeta
    param: [x, diagonal, lower]
  kernel:
    func: [tril_triu]
    param: [x, diagonal, lower]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: tril_triu_grad
- name: trunc
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [trunc]
    param: [x]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: trunc_grad
- name: truncated_gaussian_random
  inputs: []
  attrs:
  - {typename: 'int[]', name: shape}
  - {typename: float, name: mean}
  - {typename: float, name: std}
  - {typename: int, name: seed}
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: TruncatedGaussianRandomInferMeta
    param: [shape, mean, std, seed, dtype]
  kernel:
    func: [truncated_gaussian_random]
    param: [shape, mean, std, seed, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
  inplace: null
  backward: null
- name: unbind
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: 'Tensor[]', name: out, size: 'axis<0 ? input.dims()[input.dims().size()+axis]:input.dims()[axis]',
    intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnbindInferMeta
    param: [input, axis]
  kernel:
    func: [unbind]
    param: [input, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: unbind_grad
- name: unfold
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: kernel_sizes}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: 'int[]', name: dilations}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnfoldInferMeta
    param: [x, kernel_sizes, strides, paddings, dilations]
  kernel:
    func: [unfold]
    param: [x, kernel_sizes, strides, paddings, dilations]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: unfold_grad
- name: uniform_random
  inputs: []
  attrs:
  - {typename: IntArray, name: shape}
  - {typename: DataType, name: dtype}
  - {typename: float, name: min}
  - {typename: float, name: max}
  - {typename: int, name: seed}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UniformRandomInferMeta
    param: [shape, dtype, min, max, seed]
  kernel:
    func: [uniform_random]
    param: [shape, dtype, min, max, seed]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
  inplace: null
  backward: null
- name: unique
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: return_index}
  - {typename: bool, name: return_inverse}
  - {typename: bool, name: return_counts}
  - {typename: 'int[]', name: axis}
  - {typename: DataType, name: dtype, default_value: 'DataType::INT64'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: indices, intermediate: false}
  - {typename: Tensor, name: inverse, intermediate: false}
  - {typename: Tensor, name: counts, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UniqueInferMeta
    param: [x, return_index, return_inverse, return_counts, axis, dtype]
  kernel:
    func: [unique]
    param: [x, return_index, return_inverse, return_counts, axis, dtype]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: null
- name: unsqueeze
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: xshape, intermediate: true}
  no_need_buffer: null
  infer_meta:
    func: UnsqueezeInferMeta
    param: [x, axis]
  kernel:
    func: [unsqueeze]
    param: [x, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: unsqueeze_grad
- name: viterbi_decode
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: transition, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: length, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: include_bos_eos_tag}
  outputs:
  - {typename: Tensor, name: scores, intermediate: false}
  - {typename: Tensor, name: path, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ViterbiDecodeInferMeta
    param: [input, transition, length, include_bos_eos_tag]
  kernel:
    func: [viterbi_decode]
    param: [input, transition, length, include_bos_eos_tag]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [input]
  inplace: null
  backward: null
- name: where
  inputs:
  - {typename: Tensor, name: condition, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: WhereInferMeta
    param: [condition, x, y]
  kernel:
    func: [where]
    param: [condition, x, y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: where_grad
- name: where_index
  inputs:
  - {typename: Tensor, name: condition, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: WhereIndexInferMeta
    param: [condition]
  kernel:
    func: [where_index]
    param: [condition]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
- name: yolo_box
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: img_size, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: anchors}
  - {typename: int, name: class_num}
  - {typename: float, name: conf_thresh}
  - {typename: int, name: downsample_ratio}
  - {typename: bool, name: clip_bbox}
  - {typename: float, name: scale_x_y, default_value: '1.0'}
  - {typename: bool, name: iou_aware, default_value: 'false'}
  - {typename: float, name: iou_aware_factor, default_value: '0.5'}
  outputs:
  - {typename: Tensor, name: boxes, intermediate: false}
  - {typename: Tensor, name: scores, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: YoloBoxInferMeta
    param: [x, img_size, anchors, class_num, conf_thresh, downsample_ratio, clip_bbox,
      scale_x_y, iou_aware, iou_aware_factor]
  kernel:
    func: [yolo_box]
    param: [x, img_size, anchors, class_num, conf_thresh, downsample_ratio, clip_bbox,
      scale_x_y, iou_aware, iou_aware_factor]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: null
- name: zeros_like
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: DataType, name: dtype, default_value: 'DataType::UNDEFINED'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  invoke: {func: full_like, args: 'x, 0, dtype, place'}
  backward: null
