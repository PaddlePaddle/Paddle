- api : add_coo
  args : (Tensor x, Tensor y)
  output : Tensor(out)
  kernel :
    func : sparse_elementwise_add_coo{sparse_coo -> sparse_coo}
    layout : x
  backward : add_coo_grad

- api : add_csr
  args : (Tensor x, Tensor y)
  output : Tensor(out)
  kernel :
    func : sparse_elementwise_add_csr{sparse_csr -> sparse_csr}
    layout : x

- api : conv3d
  args : (Tensor x, Tensor kernel, int[] paddings, int[] dilations, int[] strides, int groups, bool subm)
  output : Tensor(out), Tensor(rulebook)
  kernel :
    func : sparse_conv3d{sparse_coo, dense -> sparse_coo, dense}
    layout : x
  intermediate : rulebook
  backward : conv3d_grad

- api : coo_to_dense
  args : (Tensor x)
  output : Tensor(out)
  invoke : to_dense_impl(x)
  backward : coo_to_dense_grad

- api : create_sparse_coo_tensor
  args : (Tensor values, Tensor indices, IntArray dense_shape)
  output : Tensor(out)
  kernel :
    func : sparse_coo_tensor{dense, dense -> sparse_coo}
    layout : values
    data_type : values
  backward : create_sparse_coo_tensor_grad

- api : dense_to_coo
  args : (Tensor x, int64_t sparse_dim)
  output : Tensor(out)
  invoke : to_sparse_coo_impl(x, sparse_dim)
  backward : dense_to_coo_grad

- api : div_coo
  args : (Tensor x, Tensor y)
  output : Tensor(out@SparseCooTensor)
  kernel :
    func : sparse_elementwise_div_coo{sparse_coo -> sparse_coo}
    layout : x
  backward : div_coo_grad

- api : div_csr
  args : (Tensor x, Tensor y)
  output : Tensor(out@SparseCsrTensor)
  kernel :
    func : sparse_elementwise_div_csr{sparse_csr -> sparse_csr}
    layout : x

- api : mul_coo
  args : (Tensor x, Tensor y)
  output : Tensor(out@SparseCooTensor)
  kernel :
    func : sparse_elementwise_mul_coo{sparse_coo -> sparse_coo}
    layout : x
  backward : mul_coo_grad

- api : mul_csr
  args : (Tensor x, Tensor y)
  output : Tensor(out@SparseCsrTensor)
  kernel :
    func : sparse_elementwise_mul_csr{sparse_csr -> sparse_csr}
    layout : x

- api : relu
  args : (Tensor x)
  output : Tensor(out)
  kernel :
    func : sparse_coo_relu{sparse_coo -> sparse_coo},
           sparse_csr_relu{sparse_csr -> sparse_csr}
    layout : x
  backward : relu_grad

- api : sin
  args : (Tensor x)
  output : Tensor(out@SparseCooTensor)
  kernel :
    func : sparse_coo_sin {sparse_coo -> sparse_coo},
           sparse_csr_sin {sparse_csr -> sparse_csr}
    layout : x
  backward : sin_grad

- api : sqrt
  args : (Tensor x)
  output : Tensor(out)
  kernel :
    func : sparse_coo_sqrt{sparse_coo -> sparse_coo},
           sparse_csr_sqrt{sparse_csr -> sparse_csr}
    layout : x
  backward : sqrt_grad

- api : sub_coo
  args : (Tensor x, Tensor y)
  output : Tensor(out@SparseCooTensor)
  kernel :
    func : sparse_elementwise_sub_coo{sparse_coo -> sparse_coo}
    layout : x
  backward : sub_coo_grad

- api : sub_csr
  args : (Tensor x, Tensor y)
  output : Tensor(out@SparseCsrTensor)
  kernel :
    func : sparse_elementwise_sub_csr{sparse_csr -> sparse_csr}
    layout : x

- api : tanh
  args : (Tensor x)
  output : Tensor(out)
  kernel :
    func : sparse_coo_tanh{sparse_coo -> sparse_coo},
           sparse_csr_tanh{sparse_csr -> sparse_csr}
    layout : x
  backward : tanh_grad

- api : to_dense
  args : (Tensor x)
  output : Tensor(out)
  invoke : to_dense_impl(x)

- api : to_sparse_coo
  args : (Tensor x, int64_t sparse_dim)
  output : Tensor(out)
  invoke : to_sparse_coo_impl(x, sparse_dim)

- api : to_sparse_csr
  args : (Tensor x)
  output : Tensor(out)
  invoke : to_sparse_csr_impl(x)

- api : values
  args : (Tensor x)
  output : Tensor(out)
  kernel :
    func : coo_values{sparse_coo -> dense},
           csr_values{sparse_csr -> dense}
    layout : x
  backward : values_grad

- api: maxpool
  args : (Tensor x, int[] kernel_sizes, int[] paddings, int[] dilations, int[] strides)
  output : Tensor(out), Tensor(rulebook)
  kernel :
    func : sparse_maxpool{sparse_coo -> sparse_coo, dense}
    layout : x
  intermediate : rulebook
  backward : sparse_maxpool_grad
