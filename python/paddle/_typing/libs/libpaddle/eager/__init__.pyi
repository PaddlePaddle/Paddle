from __future__ import annotations
from paddle import Tensor
from . import ops
__all__ = ['PyLayer', 'StringTensor', 'Tensor', 'async_read', 'async_write', 'get_all_grads', 'get_grads_lists', 'get_grads_types', 'jit_function_call', 'ops', 'read_next_tensor_list', 'register_saved_tensors_hooks', 'reset_saved_tensors_hooks', 'run_backward', 'run_partial_grad', 'scale', 'set_master_grads', 'sparse_coo_tensor', 'sparse_csr_tensor', 'tensor_copy', 'to_uva_tensor']
class PyLayer:
    @staticmethod
    def __new__(type, *args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
    @staticmethod
    def apply(*args, **kwargs):
        ...
    @staticmethod
    def name(*args, **kwargs):
        ...
class StringTensor:
    @staticmethod
    def __new__(type, *args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
    @staticmethod
    def _is_initialized(*args, **kwargs):
        ...
    @staticmethod
    def _is_string_tensor_hold_allocation(*args, **kwargs):
        ...
    @staticmethod
    def numpy(*args, **kwargs):
        ...
def _add_backward_final_hook(*args, **kwargs):
    ...
def _get_custom_operator_inplace_map(*args, **kwargs):
    ...
def _is_run_in_backward(*args, **kwargs):
    ...
def _run_custom_op(*args, **kwargs):
    ...
def async_read(*args, **kwargs):
    ...
def async_write(*args, **kwargs):
    ...
def get_all_grads(*args, **kwargs):
    ...
def get_grads_lists(*args, **kwargs):
    ...
def get_grads_types(*args, **kwargs):
    ...
def jit_function_call(*args, **kwargs):
    ...
def read_next_tensor_list(*args, **kwargs):
    ...
def register_saved_tensors_hooks(*args, **kwargs):
    ...
def reset_saved_tensors_hooks(*args, **kwargs):
    ...
def run_backward(*args, **kwargs):
    ...
def run_partial_grad(*args, **kwargs):
    ...
def scale(*args, **kwargs):
    ...
def set_master_grads(*args, **kwargs):
    ...
def sparse_coo_tensor(*args, **kwargs):
    ...
def sparse_csr_tensor(*args, **kwargs):
    ...
def tensor_copy(*args, **kwargs):
    ...
def to_uva_tensor(*args, **kwargs):
    ...
