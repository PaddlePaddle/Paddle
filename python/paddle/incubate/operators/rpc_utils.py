# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from paddle import fluid
from paddle.utils.unique_name import generate


def rpc_call(
    src_ids=None, url="", voc_path="", cvt2str=True, timeout=3000, retry=100
):
    '''
    Decription:
        call a remote server and return a request id.
    Args:
        src_ids(Tensor): the tensor to send to the remote server
        url(str): the url to the remote server
        voc_path(str): the path of vocabulary path for converting src_ids to string
        cvt2str(bool): if set, convert src_ids to string before send to the remote server
        timeout(int): timeout in seconds
        retry(int): number of times to retry the same url
    Return:
        request_id(Tensor): request id to fetch the response of the reomte server
    Examples:
        paddle.enable_static()

        MAX_SIZE_QUERY = 18
        RES_TYPE = out_type

        with open("vocab.txt", "w") as voc:
            voc.write("ABC 0\n")
            voc.write("EFG 1\n")
            voc.write("HIG 2\n")
            voc.write("[<S>] 3\n")
            voc.write("[<N>] 4\n")
            voc.write("[<t>] 5\n")
            voc.write("[<T>] 6\n")
            voc.write("##good 7\n")
            voc.write("bad@@ 8\n")
            voc.write("@@badok 9\n")
            voc.write("你好 10\n")
            voc.write("haha 11\n")
            voc.write("##haha@@ 12\n")
            voc.write("[PAD] 13\n")
            voc.write("[gEnd] 14\n")

        # network
        in_query = paddle.static.data(
            name='X', shape=[-1, MAX_SIZE_QUERY], dtype='int32'
        )

        req_ids = rpc_call(
            in_query,
            url,
            "vocab.txt",
            use_ids,
        )

        out_data, out_succeed = rpc_result(req_ids, RES_TYPE)
        query_tensor = np.array(
            [
                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 2],
                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 1, 2, 14],
            ]
        ).astype("int32")

        # run
        exe = paddle.static.Executor(paddle.CUDAPlace(0))
        exe.run(paddle.static.default_startup_program())

        succeed, data, = exe.run(
            paddle.static.default_main_program(),
            feed={
                'X': query_tensor,
            },
            fetch_list=[out_succeed, out_data],
        )
    '''
    request_id = (
        fluid.default_main_program()
        .block(0)
        .create_var(
            name=generate("rpc_request_id"),
            dtype="int32",
            shape=[src_ids.shape[0]],
            persistable=False,
            stop_gradient=True,
        )
    )
    src_ids = src_ids.astype("int32")

    fluid.default_main_program().block(0).append_op(
        type="rpc_call",
        inputs={
            'X': [src_ids],
        },
        outputs={"Out": [request_id]},
        attrs={
            "url": url,
            "vocab_path": voc_path,
            "use_ids": not cvt2str,
            "timeout": timeout,
            "retry": retry,
        },
    )
    return request_id


def rpc_result(request_ids, result_dtype):
    '''
    Descriptions:
        get request result according request_ids generated by rpc_call
    Args:
        request ids(Tensor): request ids generated from rpc_call
        result_dtype(str): type of response of the remote server, now only support "float" and "str"
    Returns:
        res(Tensor): response result from remote server
        suceess(Tensor): whether  the request is success or not
    Examples:
        paddle.enable_static()

        MAX_SIZE_QUERY = 18
        RES_TYPE = out_type

        with open("vocab.txt", "w") as voc:
            voc.write("ABC 0\n")
            voc.write("EFG 1\n")
            voc.write("HIG 2\n")
            voc.write("[<S>] 3\n")
            voc.write("[<N>] 4\n")
            voc.write("[<t>] 5\n")
            voc.write("[<T>] 6\n")
            voc.write("##good 7\n")
            voc.write("bad@@ 8\n")
            voc.write("@@badok 9\n")
            voc.write("你好 10\n")
            voc.write("haha 11\n")
            voc.write("##haha@@ 12\n")
            voc.write("[PAD] 13\n")
            voc.write("[gEnd] 14\n")

        # network
        in_query = paddle.static.data(
            name='X', shape=[-1, MAX_SIZE_QUERY], dtype='int32'
        )

        req_ids = rpc_call(
            in_query,
            url,
            "vocab.txt",
            use_ids,
        )

        out_data, out_succeed = rpc_result(req_ids, RES_TYPE)
        query_tensor = np.array(
            [
                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 2],
                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 1, 2, 14],
            ]
        ).astype("int32")

        # run
        exe = paddle.static.Executor(paddle.CUDAPlace(0))
        exe.run(paddle.static.default_startup_program())

        succeed, data, = exe.run(
            paddle.static.default_main_program(),
            feed={
                'X': query_tensor,
            },
            fetch_list=[out_succeed, out_data],
        )

    '''
    if result_dtype == "float":
        res = (
            fluid.default_main_program()
            .block(0)
            .create_var(
                name=generate("rpc_res"),
                dtype="float32",
                shape=[request_ids.shape[0]],
                persistable=False,
                stop_gradient=True,
            )
        )
    elif result_dtype == "str":
        res = (
            fluid.default_main_program()
            .block(0)
            .create_var(
                name=generate("rpc_res"),
                dtype="uint8",
                shape=[request_ids.shape[0]],
                persistable=False,
                stop_gradient=True,
            )
        )
    else:
        raise ValueError("result dtype must be one of str ot float")

    success = (
        fluid.default_main_program()
        .block(0)
        .create_var(
            name=generate("rpc_success"),
            dtype="bool",
            shape=[1],
            persistable=False,
            stop_gradient=True,
        )
    )
    fluid.default_main_program().block(0).append_op(
        type="rpc_result",
        inputs={"X": [request_ids]},
        outputs={"Out": [res], "succeed": [success]},
        attrs={"res_type": result_dtype},
    )
    return res, success
