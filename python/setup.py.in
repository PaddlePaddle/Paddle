from setuptools import setup
import subprocess

def git_commit():
    try:
        cmd = ["git", "rev-parse", "HEAD"]
        git_commit = subprocess.Popen(cmd, stdout = subprocess.PIPE).communicate()[0].strip()
    except:
        git_commit = "Unknown"
    return git_commit

def write_version_py(filename="paddle/version.py"):
    cnt = """
# THIS FILE IS GENERATED FROM PADDLEPADDLE SETUP.PY
#
version = "%(version)s"
git_commit = "%(git_commit)s"
"""
    commit_id = git_commit()
    with open(filename, "w") as f:
        f.write(cnt % {
            "version" : "${PADDLE_VERSION}",
            "git_commit": commit_id})

write_version_py(filename="${PROJ_ROOT}/python/paddle/version.py")

packages=['paddle',
          'paddle.proto',
          'paddle.trainer',
          'paddle.trainer_config_helpers',
          'paddle.utils',
          'paddle.v2',
          'paddle.v2.dataset',
          'paddle.v2.reader',
          'paddle.v2.master',
          'paddle.v2.plot',
          'paddle.v2.framework',
          'paddle.v2.framework.proto']

setup_requires=["requests",
                "numpy",
                "protobuf==3.1",
                "recordio",
                "matplotlib",
                "rarfile",
                "scipy>=0.19.0",
                "Pillow",
                "nltk"]

if '${CMAKE_SYSTEM_PROCESSOR}' not in ['arm', 'armv7-a', 'aarch64']:
    setup_requires+=["opencv-python"]

setup(name='paddle',
      version='${PADDLE_VERSION}',
      description='Parallel Distributed Deep Learning',
      install_requires=setup_requires,
      packages=packages,
      package_data={'paddle.v2.master': ['libpaddle_master.so'],
            'paddle.v2.framework': ['core.so']
      },
      package_dir={
          '': '${CMAKE_CURRENT_SOURCE_DIR}',
          # The paddle.v2.framework.proto will be generated while compiling.
          # So that package points to other directory.
          'paddle.v2.framework.proto': '${PROJ_BINARY_ROOT}/paddle/framework'
      },
)
