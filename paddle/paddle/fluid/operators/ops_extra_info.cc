// This file is generated by paddle/fluid/operators/generator/ops_extra_info_gen.py
#include "paddle/fluid/operators/ops_extra_info.h"

#include "paddle/phi/backends/gpu/cuda/cudnn_workspace_helper.h"

namespace paddle {
namespace operators {

ExtraInfoUtils::ExtraInfoUtils() {
  g_extra_attrs_map_ = {
    {"abs", { {"use_mkldnn", bool{false}} }},
    {"abs_grad", { {"use_mkldnn", bool{false}} }},
    {"abs_double_grad", { {"use_mkldnn", bool{false}} }},
    {"abs_triple_grad", { {"use_mkldnn", bool{false}} }},
    {"acosh", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"acosh_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"elementwise_add", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"elementwise_add_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"elementwise_add_grad_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"elementwise_add_triple_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"sum", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"addmm", { {"use_mkldnn", bool{false}} }},
    {"addmm_grad", { {"use_mkldnn", bool{false}} }},
    {"affine_grid", { {"use_cudnn", bool{true}} }},
    {"affine_grid_grad", { {"use_cudnn", bool{true}} }},
    {"reduce_all", { {"use_mkldnn", bool{false}} }},
    {"reduce_amax", { {"use_mkldnn", bool{false}} }},
    {"reduce_amax_grad", { {"use_mkldnn", bool{false}} }},
    {"reduce_amin", { {"use_mkldnn", bool{false}} }},
    {"reduce_amin_grad", { {"use_mkldnn", bool{false}} }},
    {"angle", { {"use_mkldnn", bool{false}} }},
    {"angle_grad", { {"use_mkldnn", bool{false}} }},
    {"reduce_any", { {"use_mkldnn", bool{false}} }},
    {"asinh", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"asinh_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"atanh", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"atanh_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"batch_norm", { {"use_mkldnn", bool{false}}, {"fuse_with_relu", bool{false}} }},
    {"batch_norm_grad", { {"use_mkldnn", bool{false}}, {"fuse_with_relu", bool{false}} }},
    {"batch_norm_grad_grad", { {"use_mkldnn", bool{false}}, {"fuse_with_relu", bool{false}} }},
    {"bicubic_interp_v2", { {"use_mkldnn", bool{false}} }},
    {"bicubic_interp_v2_grad", { {"use_mkldnn", bool{false}} }},
    {"bilinear_interp_v2", { {"use_mkldnn", bool{false}} }},
    {"bilinear_interp_v2_grad", { {"use_mkldnn", bool{false}} }},
    {"cast", { {"use_mkldnn", bool{false}} }},
    {"ceil", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"ceil_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"clip", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"clip_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"clip_double_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"concat", { {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"concat_grad", { {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"concat_double_grad", { {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"conditional_block", { {"skip_eager_deletion_vars", std::vector<std::string>{}} }},
    {"conditional_block_grad", { {"skip_eager_deletion_vars", std::vector<std::string>{}} }},
    {"conv2d", { {"is_test", bool{false}}, {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"use_addto", bool{false}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB()}}, {"exhaustive_search", bool{false}} }},
    {"conv2d_grad", { {"is_test", bool{false}}, {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"use_addto", bool{false}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB()}}, {"exhaustive_search", bool{false}} }},
    {"conv2d_grad_grad", { {"is_test", bool{false}}, {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"use_addto", bool{false}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB()}}, {"exhaustive_search", bool{false}} }},
    {"conv2d_transpose", { {"is_test", bool{false}}, {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"force_fp32_output", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"workspace_size_MB", int{phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB()}} }},
    {"conv2d_transpose_grad", { {"is_test", bool{false}}, {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"force_fp32_output", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"workspace_size_MB", int{phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB()}} }},
    {"conv2d_transpose_grad_grad", { {"is_test", bool{false}}, {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"force_fp32_output", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"workspace_size_MB", int{phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB()}} }},
    {"conv2d_transpose_bias", { {"is_test", bool{false}}, {"use_cudnn", bool{false}}, {"use_mkldnn", bool{true}}, {"force_fp32_output", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}} }},
    {"conv3d", { {"is_test", bool{false}}, {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB()}}, {"exhaustive_search", bool{false}} }},
    {"conv3d_grad", { {"is_test", bool{false}}, {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB()}}, {"exhaustive_search", bool{false}} }},
    {"conv3d_grad_grad", { {"is_test", bool{false}}, {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB()}}, {"exhaustive_search", bool{false}} }},
    {"conv3d_transpose", { {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"workspace_size_MB", int{phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB()}} }},
    {"conv3d_transpose_grad", { {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"workspace_size_MB", int{phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB()}} }},
    {"cos", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"cos_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"cos_double_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"cos_triple_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"cosh", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"cosh_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"data_norm", { {"use_mkldnn", bool{false}} }},
    {"data_norm_grad", { {"use_mkldnn", bool{false}} }},
    {"depthwise_conv2d", { {"is_test", bool{false}}, {"use_cudnn", bool{false}}, {"fuse_relu_before_depthwise_conv", bool{false}}, {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"Scale_in", float{1.0f}}, {"Scale_out", float{1.0f}}, {"Scale_in_eltwise", float{1.0f}}, {"Scale_weights", std::vector<float>{1.0f}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB()}}, {"exhaustive_search", bool{false}} }},
    {"depthwise_conv2d_grad", { {"is_test", bool{false}}, {"use_cudnn", bool{false}}, {"fuse_relu_before_depthwise_conv", bool{false}}, {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"Scale_in", float{1.0f}}, {"Scale_out", float{1.0f}}, {"Scale_in_eltwise", float{1.0f}}, {"Scale_weights", std::vector<float>{1.0f}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB()}}, {"exhaustive_search", bool{false}} }},
    {"depthwise_conv2d_grad_grad", { {"is_test", bool{false}}, {"use_cudnn", bool{false}}, {"fuse_relu_before_depthwise_conv", bool{false}}, {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"Scale_in", float{1.0f}}, {"Scale_out", float{1.0f}}, {"Scale_in_eltwise", float{1.0f}}, {"Scale_weights", std::vector<float>{1.0f}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB()}}, {"exhaustive_search", bool{false}} }},
    {"depthwise_conv2d_transpose", { {"is_test", bool{false}}, {"use_cudnn", bool{false}}, {"use_mkldnn", bool{false}}, {"force_fp32_output", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"workspace_size_MB", int{phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB()}} }},
    {"depthwise_conv2d_transpose_grad", { {"is_test", bool{false}}, {"use_cudnn", bool{false}}, {"use_mkldnn", bool{false}}, {"force_fp32_output", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"workspace_size_MB", int{phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB()}} }},
    {"dequantize_linear", { {"moving_rate", float{0.9}} }},
    {"distributed_push_sparse", { {"slots", std::vector<int>{}} }},
    {"elementwise_div", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"elementwise_div_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"dropout", { {"fix_seed", bool{false}}, {"seed", int{0}} }},
    {"dropout_grad", { {"fix_seed", bool{false}}, {"seed", int{0}} }},
    {"dropout_nd", { {"fix_seed", bool{false}}, {"seed", int{0}} }},
    {"dropout_nd_grad", { {"fix_seed", bool{false}}, {"seed", int{0}} }},
    {"elementwise_pow", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"elementwise_pow_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"elu", { {"use_mkldnn", bool{false}} }},
    {"elu_grad", { {"use_mkldnn", bool{false}} }},
    {"elu_grad_grad", { {"use_mkldnn", bool{false}} }},
    {"lookup_table_v2", { {"is_sparse", bool{false}}, {"is_distributed", bool{false}}, {"remote_prefetch", bool{false}}, {"trainer_id", int{0}}, {"slot", int{0}}, {"height_sections", std::vector<int64_t>{}}, {"epmap", std::vector<std::string>{}}, {"table_names", std::vector<std::string>{}} }},
    {"lookup_table_v2_grad", { {"is_sparse", bool{false}}, {"is_distributed", bool{false}}, {"remote_prefetch", bool{false}}, {"trainer_id", int{0}}, {"slot", int{0}}, {"height_sections", std::vector<int64_t>{}}, {"epmap", std::vector<std::string>{}}, {"table_names", std::vector<std::string>{}} }},
    {"exp", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"exp_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"exp_double_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"expand_v2", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"expand_v2_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"expand_v2_double_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"expm1", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"expm1_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"fake_channel_wise_quantize_abs_max", { {"round_type", int{1}} }},
    {"fake_channel_wise_quantize_dequantize_abs_max", { {"round_type", int{1}} }},
    {"fake_quantize_abs_max", { {"round_type", int{1}} }},
    {"fake_quantize_dequantize_abs_max", { {"round_type", int{1}} }},
    {"fake_quantize_dequantize_moving_average_abs_max", { {"round_type", int{1}} }},
    {"fake_quantize_moving_average_abs_max", { {"round_type", int{1}} }},
    {"fake_quantize_range_abs_max", { {"round_type", int{1}} }},
    {"fc", { {"ALL_KERNELS_MUST_COMPUTE_RUNTIME_SHAPE", bool{true}}, {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"Scale_in", float{1.0f}}, {"Scale_weights", std::vector<float>{1.0f}}, {"Scale_out", float{1.0f}}, {"force_fp32_output", bool{false}} }},
    {"flatten_contiguous_range", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"flatten_contiguous_range_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"floor", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"floor_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"elementwise_floordiv", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"elementwise_fmax", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"elementwise_fmax_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"elementwise_fmin", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"elementwise_fmin_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"frobenius_norm", { {"use_mkldnn", bool{false}} }},
    {"frobenius_norm_grad", { {"use_mkldnn", bool{false}} }},
    {"fill_constant", { {"use_mkldnn", bool{false}} }},
    {"fused_conv2d", { {"use_cudnn", bool{false}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"Scale_in", float{1.0f}}, {"Scale_out", float{1.0f}}, {"Scale_in_eltwise", float{1.0f}}, {"Scale_weights", std::vector<float>{1.0f}}, {"use_mkldnn", bool{true}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"fused_conv2d_add_act", { {"is_test", bool{false}}, {"use_cudnn", bool{true}}, {"fuse_relu_before_depthwise_conv", bool{false}}, {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"Scale_in", float{1.0f}}, {"Scale_out", float{1.0f}}, {"Scale_in_eltwise", float{1.0f}}, {"Scale_weights", std::vector<float>{1.0f}}, {"force_fp32_output", bool{false}} }},
    {"fused_conv3d", { {"use_cudnn", bool{false}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"Scale_in", float{1.0f}}, {"Scale_out", float{1.0f}}, {"Scale_in_eltwise", float{1.0f}}, {"Scale_weights", std::vector<float>{1.0f}}, {"use_mkldnn", bool{true}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"fused_transpose", { {"data_format", std::string{"AnyLayout"}} }},
    {"fusion_gru", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"Scale_data", float{1.0f}}, {"Shift_data", float{0.0f}}, {"Scale_weights", std::vector<float>{1.0f}} }},
    {"fusion_lstm", { {"use_mkldnn", bool{true}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"gaussian_random", { {"use_mkldnn", bool{false}} }},
    {"gelu", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"gelu_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"grad_add", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"grid_sampler", { {"use_cudnn", bool{true}} }},
    {"grid_sampler_grad", { {"use_cudnn", bool{true}} }},
    {"gru", { {"is_test", bool{false}} }},
    {"gru_grad", { {"is_test", bool{false}} }},
    {"hard_swish", { {"use_mkldnn", bool{false}} }},
    {"hard_swish_grad", { {"use_mkldnn", bool{false}} }},
    {"elementwise_heaviside", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"elementwise_heaviside_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"layer_norm", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"is_test", bool{false}} }},
    {"layer_norm_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"is_test", bool{false}} }},
    {"leaky_relu", { {"use_mkldnn", bool{false}} }},
    {"leaky_relu_grad", { {"use_mkldnn", bool{false}} }},
    {"leaky_relu_grad_grad", { {"use_mkldnn", bool{false}} }},
    {"linear_interp_v2", { {"use_mkldnn", bool{false}} }},
    {"linear_interp_v2_grad", { {"use_mkldnn", bool{false}} }},
    {"log", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"log_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"log_grad_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"log10", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"log10_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"log1p", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"log1p_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"log2", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"log2_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"log_softmax", { {"use_mkldnn", bool{false}} }},
    {"log_softmax_grad", { {"use_mkldnn", bool{false}} }},
    {"logsigmoid", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"logsigmoid_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"lrn", { {"use_mkldnn", bool{false}}, {"is_test", bool{false}} }},
    {"lrn_grad", { {"use_mkldnn", bool{false}}, {"is_test", bool{false}} }},
    {"matmul_v2", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"matmul_v2_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"matmul_v2_grad_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"matmul_v2_triple_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"mul", { {"use_mkldnn", bool{false}}, {"scale_x", float{1.0f}}, {"scale_y", std::vector<float>{1.0f}}, {"scale_out", float{1.0f}}, {"force_fp32_output", bool{false}} }},
    {"mul_grad", { {"use_mkldnn", bool{false}}, {"scale_x", float{1.0f}}, {"scale_y", std::vector<float>{1.0f}}, {"scale_out", float{1.0f}}, {"force_fp32_output", bool{false}} }},
    {"reduce_max", { {"use_mkldnn", bool{false}} }},
    {"reduce_max_grad", { {"use_mkldnn", bool{false}} }},
    {"elementwise_max", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"elementwise_max_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"reduce_mean", { {"use_mkldnn", bool{false}} }},
    {"reduce_mean_grad", { {"use_mkldnn", bool{false}} }},
    {"reduce_min", { {"use_mkldnn", bool{false}} }},
    {"reduce_min_grad", { {"use_mkldnn", bool{false}} }},
    {"elementwise_min", { {"use_mkldnn", bool{false}}, {"x_data_format", std::string{""}}, {"y_data_format", std::string{""}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"elementwise_min_grad", { {"use_mkldnn", bool{false}}, {"x_data_format", std::string{""}}, {"y_data_format", std::string{""}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"mish", { {"use_mkldnn", bool{false}} }},
    {"mish_grad", { {"use_mkldnn", bool{false}} }},
    {"elementwise_mul", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"elementwise_mul_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"nce", { {"trainer_id", int{0}}, {"height_sections", std::vector<int64_t>{}}, {"epmap", std::vector<std::string>{}}, {"table_names", std::vector<std::string>{}}, {"custom_neg_classes", std::vector<int>{}} }},
    {"nce_grad", { {"trainer_id", int{0}}, {"height_sections", std::vector<int64_t>{}}, {"epmap", std::vector<std::string>{}}, {"table_names", std::vector<std::string>{}}, {"custom_neg_classes", std::vector<int>{}} }},
    {"nearest_interp_v2", { {"use_mkldnn", bool{false}} }},
    {"nearest_interp_v2_grad", { {"use_mkldnn", bool{false}} }},
    {"pad2d", { {"use_mkldnn", bool{false}} }},
    {"pad2d_grad", { {"use_mkldnn", bool{false}} }},
    {"pad3d", { {"use_mkldnn", bool{false}} }},
    {"pad3d_grad", { {"use_mkldnn", bool{false}} }},
    {"pad3d_double_grad", { {"use_mkldnn", bool{false}} }},
    {"partial_concat", { {"use_mkldnn", bool{false}} }},
    {"partial_concat_grad", { {"use_mkldnn", bool{false}} }},
    {"partial_sum", { {"use_mkldnn", bool{false}} }},
    {"partial_sum_grad", { {"use_mkldnn", bool{false}} }},
    {"pool2d", { {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"is_test", bool{false}} }},
    {"pool2d_grad", { {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"is_test", bool{false}} }},
    {"pool2d_double_grad", { {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"is_test", bool{false}} }},
    {"pool3d", { {"use_mkldnn", bool{false}} }},
    {"pool3d_grad", { {"use_mkldnn", bool{false}} }},
    {"prelu", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"is_test", bool{false}} }},
    {"prelu_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"is_test", bool{false}} }},
    {"prior_box", { {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"reduce_prod", { {"use_mkldnn", bool{false}} }},
    {"reduce_prod_grad", { {"use_mkldnn", bool{false}} }},
    {"push_sparse_v2", { {"embeddingdim", int{11}}, {"tableid", int{0}}, {"accessorclass", std::string{""}}, {"ctrlabelname", std::string{""}}, {"paddingid", int{0}}, {"scalesparsegrad", bool{true}}, {"inputnames", std::vector<std::string>{}}, {"is_distributed", bool{true}} }},
    {"pylayer", { {"skip_eager_deletion_vars", std::vector<std::string>{}} }},
    {"pylayer_grad", { {"skip_eager_deletion_vars", std::vector<std::string>{}} }},
    {"quantize_linear", { {"moving_rate", float{0.9}} }},
    {"randperm", { {"seed", int{0}} }},
    {"reciprocal", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"reciprocal_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"relu", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"relu_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"relu_grad_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"relu6", { {"use_mkldnn", bool{false}}, {"threshold", float{6.0}} }},
    {"relu6_grad", { {"use_mkldnn", bool{false}}, {"threshold", float{6.0}} }},
    {"elementwise_mod", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"renorm", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"renorm_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"reshape2", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}} }},
    {"reshape2_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}} }},
    {"round", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"round_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"rsqrt", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"rsqrt_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"rsqrt_grad_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"scale", { {"use_mkldnn", bool{false}} }},
    {"scale_grad", { {"use_mkldnn", bool{false}} }},
    {"seed", { {"deterministic", bool{false}}, {"rng_name", std::string{""}}, {"force_cpu", bool{false}} }},
    {"sequence_softmax", { {"data_format", std::string{"AnyLayout"}} }},
    {"sequence_softmax_grad", { {"data_format", std::string{"AnyLayout"}} }},
    {"sgd", { {"use_mkldnn", bool{false}} }},
    {"shape", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"shuffle_channel", { {"use_mkldnn", bool{false}} }},
    {"shuffle_channel_grad", { {"use_mkldnn", bool{false}} }},
    {"sigmoid", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"sigmoid_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"sigmoid_grad_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"sigmoid_triple_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"silu", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"silu_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"silu_double_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"sin", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"sin_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"sin_double_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"sin_triple_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"sinh", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"sinh_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"slice", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"slice_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"softmax", { {"data_format", std::string{"AnyLayout"}}, {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"is_test", bool{false}} }},
    {"softmax_grad", { {"data_format", std::string{"AnyLayout"}}, {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"is_test", bool{false}} }},
    {"softplus", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"softplus_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"softplus_double_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"softsign", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"softsign_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"split", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"split_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"sqrt", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"sqrt_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"sqrt_grad_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"square", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"square_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"square_grad_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"squeeze2", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"squeeze2_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"squeeze2_double_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"stack", { {"use_mkldnn", bool{false}} }},
    {"stack_grad", { {"use_mkldnn", bool{false}} }},
    {"stack_double_grad", { {"use_mkldnn", bool{false}} }},
    {"elementwise_sub", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"elementwise_sub_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_quantizer", bool{false}}, {"Scale_x", float{1.0f}}, {"Scale_y", float{1.0f}}, {"Scale_out", float{1.0f}} }},
    {"reduce_sum", { {"use_mkldnn", bool{false}} }},
    {"reduce_sum_grad", { {"use_mkldnn", bool{false}} }},
    {"sum_double_grad", { {"use_mkldnn", bool{false}} }},
    {"swish", { {"use_mkldnn", bool{false}}, {"beta", float{1.0}} }},
    {"swish_grad", { {"use_mkldnn", bool{false}}, {"beta", float{1.0}} }},
    {"sync_batch_norm", { {"use_mkldnn", bool{false}}, {"fuse_with_relu", bool{false}} }},
    {"sync_batch_norm_grad", { {"use_mkldnn", bool{false}}, {"fuse_with_relu", bool{false}} }},
    {"tan", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"tan_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"tanh", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"tanh_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"tanh_grad_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"tanh_triple_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"tanh_shrink", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"tanh_shrink_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"transpose2", { {"use_mkldnn", bool{false}}, {"data_format", std::string{"AnyLayout"}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"transpose2_grad", { {"use_mkldnn", bool{false}}, {"data_format", std::string{"AnyLayout"}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"trilinear_interp_v2", { {"use_mkldnn", bool{false}} }},
    {"trilinear_interp_v2_grad", { {"use_mkldnn", bool{false}} }},
    {"while", { {"skip_eager_deletion_vars", std::vector<std::string>{}} }},
    {"while_grad", { {"skip_eager_deletion_vars", std::vector<std::string>{}} }}
  };

  g_extra_attrs_checker_ = {
    {"abs", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"abs_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"abs_double_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"abs_triple_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"acosh", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"acosh_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"elementwise_add", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"elementwise_add_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"elementwise_add_grad_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"elementwise_add_triple_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"sum", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"addmm", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"addmm_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"affine_grid", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);} }},
    {"affine_grid_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);} }},
    {"reduce_all", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"reduce_amax", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"reduce_amax_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"reduce_amin", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"reduce_amin_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"angle", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"angle_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"reduce_any", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"asinh", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"asinh_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"atanh", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"atanh_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"batch_norm", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_with_relu", false)(attr_map, only_check_exist_value);} }},
    {"batch_norm_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_with_relu", false)(attr_map, only_check_exist_value);} }},
    {"batch_norm_grad_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_with_relu", false)(attr_map, only_check_exist_value);} }},
    {"bicubic_interp_v2", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"bicubic_interp_v2_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"bilinear_interp_v2", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"bilinear_interp_v2_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"cast", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"ceil", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"ceil_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"clip", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"clip_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"clip_double_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"concat", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"concat_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"concat_double_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"conditional_block", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<std::string>>("skip_eager_deletion_vars", {})(attr_map, only_check_exist_value);} }},
    {"conditional_block_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<std::string>>("skip_eager_deletion_vars", {})(attr_map, only_check_exist_value);} }},
    {"conv2d", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"conv2d_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"conv2d_grad_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"conv2d_transpose", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);} }},
    {"conv2d_transpose_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);} }},
    {"conv2d_transpose_grad_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);} }},
    {"conv2d_transpose_bias", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);} }},
    {"conv3d", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"conv3d_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"conv3d_grad_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"conv3d_transpose", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);} }},
    {"conv3d_transpose_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);} }},
    {"cos", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"cos_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"cos_double_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"cos_triple_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"cosh", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"cosh_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"data_norm", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"data_norm_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"depthwise_conv2d", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu_before_depthwise_conv", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in_eltwise", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("Scale_weights", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"depthwise_conv2d_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu_before_depthwise_conv", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in_eltwise", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("Scale_weights", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"depthwise_conv2d_grad_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu_before_depthwise_conv", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in_eltwise", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("Scale_weights", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"depthwise_conv2d_transpose", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);} }},
    {"depthwise_conv2d_transpose_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", phi::backends::gpu::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);} }},
    {"dequantize_linear", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("moving_rate", 0.9)(attr_map, only_check_exist_value);} }},
    {"distributed_push_sparse", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<int>>("slots", {})(attr_map, only_check_exist_value);} }},
    {"elementwise_div", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"elementwise_div_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"dropout", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fix_seed", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("seed", 0)(attr_map, only_check_exist_value);} }},
    {"dropout_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fix_seed", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("seed", 0)(attr_map, only_check_exist_value);} }},
    {"dropout_nd", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fix_seed", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("seed", 0)(attr_map, only_check_exist_value);} }},
    {"dropout_nd_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fix_seed", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("seed", 0)(attr_map, only_check_exist_value);} }},
    {"elementwise_pow", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"elementwise_pow_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"elu", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"elu_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"elu_grad_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"lookup_table_v2", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_sparse", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_distributed", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("remote_prefetch", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("trainer_id", 0)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("slot", 0)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<int64_t>>("height_sections", {})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<std::string>>("epmap", {})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<std::string>>("table_names", {})(attr_map, only_check_exist_value);} }},
    {"lookup_table_v2_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_sparse", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_distributed", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("remote_prefetch", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("trainer_id", 0)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("slot", 0)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<int64_t>>("height_sections", {})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<std::string>>("epmap", {})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<std::string>>("table_names", {})(attr_map, only_check_exist_value);} }},
    {"exp", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"exp_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"exp_double_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"expand_v2", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"expand_v2_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"expand_v2_double_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"expm1", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"expm1_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"fake_channel_wise_quantize_abs_max", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("round_type", 1)(attr_map, only_check_exist_value);} }},
    {"fake_channel_wise_quantize_dequantize_abs_max", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("round_type", 1)(attr_map, only_check_exist_value);} }},
    {"fake_quantize_abs_max", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("round_type", 1)(attr_map, only_check_exist_value);} }},
    {"fake_quantize_dequantize_abs_max", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("round_type", 1)(attr_map, only_check_exist_value);} }},
    {"fake_quantize_dequantize_moving_average_abs_max", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("round_type", 1)(attr_map, only_check_exist_value);} }},
    {"fake_quantize_moving_average_abs_max", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("round_type", 1)(attr_map, only_check_exist_value);} }},
    {"fake_quantize_range_abs_max", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("round_type", 1)(attr_map, only_check_exist_value);} }},
    {"fc", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("ALL_KERNELS_MUST_COMPUTE_RUNTIME_SHAPE", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("Scale_weights", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);} }},
    {"flatten_contiguous_range", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"flatten_contiguous_range_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"floor", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"floor_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"elementwise_floordiv", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"elementwise_fmax", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"elementwise_fmax_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"elementwise_fmin", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"elementwise_fmin_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"frobenius_norm", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"frobenius_norm_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"fill_constant", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"fused_conv2d", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in_eltwise", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("Scale_weights", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"fused_conv2d_add_act", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu_before_depthwise_conv", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in_eltwise", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("Scale_weights", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);} }},
    {"fused_conv3d", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in_eltwise", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("Scale_weights", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"fused_transpose", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("data_format", "AnyLayout")(attr_map, only_check_exist_value);} }},
    {"fusion_gru", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_data", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Shift_data", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("Scale_weights", {1.0f})(attr_map, only_check_exist_value);} }},
    {"fusion_lstm", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"gaussian_random", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"gelu", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"gelu_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"grad_add", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"grid_sampler", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);} }},
    {"grid_sampler_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);} }},
    {"gru", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"gru_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"hard_swish", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"hard_swish_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"elementwise_heaviside", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"elementwise_heaviside_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"layer_norm", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"layer_norm_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"leaky_relu", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"leaky_relu_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"leaky_relu_grad_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"linear_interp_v2", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"linear_interp_v2_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"log", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"log_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"log_grad_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"log10", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"log10_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"log1p", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"log1p_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"log2", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"log2_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"log_softmax", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"log_softmax_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"logsigmoid", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"logsigmoid_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"lrn", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"lrn_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"matmul_v2", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"matmul_v2_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"matmul_v2_grad_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"matmul_v2_triple_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"mul", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("scale_y", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);} }},
    {"mul_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("scale_y", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);} }},
    {"reduce_max", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"reduce_max_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"elementwise_max", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"elementwise_max_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"reduce_mean", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"reduce_mean_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"reduce_min", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"reduce_min_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"elementwise_min", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("x_data_format", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("y_data_format", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"elementwise_min_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("x_data_format", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("y_data_format", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"mish", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"mish_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"elementwise_mul", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"elementwise_mul_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"nce", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("trainer_id", 0)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<int64_t>>("height_sections", {})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<std::string>>("epmap", {})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<std::string>>("table_names", {})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<int>>("custom_neg_classes", {})(attr_map, only_check_exist_value);} }},
    {"nce_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("trainer_id", 0)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<int64_t>>("height_sections", {})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<std::string>>("epmap", {})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<std::string>>("table_names", {})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<int>>("custom_neg_classes", {})(attr_map, only_check_exist_value);} }},
    {"nearest_interp_v2", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"nearest_interp_v2_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"pad2d", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"pad2d_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"pad3d", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"pad3d_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"pad3d_double_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"partial_concat", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"partial_concat_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"partial_sum", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"partial_sum_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"pool2d", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"pool2d_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"pool2d_double_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"pool3d", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"pool3d_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"prelu", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"prelu_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"prior_box", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"reduce_prod", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"reduce_prod_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"push_sparse_v2", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("embeddingdim", 11)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("tableid", 0)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("accessorclass", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("ctrlabelname", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("paddingid", 0)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("scalesparsegrad", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<std::string>>("inputnames", {})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_distributed", true)(attr_map, only_check_exist_value);} }},
    {"pylayer", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<std::string>>("skip_eager_deletion_vars", {})(attr_map, only_check_exist_value);} }},
    {"pylayer_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<std::string>>("skip_eager_deletion_vars", {})(attr_map, only_check_exist_value);} }},
    {"quantize_linear", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("moving_rate", 0.9)(attr_map, only_check_exist_value);} }},
    {"randperm", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("seed", 0)(attr_map, only_check_exist_value);} }},
    {"reciprocal", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"reciprocal_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"relu", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"relu_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"relu_grad_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"relu6", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("threshold", 6.0)(attr_map, only_check_exist_value);} }},
    {"relu6_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("threshold", 6.0)(attr_map, only_check_exist_value);} }},
    {"elementwise_mod", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"renorm", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"renorm_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"reshape2", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);} }},
    {"reshape2_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);} }},
    {"round", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"round_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"rsqrt", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"rsqrt_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"rsqrt_grad_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"scale", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"scale_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"seed", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("deterministic", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("rng_name", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_cpu", false)(attr_map, only_check_exist_value);} }},
    {"sequence_softmax", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("data_format", "AnyLayout")(attr_map, only_check_exist_value);} }},
    {"sequence_softmax_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("data_format", "AnyLayout")(attr_map, only_check_exist_value);} }},
    {"sgd", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"shape", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"shuffle_channel", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"shuffle_channel_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"sigmoid", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"sigmoid_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"sigmoid_grad_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"sigmoid_triple_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"silu", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"silu_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"silu_double_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"sin", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"sin_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"sin_double_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"sin_triple_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"sinh", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"sinh_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"slice", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"slice_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"softmax", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("data_format", "AnyLayout")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"softmax_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("data_format", "AnyLayout")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"softplus", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"softplus_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"softplus_double_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"softsign", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"softsign_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"split", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"split_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"sqrt", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"sqrt_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"sqrt_grad_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"square", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"square_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"square_grad_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"squeeze2", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"squeeze2_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"squeeze2_double_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"stack", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"stack_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"stack_double_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"elementwise_sub", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"elementwise_sub_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_x", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_y", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);} }},
    {"reduce_sum", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"reduce_sum_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"sum_double_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"swish", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("beta", 1.0)(attr_map, only_check_exist_value);} }},
    {"swish_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("beta", 1.0)(attr_map, only_check_exist_value);} }},
    {"sync_batch_norm", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_with_relu", false)(attr_map, only_check_exist_value);} }},
    {"sync_batch_norm_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_with_relu", false)(attr_map, only_check_exist_value);} }},
    {"tan", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"tan_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"tanh", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"tanh_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"tanh_grad_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"tanh_triple_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"tanh_shrink", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"tanh_shrink_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"transpose2", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("data_format", "AnyLayout")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"transpose2_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("data_format", "AnyLayout")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"trilinear_interp_v2", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"trilinear_interp_v2_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"while", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<std::string>>("skip_eager_deletion_vars", {})(attr_map, only_check_exist_value);} }},
    {"while_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<std::string>>("skip_eager_deletion_vars", {})(attr_map, only_check_exist_value);} }}
  };
}

}  // namespace operators
}  // namespace paddle
