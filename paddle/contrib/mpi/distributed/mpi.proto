// Copyright (c) 2018 PaddlePaddle Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package mpis;

service MPIService {
  rpc SendVariable(RequestContext) returns (ReplyContext) {}
  rpc GetVariable(RequestContext) returns (ReplyContext) {}
  rpc PrefetchVariable(RequestContext) returns (ReplyContext) {}
  rpc CheckpointNotify(RequestContext) returns (ReplyContext) {}
}

// The request message containing soruce var details.
message RequestContext {
  // Rank of source (integer).
  int32 src = 1;
  string var_name = 2;
  // Number of elements in receive buffer (integer).
  int32 length = 3;
  // Message tag (integer).
  int32 tag = 4;
}

// The response message containing the destination id
message ReplyContext {
  // Rank of destination (integer).
  int32 dst = 1;
}
