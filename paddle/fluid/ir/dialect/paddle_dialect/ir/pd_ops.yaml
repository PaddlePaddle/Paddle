- name : set_value
  inputs:
    - {typename: Tensor, name: x, optional: false, no_need_buffer: false, data_transform: {} }
  attrs:
    - {typename: 'int64_t[]', name: starts}
    - {typename: 'int64_t[]', name: ends}
    - {typename: 'int64_t[]', name: steps}
    - {typename: 'int64_t[]', name: axes}
    - {typename: 'int64_t[]', name: decrease_axes}
    - {typename: 'int64_t[]', name: none_axes}
    - {typename: 'int64_t[]', name: shape}
    - {typename: 'Scalar[]', name: values}
  outputs:
    - {typename: Tensor, name: out, optional: false, intermediate: false}
  infer_meta:
    func: SetValueInferMeta
    param: [x]
  kernel:
    func: [set_value]
    param: [x, starts, ends, steps, axes, decrease_axes, none_axes, shape, values]
  inplace: {out: x}
  backward: set_value_grad

- name : set_value_grad
  inputs:
    - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false, data_transform: {} }
    - {typename: Tensor, name: values, optional: false, no_need_buffer: false, data_transform: {} }
  attrs:
    - {typename: 'int64_t[]', name: starts}
    - {typename: 'int64_t[]', name: ends}
    - {typename: 'int64_t[]', name: steps}
    - {typename: 'int64_t[]', name: axes}
    - {typename: 'int64_t[]', name: decrease_axes}
    - {typename: 'int64_t[]', name: none_axes}
  outputs:
    - {typename: Tensor, name: x_grad, optional: false, intermediate: false}
    - {typename: Tensor, name: values_grad, optional: false, intermediate: false}
  infer_meta:
    func: SetValueGradInferMeta
    param: [out_grad, values]
  kernel:
    func: [set_value_grad]
    param: [out_grad, starts, ends, steps, axes, decrease_axes, none_axes]
  inplace: null
  backward: null

- name : set_value_with_tensor
  inputs:
    - {typename: Tensor, name: x, optional: false, no_need_buffer: false, data_transform: {} }
    - {typename: Tensor, name: values, optional: false, no_need_buffer: false, data_transform: {} }
  attrs:
    - {typename: 'int64_t[]', name: starts}
    - {typename: 'int64_t[]', name: ends}
    - {typename: 'int64_t[]', name: steps}
    - {typename: 'int64_t[]', name: axes}
    - {typename: 'int64_t[]', name: decrease_axes}
    - {typename: 'int64_t[]', name: none_axes}
  outputs:
    - {typename: Tensor, name: out, optional: false, intermediate: false}
  infer_meta:
    func: SetValueInferMeta
    param: [x]
  kernel:
    func: [set_value_with_tensor]
    param: [x, values, starts, ends, steps, axes, decrease_axes, none_axes]
  inplace: {out: x}
  backward: set_value_grad

- name: shadow_feed
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
    - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: shadow_feed
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {fetch: null}
    force_backend: null
  inplace: null
  backward: null

- op : add_n_
  args : (Tensor[] inputs)
  output : Tensor(out)
  infer_meta:
    func: AddNInferMeta
    param: [inputs]
  kernel:
    func: add_n
    param: [inputs]
  backward: add_n_grad

- op : add_n_with_kernel
  args : (Tensor[] inputs)
  output : Tensor(out)
  infer_meta:
    func: AddNInferMeta
    param: [inputs]
  kernel:
    func: add_n
    param: [inputs]
  backward: add_n_grad

- op : assert
  args : (Tensor cond, Tensor[] data, int64_t summarize = -1)
  output :
  kernel :
    func : assert
    param : [cond, data, summarize]
    data_type : cond

- op : assign_value
  args : (int[] shape, DataType dtype, Scalar[] values, Place place = {})
  output : Tensor(out)
  infer_meta :
    func : AssignValueInferMeta
    param: [shape, dtype]
  kernel :
    func : assign_value
    param : [shape, dtype, values]
    backend: place>
    data_type : dtype

- op : embedding_grad_sparse
  args : (Tensor x, Tensor weight, Tensor out_grad, int64_t padding_idx = -1, bool sparse = false)
  output : SelectedRows(weight_grad)
  infer_meta:
    func: EmbeddingGradSparseInferMeta
    param: [weight]
  kernel:
    func: embedding_sparse_grad
    param: [x, weight, out_grad, padding_idx, sparse]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [weight]
      to_complex_flag: [false]
    dispatch: {embedding_sparse_grad: null}
    force_backend: null
  inplace: null
  view: null
  backward: null

- op : feed
  args : (str name, int col)
  output : Tensor(out)

- op : fetch
  args : (Tensor x, str name, int col)
  output : Tensor(out)
  infer_meta :
    func : UnchangedInferMeta
    param : [x]
  kernel :
    func : fetch
    param : [x]

- op : load_combine
  args : (str file_path, bool load_as_fp16, bool model_from_memory)
  output : Tensor[](Out)
  kernel:
    func: load_combine
    param: [file_path, load_as_fp16, model_from_memory]
  optional : Out

- op : lod_array_length
  args : (Tensor[] x)
  output : Tensor(out)

- op : print
  args : (Tensor in, int first_n, str message, int summarize, bool print_tensor_name = true, bool print_tensor_shape = true, bool print_tensor_layout = true, bool print_tensor_lod = true, str print_phase = "BOTH", bool is_forward = true)
  output : Tensor(out)
  infer_meta:
    func: UnchangedInferMeta
    param: [in]
  kernel :
    func : print_kernel
    param: [in, first_n, message, summarize, print_tensor_name, print_tensor_type, print_tensor_shape, print_tensor_layout, print_tensor_lod, print_phase, is_forward]

- op : save_combine
  args : (Tensor[] x, str file_path, bool overwrite, bool save_as_fp16, bool save_to_memory)
  output : Tensor(out)
  kernel:
    func: save_combine_tensor
    param: [X, file_path, overwrite, save_as_fp16, save_to_memory]
  optional : out

- op : share_buffer_
  args : (Tensor[] x, bool[] share_dims_and_dtype = {})
  output : Tensor[](out){x.size()}, Tensor[](xout){x.size()}

- op : write_to_array
  args : (Tensor i, Tensor x)
  output : Tensor[](out)
  backward: write_to_array_grad
