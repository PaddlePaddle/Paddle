--- paddle/fluid/lite/arm/math/conv_direct.h
+++ paddle/fluid/lite/arm/math/conv_direct.h
@@ -17,6 +17,7 @@
 #include <cmath>
 #include "paddle/fluid/lite/arm/math/conv_impl.h"
 #include "paddle/fluid/lite/core/context.h"
+#include "paddle/fluid/lite/core/target_wrapper.h"
 
 namespace paddle {
 namespace lite {
@@ -24,26 +25,26 @@ namespace arm {
 namespace math {
 
 template <PrecisionType Ptype>
-class DirectConv : public ImplBase<kARM, Ptype, operators::ConvParam> {
+class DirectConv : public ImplBase<TARGET(kARM), Ptype, operators::ConvParam> {
  public:
   typedef void (*conv_direct_impl)(const float* din, float* dout, int num,
                                    int chout, int hout, int wout, int chin,
                                    int hin, int win, const float* weights,
                                    const float* bias,
                                    const operators::ConvParam& param,
-                                   Context<kARM>* ctx);
+                                   Context<TARGET(kARM)>* ctx);
 
   typedef void (*conv_direct_int8_impl)(
       const int8_t* din, int32_t* dout, int num, int chout, int hout, int wout,
       int chin, int hin, int win, const int8_t* weights, const int32_t* bias,
-      const operators::ConvParam& param, Context<kARM>* ctx, Ptype out_type,
+      const operators::ConvParam& param, Context<TARGET(kARM)>* ctx, Ptype out_type,
       const float* scale);
   DirectConv() = default;
   ~DirectConv() {}
 
-  virtual bool init(const operators::ConvParam& param, Context<kARM>* ctx);
+  virtual bool init(const operators::ConvParam& param, Context<TARGET(kARM)>* ctx);
 
-  virtual bool create(const operators::ConvParam& param, Context<kARM>* ctx);
+  virtual bool create(const operators::ConvParam& param, Context<TARGET(kARM)>* ctx);
 
   virtual bool run(const operators::ConvParam& param);
 
