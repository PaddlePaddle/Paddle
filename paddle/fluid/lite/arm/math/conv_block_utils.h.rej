--- paddle/fluid/lite/arm/math/conv_block_utils.h
+++ paddle/fluid/lite/arm/math/conv_block_utils.h
@@ -44,7 +44,7 @@ static bool conv_trans_weights_numc(const dtype* din, dtype* dout, int chout,
                                     int chin, int n, int kernel_size) {
   if (n <= 0) {
     LOG(ERROR) << "ch_n and hei_n are more than zero";
-    return SaberInvalidValue;
+    return false;
   }
   int c_loop = chout / n;
   int chout_round = (chout + n - 1) / n;
@@ -87,7 +87,7 @@ static bool conv_trans_weights_numc(const dtype* din, dtype* dout, int chout,
       }
     }
   }
-  return SaberSuccess;
+  return true;
 }
 /*preprocessing inputs
 * input din: [1, chin, he-hs, we - ws] --> outputs dout: [n, chin, 1, we - ws]
@@ -100,7 +100,7 @@ static bool prepack_input_nxw(const dtype* din, dtype* dout, int cs, int ce,
   int n = he - hs;
   if (n <= 0) {
     LOG(ERROR) << "hei_n is more than zero";
-    return SaberInvalidValue;
+    return false;
   }
   int w0 = ws < 0 ? 0 : ws;
   int w1 = we > width ? width : we;
@@ -142,7 +142,7 @@ static bool prepack_input_nxw(const dtype* din, dtype* dout, int cs, int ce,
     }
     din += size_c;
   }
-  return SaberSuccess;
+  return true;
 }
 
 /*wirte result in outputs
@@ -153,7 +153,7 @@ inline bool write_to_output_c1_fp32(const float* din, float* dout, int cs,
                                     int channel, int height, int width,
                                     bool flag_relu, float* trash_ptr) {
   if (cs > channel) {
-    return SaberSuccess;
+    return true;
   }
 
   const int c1 = 1;
@@ -265,7 +265,7 @@ inline bool write_to_output_c1_fp32(const float* din, float* dout, int cs,
       }
     }
   }
-  return SaberSuccess;
+  return true;
 }
 
 /*wirte result in outputs
@@ -276,7 +276,7 @@ inline bool write_to_output_c2_fp32(const float* din, float* dout, int cs,
                                     int channel, int height, int width,
                                     bool flag_relu, float* trash_ptr) {
   if (cs > channel) {
-    return SaberSuccess;
+    return true;
   }
 
   const int c2 = 2;
@@ -447,7 +447,7 @@ inline bool write_to_output_c2_fp32(const float* din, float* dout, int cs,
       }
     }
   }
-  return SaberSuccess;
+  return true;
 }
 
 /*wirte result in outputs
@@ -464,7 +464,7 @@ inline bool write_to_output_c4_fp32(const float* din, float* dout, int cs,
   if (ch_n != 4) {
     LOG(ERROR) << "write_to_output_c4_fp32 ch_n must be equal 4 and hei_n is "
                   "more than zero";
-    return SaberInvalidValue;
+    return false;
   }
   int size_c_out = width * height;
 
@@ -658,7 +658,7 @@ inline bool write_to_output_c4_fp32(const float* din, float* dout, int cs,
       }
     }
   }
-  return SaberSuccess;
+  return true;
 }
 
 /*wirte result in outputs
@@ -671,7 +671,7 @@ inline bool write_to_output_c8_fp32(const float* din, float* dout, int ch_n,
                                     float* trash_ptr) {
   if (ch_n != 8 || hei_n <= 0) {
     LOG(ERROR) << "ch_n must be equal 8 and hei_n is more than zero";
-    return SaberInvalidValue;
+    return false;
   }
   int size_c_out = width * height;
 
@@ -1034,7 +1034,7 @@ inline bool write_to_output_c8_fp32(const float* din, float* dout, int ch_n,
       }
     }
   }
-  return SaberSuccess;
+  return true;
 }
 
 /*wirte result in outputs
@@ -1047,7 +1047,7 @@ inline bool write_to_output_c4_int32(const int* din, int* dout, int ch_n,
                                      int* trash_ptr) {
   if (ch_n != 4 || hei_n <= 0) {
     LOG(ERROR) << "ch_n must be equal 4 and hei_n is more than zero";
-    return SaberInvalidValue;
+    return false;
   }
   int size_c_out = width * height;
 
@@ -1272,7 +1272,7 @@ inline bool write_to_output_c4_int32(const int* din, int* dout, int ch_n,
       }
     }
   }
-  return SaberSuccess;
+  return true;
 }
 
 /*wirte result in outputs --int8, fp32
@@ -1287,7 +1287,7 @@ inline bool write_to_output_c4_int32_1(const int* din, dtype* dout, int ch_n,
                                        DataType out_dtype) {
   if (ch_n != 4 || hei_n <= 0) {
     LOG(ERROR) << "ch_n must be equal 4 and hei_n is more than zero";
-    return SaberInvalidValue;
+    return false;
   }
   int size_c_out = width * height;
 
@@ -1950,9 +1950,9 @@ inline bool write_to_output_c4_int32_1(const int* din, dtype* dout, int ch_n,
     }
   } else {
     LOG(ERROR) << "ERROR: unsupported input data type!!";
-    return SaberInvalidValue;
+    return false;
   }
-  return SaberSuccess;
+  return true;
 }
 
 /*wirte result in outputs
@@ -1965,7 +1965,7 @@ inline bool write_to_output_c8_int32(const int* din, int* dout, int ch_n,
                                      int* trash_ptr) {
   if (ch_n != 8 || hei_n <= 0) {
     LOG(ERROR) << "ch_n must be equal 8 and hei_n is more than zero";
-    return SaberInvalidValue;
+    return false;
   }
   int size_c_out = width * height;
 
@@ -2313,7 +2313,7 @@ inline bool write_to_output_c8_int32(const int* din, int* dout, int ch_n,
       }
     }
   }
-  return SaberSuccess;
+  return true;
 }
 
 /*wirte result in outputs--int8, fp32
@@ -2328,7 +2328,7 @@ static bool write_to_output_c8_int32_1(const int* din, dtype* dout, int ch_n,
                                        DataType out_dtype) {
   if (ch_n != 8 || hei_n <= 0) {
     LOG(ERROR) << "ch_n must be equal 8 and hei_n is more than zero";
-    return SaberInvalidValue;
+    return false;
   }
   int size_c_out = width * height;
 
@@ -3459,9 +3459,9 @@ static bool write_to_output_c8_int32_1(const int* din, dtype* dout, int ch_n,
     }
   } else {
     LOG(ERROR) << "ERROR: unsupported input data type!!";
-    return SaberInvalidValue;
+    return false;
   }
-  return SaberSuccess;
+  return true;
 }
 
 /*
@@ -3475,7 +3475,7 @@ static bool write_to_output_numc(const dtype* din, dtype* dout, int ch_n,
                                  int width, bool flag_relu, dtype* trash_ptr) {
   if (ch_n <= 0 || hei_n <= 0) {
     LOG(ERROR) << "ch_n and hei_n are more than zero";
-    return SaberInvalidValue;
+    return false;
   }
   int size_c_out = width * height;
 
@@ -3522,7 +3522,7 @@ static bool write_to_output_numc(const dtype* din, dtype* dout, int ch_n,
       }
     }
   }
-  return SaberSuccess;
+  return true;
 }
 
 /// ch_n == ce - cs ??
@@ -3538,7 +3538,7 @@ static bool write2_to_output_numc(const ditype* din, dotype* dout, int ch_n,
 
   if (ch_n <= 0 || hei_n <= 0) {
     LOG(ERROR) << "ch_n and hei_n are more than zero";
-    return SaberInvalidValue;
+    return false;
   }
 
   int size_c_out = width * height;
@@ -3590,7 +3590,7 @@ static bool write2_to_output_numc(const ditype* din, dotype* dout, int ch_n,
       }
     }
   }
-  return SaberSuccess;
+  return true;
 }
 /**
 * innput din: nchwc(num)
@@ -3599,7 +3599,7 @@ inline bool fill_packed_bias_nxmw_fp32(const float* bias, float* dout, int ch_n,
                                        int hei_n, int wround) {
   if (ch_n <= 0 || hei_n <= 0) {
     LOG(ERROR) << "ch_n and hei_n are more than zero";
-    return SaberInvalidValue;
+    return false;
   }
   int cnt_ch = ch_n / 4;
   int size = wround * ch_n;
@@ -3629,7 +3629,7 @@ inline bool fill_packed_bias_nxmw_int8(const int* bias, int* dout, int ch_n,
                                        int hei_n, int wround) {
   if (ch_n <= 0 || hei_n <= 0) {
     LOG(ERROR) << "ch_n and hei_n are more than zero";
-    return SaberInvalidValue;
+    return false;
   }
   int cnt_ch = ch_n / 4;
   int size = wround * ch_n;
@@ -3653,7 +3653,7 @@ inline bool fill_packed_bias_nxmw_int8(const int* bias, int* dout, int ch_n,
       }
     }
   }
-  return SaberSuccess;
+  return true;
 }
 
 }  // namespace math
