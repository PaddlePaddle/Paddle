/* Copyright (c) 2016 PaddlePaddle Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. */

#include <vector>
#include <thread>
#include "paddle/fluid/framework/executor.h"
#include "paddle/fluid/framework/op_registry.h"
#include "paddle/fluid/framework/operator.h"
#include "paddle/fluid/framework/variable.h"


namespace paddle {
namespace operators {

using StepScopeVar = std::vector<framework::Scope *>;

static constexpr char kBlock[] = "sub_block";
static constexpr char kX[] = "X";
static constexpr char kOutputs[] = "Out";

class GoOp : public  framework::OperatorBase {
  public:
    GoOp(const std::string &type, const framework::VariableNameMap &inputs,
         const framework::VariableNameMap &outputs,
         const framework::AttributeMap &attrs)
            : framework::OperatorBase(type, inputs, outputs, attrs) {}

  private:
    void TestFunc123() {
      std::cout << "THIS IS MY TEST THREAD" << std::endl;
    }

    //
    void ExecuteOnThread(const framework::Executor& executor,
                         const framework::Scope &scope) const {
        // /*,
        //             framework::Scope &current_scope,
        //             framework::ProgramDesc *program,
        //             framework::BlockDesc *block*/
// executor->Run(*program, current_scope, block->ID(),
//                    false /*create_local_scope*/);
          for (int i=0; i < 10; ++i) {
            std::cout << "THIS IS MY TEST THREAD" << i << std::endl;
            usleep(1000000);
          }

        // std::cout << Inputs(kX).size() << std::endl;
        std::cout << scope.LocalVarNames().size() << std::endl;
    }
    void RunImpl(const framework::Scope &scope,
                 const platform::Place &dev_place) const override {
      framework::Executor executor(dev_place);
      // auto *block = Attr<framework::BlockDesc *>(kBlock);
      // auto *program = block->Program();

        // TODO(varunarora): Consider moving this to scope.h.
        const framework::Scope* root_scope = &scope;
        const framework::Scope* parent_scope = &(root_scope->parent());

        while (parent_scope != nullptr) {
            root_scope = parent_scope;
            parent_scope = &(parent_scope->parent());
            std::cout << "New parent scope: " << parent_scope << std::endl;
        }
        std::cout << "Found root scope: ";
        std::cout << root_scope << std::endl;
        std::cout << root_scope->LocalVarNames().size() << std::endl;

        framework::Scope& new_scope = root_scope->NewScope();

        // Add all the inputs to a new
        auto &inputs = Inputs(kX);
        for (size_t i = 0; i < inputs.size(); i++) {
            std::cout << inputs.at(i) << std::endl;
            /*framework::Variable* new_var = */
            new_scope.Var(inputs.at(i));
        }

        // std::cout << new_scope.LocalVarNames().size() << std::endl;

        // Loop through all the local scope variables.
        std::vector<std::string> new_scope_variables = (
                new_scope.LocalVarNames());
        for (size_t j = 0; j < new_scope_variables.size(); j++) {
            std::cout << new_scope.FindVar(
                    new_scope_variables[j]) << std::endl;

        }
        // std::thread go_thread([=]{ExecuteOnThread(executor, scope);});

//        std::thread send_thread = std::thread{[&]() {
//            for (int i=0; i < 10; ++i) {
//                std::cout << "THIS IS MY TEST THREAD" << i << std::endl;
//                usleep(1000000);
//            }
//
//        std::cout << scope.LocalVarNames().size() << std::endl;
//            executor.Run(*program, &current_scope, block->ID(),
//                       false /*create_local_scope*/);
//      }};

        std::cout << "OUTSIDE THREAD" << std::endl;
        // send_thread.detach();
        // go_thread.detach();
        // go_thread.join();
    }
};


class GoOpMaker : public framework::OpProtoAndCheckerMaker {
  public:
    GoOpMaker(OpProto *proto, OpAttrChecker *op_checker)
            : OpProtoAndCheckerMaker(proto, op_checker) {
      AddInput(kX,
               "A set of variables, which are required by operators inside the "
                       "block of Go Op.")
              .AsDuplicable();
      AddOutput(kOutputs,
                "A set of variables, which will be assigned with values "
                        "generated by the operators inside the block of Go Op.")
              .AsDuplicable();
      AddAttr<framework::BlockDesc *>(kBlock,
                                      "The block inside GoOp");
      AddComment(R"DOC(
)DOC");
    }
};

// TODO(thuan): Look into Gradient Operator for GO_OP

}   // namespace operators
}   // namespace paddle

REGISTER_OPERATOR(go, paddle::operators::GoOp,
                  paddle::framework::EmptyGradOpMaker,
                  paddle::operators::GoOpMaker);
