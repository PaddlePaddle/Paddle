/* Copyright (c) 2021 PaddlePaddle Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. */
#ifdef PADDLE_WITH_XPU

#if defined(__CUDA_ARCH__)
  #undef __CUDA_ARCH__
#endif

#if defined(__CUDACC__)
  #undef __CUDACC__
#endif

#if defined(__CUDA__)
  #undef __CUDA__
#endif

#if defined(__NVCC__)
  #undef __NVCC__
#endif

#if defined(EIGEN_HAS_BUILTIN_INT128)
  #undef EIGEN_HAS_BUILTIN_INT128
#endif
#include "paddle/fluid/operators/reduce_ops/reduce_op_test.cu.h"
namespace kps = paddle::operators::kernel_primitives;

template <typename Tx, typename Ty = Tx>
struct CustomMean {
  using Transformer = kps::DivideFunctor<Tx>;

  inline Ty initial() { return static_cast<Ty>(0.0f); }

  __device__ Ty operator()(const Ty &a, const Ty &b) const {
    return b + a;
  }
};

namespace paddle {
namespace operators {

//template <typename Tx, typename Ty,
//          template <typename, typename> class ReduceOp>
void TensorReduceXPUMean(const framework::Tensor& x, framework::Tensor* y,
                      std::vector<int> origin_reduce_dims,
                      const framework::ExecutionContext& context) {
//  std::cout<<"niulliling reduce mean start !"<<std::endl;
  const auto& ctx =
      context.template device_context<paddle::platform::XPUDeviceContext>();
  auto stream = ctx.x_context() -> xpu_stream;
  TensorReduceFunctorImpl<float, float, CustomMean>(x, y, origin_reduce_dims, stream);
}

}  // namespace operators
}  // namespace paddle

#endif
