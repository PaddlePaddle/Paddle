//   Copyright (c) 2019 PaddlePaddle Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#ifdef PADDLE_WITH_XPU_KP
#include <xpu/runtime.h>  // NOLINT
#include "paddle/fluid/operators/pull_box_sparse_op.h"
#include "xpu/kernel/cluster_header.h"  // NOLINT
#include "xpu/kernel/debug.h"           // NOLINT
#include "xpu/kernel/math.h"            // NOLINT
#else
#include "paddle/fluid/operators/pull_box_sparse_op.h"
#include "paddle/fluid/platform/device/gpu/gpu_info.h"
#include "paddle/fluid/platform/device/gpu/gpu_primitives.h"
#endif

namespace paddle {
namespace operators {

template <typename T>
class PullBoxSparseCUDAKernel : public framework::OpKernel<T> {
 public:
  void Compute(const framework::ExecutionContext &ctx) const override {
    PullBoxSparseFunctor<T>(ctx);
  }
};

template <typename T>
class PushBoxSparseCUDAKernel : public framework::OpKernel<T> {
 public:
  void Compute(const framework::ExecutionContext &ctx) const override {
    PushBoxSparseFunctor<T>(ctx);
  }
};
}  // namespace operators
}  // namespace paddle
namespace ops = paddle::operators;

#ifdef PADDLE_WITH_XPU_KP
REGISTER_OP_KERNEL(
    pull_box_sparse, KP, paddle::platform::XPUPlace,
    ops::PullBoxSparseCUDAKernel<paddle::platform::XPUDeviceContext, float>);
REGISTER_OP_KERNEL(
    push_box_sparse, KP, paddle::platform::XPUPlace,
    ops::PushBoxSparseCUDAKernel<paddle::platform::XPUDeviceContext, float>);
#else
REGISTER_OP_CUDA_KERNEL(
    pull_box_sparse,
    ops::PullBoxSparseCUDAKernel<paddle::platform::CUDADeviceContext, float>);
REGISTER_OP_CUDA_KERNEL(
    push_box_sparse,
    ops::PushBoxSparseCUDAKernel<paddle::platform::CUDADeviceContext, float>);
#endif