/* Copyright (c) 2021 PaddlePaddle Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. */
#ifdef PADDLE_WITH_XPU

#if defined(__CUDA_ARCH__)
  #undef __CUDA_ARCH__
#endif

#if defined(__CUDACC__)
  #undef __CUDACC__
#endif

#if defined(__CUDA__)
  #undef __CUDA__
#endif

#if defined(__NVCC__)
  #undef __NVCC__
#endif

#if defined(EIGEN_HAS_BUILTIN_INT128)
  #undef EIGEN_HAS_BUILTIN_INT128
#endif

#include <xpu/runtime.h>
#include "xpu/kernel/cluster_header.h"
#include "xpu/kernel/debug.h"
#include "xpu/kernel/math.h"
#include "paddle/fluid/operators/elementwise/elementwise_add_op.h"
#include <memory>
#include <string>
#include "paddle/fluid/operators/elementwise/elementwise_op.h"
#include "paddle/fluid/operators/elementwise/elementwise_xpu.h"
#include "paddle/fluid/operators/elementwise/elementwise_add_op.h"
#include "paddle/fluid/operators/elementwise/elementwise_op_broadcast_test.cu.h"
#include "paddle/fluid/operators/reduce_ops/reduce_op_test.cu.h"

namespace paddle {
namespace operators {

void ElementwiseAddXPU2Compute(const framework::ExecutionContext& ctx,
                               const std::vector<const framework::Tensor *> &ins,
                               std::vector<framework::Tensor *> *outs, int axis) {
//  std::cout<<"niulliling elementwise xpu start !"<<std::endl;
  const auto& cuda_ctx =
      ctx.template device_context<paddle::platform::XPUDeviceContext>();
  LaunchElementwiseCudaKernel<ElementwiseType::kBinary, float, float>(
      cuda_ctx, ins, outs, axis, kps::AddFunctor<float>());
//  std::cout<<"niulliling elementwise xpu end   !"<<std::endl;
}

static std::vector<int> get_rdims(const std::vector<int>& xdims,
                                  const std::vector<int>& ydims) {
  std::vector<int> rdims;
  for (size_t i = 0; i < xdims.size(); i++) {
    if (xdims[i] != ydims[i]) {
      rdims.push_back(i);
    }
  }
  return rdims;
}

void ElementwiseAddGradXPU2Compute(const framework::ExecutionContext& ctx){
   std::cout<<"lxd_debug: XPU2 backward element_add !"<<std::endl;
}

}  // namespace operators
}  // namespace paddle

#endif
