- name: abs
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: RealAndImagInferMeta
    param: [x]
  kernel:
    func: [abs]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {abs: null}
  inplace: null
  backward: abs_grad
- name: accuracy
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: indices, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: accuracy, intermediate: false}
  - {typename: Tensor, name: correct, intermediate: false}
  - {typename: Tensor, name: total, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: AccuracyInferMeta
    param: [x, indices, label]
  kernel:
    func: [accuracy]
    param: [x, indices, label]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {accuracy: null}
  inplace: null
  backward: null
- name: adadelta_
  inputs:
  - {typename: Tensor, name: param, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: avg_squared_grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: avg_squared_update, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: rho}
  - {typename: float, name: epsilon}
  outputs:
  - {typename: Tensor, name: param_out, intermediate: false}
  - {typename: Tensor, name: moment_out, intermediate: false}
  - {typename: Tensor, name: inf_norm_out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: AdadeltaInferMeta
    param: [param, grad, avg_squared_grad, avg_squared_update, rho, epsilon]
  kernel:
    func: [adadelta]
    param: [param, grad, avg_squared_grad, avg_squared_update, rho, epsilon]
    backend: null
    layout: null
    data_type: null
    dispatch: {adadelta: null}
  inplace: {param_out): param, moment_out): (avg_squared_grad, inf_norm_out: (avg_squared_update}
  backward: null
- name: adagrad_
  inputs:
  - {typename: Tensor, name: param, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: moment, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: learning_rate, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: epsilon}
  outputs:
  - {typename: Tensor, name: param_out, intermediate: false}
  - {typename: Tensor, name: moment_out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: AdagradInferMeta
    param: [param, grad, moment, learning_rate, epsilon]
  kernel:
    func: [adagrad, adagrad_dense_param_sparse_grad]
    param: [param, grad, moment, learning_rate, epsilon]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [param]
      to_complex_flag: [false]
    dispatch:
      adagrad:
      - [dense, dense, dense, dense]
      - [dense, dense]
      adagrad_dense_param_sparse_grad:
      - [dense, selected_rows, dense, dense]
      - [dense, dense]
  inplace: {param_out): param, moment_out: (moment}
  backward: null
- name: adam_
  inputs:
  - {typename: Tensor, name: param, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: learning_rate, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: moment1, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: moment2, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: beta1_pow, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: beta2_pow, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: master_param, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: skip_update, optional: true, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: beta1, data_type: float}
  - {typename: Scalar, name: beta2, data_type: float}
  - {typename: Scalar, name: epsilon, data_type: float}
  - {typename: bool, name: lazy_mode}
  - {typename: int64_t, name: min_row_size_to_use_multithread}
  - {typename: bool, name: multi_precision}
  - {typename: bool, name: use_global_beta_pow}
  outputs:
  - {typename: Tensor, name: param_out, intermediate: false}
  - {typename: Tensor, name: moment1_out, intermediate: false}
  - {typename: Tensor, name: moment2_out, intermediate: false}
  - {typename: Tensor, name: beta1_pow_out, intermediate: false}
  - {typename: Tensor, name: beta2_pow_out, intermediate: false}
  - {typename: Tensor, name: master_param_outs, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: AdamInferMeta
    param: [param, grad, learning_rate, moment1, moment2, beta1_pow, beta2_pow, master_param,
      skip_update, beta1, beta2, epsilon, lazy_mode, min_row_size_to_use_multithread,
      multi_precision, use_global_beta_pow]
  kernel:
    func: [adam, adam_dense_param_sparse_grad]
    param: [param, grad, learning_rate, moment1, moment2, beta1_pow, beta2_pow, master_param,
      skip_update, beta1, beta2, epsilon, lazy_mode, min_row_size_to_use_multithread,
      multi_precision, use_global_beta_pow]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [param]
      to_complex_flag: [false]
    dispatch:
      adam:
      - [dense, dense, dense, dense, dense, dense, dense, dense, dense]
      - [dense, dense, dense, dense, dense, dense]
      adam_dense_param_sparse_grad:
      - [dense, selected_rows, dense, dense, dense, dense, dense, dense, dense]
      - [dense, dense, dense, dense, dense, dense]
  inplace: {param_out): param, moment1_out): (moment1, moment2_out): (moment2, beta1_pow_out): (beta1_pow,
    beta2_pow_out): (beta2_pow, master_param_outs: (master_param}
  backward: null
- name: adamax_
  inputs:
  - {typename: Tensor, name: param, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: learning_rate, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: moment, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: inf_norm, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: beta1_pow, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: beta1}
  - {typename: float, name: beta2}
  - {typename: float, name: epsilon}
  outputs:
  - {typename: Tensor, name: param_out, intermediate: false}
  - {typename: Tensor, name: avg_squared_grad_out, intermediate: false}
  - {typename: Tensor, name: avg_squared_update_out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: AdamaxInferMeta
    param: [param, grad, learning_rate, moment, inf_norm, beta1_pow, beta1, beta2,
      epsilon]
  kernel:
    func: [adamax]
    param: [param, grad, learning_rate, moment, inf_norm, beta1_pow, beta1, beta2,
      epsilon]
    backend: null
    layout: null
    data_type: null
    dispatch: {adamax: null}
  inplace: {param_out): param, avg_squared_grad_out): (moment, avg_squared_update_out: (inf_norm}
  backward: null
- name: adamw_
  inputs:
  - {typename: Tensor, name: param, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: learning_rate, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: moment1, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: moment2, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: beta1_pow, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: beta2_pow, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: master_param, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: skip_update, optional: true, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: beta1, data_type: float}
  - {typename: Scalar, name: beta2, data_type: float}
  - {typename: Scalar, name: epsilon, data_type: float}
  - {typename: float, name: lr_ratio}
  - {typename: float, name: coeff}
  - {typename: bool, name: with_decay}
  - {typename: bool, name: lazy_mode}
  - {typename: int64_t, name: min_row_size_to_use_multithread}
  - {typename: bool, name: multi_precision}
  - {typename: bool, name: use_global_beta_pow}
  outputs:
  - {typename: Tensor, name: param_out, intermediate: false}
  - {typename: Tensor, name: moment1_out, intermediate: false}
  - {typename: Tensor, name: moment2_out, intermediate: false}
  - {typename: Tensor, name: beta1_pow_out, intermediate: false}
  - {typename: Tensor, name: beta2_pow_out, intermediate: false}
  - {typename: Tensor, name: master_param_outs, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: AdamwInferMeta
    param: [param, grad, learning_rate, moment1, moment2, beta1_pow, beta2_pow, master_param,
      skip_update, beta1, beta2, epsilon, lr_ratio, coeff, with_decay, lazy_mode,
      min_row_size_to_use_multithread, multi_precision, use_global_beta_pow]
  kernel:
    func: [adamw]
    param: [param, grad, learning_rate, moment1, moment2, beta1_pow, beta2_pow, master_param,
      skip_update, beta1, beta2, epsilon, lr_ratio, coeff, with_decay, lazy_mode,
      min_row_size_to_use_multithread, multi_precision, use_global_beta_pow]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [param]
      to_complex_flag: [false]
    dispatch: {adamw: null}
  inplace: {param_out): param, moment1_out): (moment1, moment2_out): (moment2, beta1_pow_out): (beta1_pow,
    beta2_pow_out): (beta2_pow, master_param_outs: (master_param}
  backward: null
- name: add
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [add]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {add: null}
  inplace: {out: x}
  backward: add_grad
- name: add_n
  inputs:
  - {typename: 'Tensor[]', name: inputs, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  invoke: {func: add_n_impl, args: inputs}
  backward: add_n_grad
- name: affine_grid
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: outputShape, data_type: 'std::vector<int64_t>'}
  - {typename: bool, name: align_corners, default_value: 'true'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: AffineGridInferMeta
    param: [input, outputShape, align_corners]
  kernel:
    func: [affine_grid]
    param: [input, outputShape, align_corners]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [input]
      to_complex_flag: [false]
    dispatch: {affine_grid: null}
  inplace: null
  backward: affine_grid_grad
- name: all
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: axis, default_value: '{}'}
  - {typename: bool, name: keepdim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ReduceInferMeta
    param: [x, axis, keepdim]
  kernel:
    func: [all]
    param: [x, axis, keepdim]
    backend: null
    layout: null
    data_type: null
    dispatch: {all: null}
  inplace: null
  backward: null
- name: amax
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: axis, default_value: '{}'}
  - {typename: bool, name: keepdim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ReduceInferMeta
    param: [x, axis, keepdim]
  kernel:
    func: [amax]
    param: [x, axis, keepdim]
    backend: null
    layout: null
    data_type: null
    dispatch: {amax: null}
  inplace: null
  backward: amax_grad
- name: amin
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: axis, default_value: '{}'}
  - {typename: bool, name: keepdim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ReduceInferMeta
    param: [x, axis, keepdim]
  kernel:
    func: [amin]
    param: [x, axis, keepdim]
    backend: null
    layout: null
    data_type: null
    dispatch: {amin: null}
  inplace: null
  backward: amin_grad
- name: any
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: axis, default_value: '{}'}
  - {typename: bool, name: keepdim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ReduceInferMeta
    param: [x, axis, keepdim]
  kernel:
    func: [any]
    param: [x, axis, keepdim]
    backend: null
    layout: null
    data_type: null
    dispatch: {any: null}
  inplace: null
  backward: null
- name: arange
  inputs:
  - {typename: Tensor, name: start, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: end, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: step, optional: false, no_need_buffer: false}
  attrs:
  - {typename: DataType, name: dtype}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ArangeInferMeta
    param: [start, end, step]
  kernel:
    func: [arange]
    param: [start, end, step]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {arange: null}
  inplace: null
  backward: null
- name: argmax
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: axis, data_type: float}
  - {typename: bool, name: keepdims}
  - {typename: bool, name: flatten}
  - {typename: int, name: dtype}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ArgMinMaxInferMeta
    param: [x, axis, keepdims, flatten, dtype]
  kernel:
    func: [argmax]
    param: [x, axis, keepdims, flatten, dtype]
    backend: null
    layout: null
    data_type: null
    dispatch: {argmax: null}
  inplace: null
  backward: null
- name: argmin
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: axis, data_type: float}
  - {typename: bool, name: keepdims}
  - {typename: bool, name: flatten}
  - {typename: int, name: dtype}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ArgMinMaxInferMeta
    param: [x, axis, keepdims, flatten, dtype]
  kernel:
    func: [argmin]
    param: [x, axis, keepdims, flatten, dtype]
    backend: null
    layout: null
    data_type: null
    dispatch: {argmin: null}
  inplace: null
  backward: null
- name: assign
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [assign]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {assign: null}
  inplace: null
  backward: assign_grad
- name: assign_out_
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: output, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [assign]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {assign: null}
  inplace: {out: output}
  backward: assign_out__grad
- name: assign_value_
  inputs:
  - {typename: Tensor, name: output, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: shape}
  - {typename: DataType, name: dtype}
  - {typename: 'Scalar[]', name: values, data_type: 'std::vector<Scalar>'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: AssignValueInferMeta
    param: [shape, dtype]
  kernel:
    func: [assign_value]
    param: [shape, dtype, values]
    backend:
      ordered: true
      candidates: [place, output]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {assign_value: null}
  inplace: {out: output}
  backward: null
- name: auc
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: stat_pos, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: stat_neg, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: ins_tag_weight, optional: true, no_need_buffer: false}
  attrs:
  - {typename: str, name: curve}
  - {typename: int, name: num_thresholds}
  - {typename: int, name: slide_steps}
  outputs:
  - {typename: Tensor, name: auc, intermediate: false}
  - {typename: Tensor, name: stat_pos_out, intermediate: false}
  - {typename: Tensor, name: stat_neg_out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: AucInferMeta
    param: [x, label, stat_pos, stat_neg, ins_tag_weight, curve, num_thresholds, slide_steps]
  kernel:
    func: [auc]
    param: [x, label, stat_pos, stat_neg, ins_tag_weight, curve, num_thresholds, slide_steps]
    backend: null
    layout: null
    data_type: null
    dispatch: {auc: null}
  inplace: null
  backward: null
- name: average_accumulates_
  inputs:
  - {typename: Tensor, name: param, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: in_sum_1, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: in_sum_2, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: in_sum_3, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: in_num_accumulates, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: in_old_num_accumulates, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: in_num_updates, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: average_window}
  - {typename: int64_t, name: max_average_window}
  - {typename: int64_t, name: min_average_window}
  outputs:
  - {typename: Tensor, name: out_sum_1, intermediate: false}
  - {typename: Tensor, name: out_sum_2, intermediate: false}
  - {typename: Tensor, name: out_sum_3, intermediate: false}
  - {typename: Tensor, name: out_num_accumulates, intermediate: false}
  - {typename: Tensor, name: out_old_num_accumulates, intermediate: false}
  - {typename: Tensor, name: out_num_updates, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: AverageAccumulatesInferMeta
    param: [param, in_sum_1, in_sum_2, in_sum_3, in_num_accumulates, in_old_num_accumulates,
      in_num_updates, average_window, max_average_window, min_average_window]
  kernel:
    func: [average_accumulates]
    param: [param, in_sum_1, in_sum_2, in_sum_3, in_num_accumulates, in_old_num_accumulates,
      in_num_updates, average_window, max_average_window, min_average_window]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [param]
      to_complex_flag: [false]
    dispatch:
      average_accumulates:
      - [dense, dense, dense, dense, dense, dense, dense]
      - [dense, dense, dense, dense, dense, dense]
  inplace: {out_sum_1): in_sum_1, out_sum_2): (in_sum_2, out_sum_3): (in_sum_3, out_num_accumulates): (in_num_accumulates,
    out_old_num_accumulates): (in_old_num_accumulates, out_num_updates: (in_num_updates}
  backward: null
- name: batch_norm
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: mean, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: variance, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: scale, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: bias, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: is_test}
  - {typename: float, name: momentum}
  - {typename: float, name: epsilon}
  - {typename: str, name: data_layout}
  - {typename: bool, name: use_global_stats}
  - {typename: bool, name: trainable_statistics}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: mean_out, intermediate: false}
  - {typename: Tensor, name: variance_out, intermediate: false}
  - {typename: Tensor, name: saved_mean, intermediate: false}
  - {typename: Tensor, name: saved_variance, intermediate: false}
  - {typename: Tensor, name: reserve_space, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: BatchNormInferMeta
    param: [x, mean, variance, scale, bias, is_test, momentum, epsilon, data_layout,
      use_global_stats, trainable_statistics]
  kernel:
    func: [batch_norm]
    param: [x, mean, variance, scale, bias, is_test, momentum, epsilon, data_layout,
      use_global_stats, trainable_statistics]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {batch_norm: null}
  inplace: null
  backward: batch_norm_grad
- name: bce_loss
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: BCELossInferMeta
    param: [input, label]
  kernel:
    func: [bce_loss]
    param: [input, label]
    backend: null
    layout: null
    data_type: null
    dispatch: {bce_loss: null}
  inplace: null
  backward: bce_loss_grad
- name: bicubic_interp
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_size, optional: true, no_need_buffer: false}
  - {typename: 'Tensor[]', name: size_tensor, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: scale_tensor, optional: true, no_need_buffer: false}
  attrs:
  - {typename: str, name: data_layout}
  - {typename: int, name: out_d}
  - {typename: int, name: out_h}
  - {typename: int, name: out_w}
  - {typename: 'float[]', name: scale}
  - {typename: str, name: interp_method}
  - {typename: bool, name: align_corners}
  - {typename: int, name: align_mode}
  outputs:
  - {typename: Tensor, name: output, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: InterpolateInferMeta
    param: [x, out_size, size_tensor, scale_tensor, data_layout, out_d, out_h, out_w,
      scale, interp_method, align_corners, align_mode]
  kernel:
    func: [bicubic_interp]
    param: [x, out_size, size_tensor, scale_tensor, data_layout, out_d, out_h, out_w,
      scale, interp_method, align_corners, align_mode]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {bicubic_interp: null}
  inplace: null
  backward: bicubic_interp_grad
- name: bilinear_interp
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_size, optional: true, no_need_buffer: false}
  - {typename: 'Tensor[]', name: size_tensor, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: scale_tensor, optional: true, no_need_buffer: false}
  attrs:
  - {typename: str, name: data_layout}
  - {typename: int, name: out_d}
  - {typename: int, name: out_h}
  - {typename: int, name: out_w}
  - {typename: 'float[]', name: scale}
  - {typename: str, name: interp_method}
  - {typename: bool, name: align_corners}
  - {typename: int, name: align_mode}
  outputs:
  - {typename: Tensor, name: output, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: InterpolateInferMeta
    param: [x, out_size, size_tensor, scale_tensor, data_layout, out_d, out_h, out_w,
      scale, interp_method, align_corners, align_mode]
  kernel:
    func: [bilinear_interp]
    param: [x, out_size, size_tensor, scale_tensor, data_layout, out_d, out_h, out_w,
      scale, interp_method, align_corners, align_mode]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {bilinear_interp: null}
  inplace: null
  backward: bilinear_interp_grad
- name: bilinear_tensor_product
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: weight, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: bias, optional: true, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: BilinearTensorProductInferMeta
    param: [x, y, weight, bias]
  kernel:
    func: [bilinear_tensor_product]
    param: [x, y, weight, bias]
    backend: null
    layout: null
    data_type: null
    dispatch: {bilinear_tensor_product: null}
  inplace: null
  backward: bilinear_tensor_product_grad
- name: bincount
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: weights, optional: true, no_need_buffer: false}
  attrs:
  - {typename: Scalar(int), name: minlength, default_value: '0', data_type: int}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: BincountInferMeta
    param: [x, weights, minlength]
  kernel:
    func: [bincount]
    param: [x, weights, minlength]
    backend: null
    layout: null
    data_type: null
    dispatch: {bincount: null}
  inplace: null
  backward: null
- name: bitwise_and
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [bitwise_and]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {bitwise_and: null}
  inplace: null
  backward: null
- name: bitwise_not
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [bitwise_not]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {bitwise_not: null}
  inplace: null
  backward: null
- name: bitwise_or
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [bitwise_or]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {bitwise_or: null}
  inplace: null
  backward: null
- name: bitwise_xor
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [bitwise_xor]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {bitwise_xor: null}
  inplace: null
  backward: null
- name: box_coder
  inputs:
  - {typename: Tensor, name: prior_box, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: prior_box_var, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: target_box, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: code_type}
  - {typename: bool, name: box_normalized}
  - {typename: int, name: axis}
  - {typename: 'float[]', name: variance}
  outputs:
  - {typename: Tensor, name: output_box, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: BoxCoderInferMeta
    param: [prior_box, prior_box_var, target_box, code_type, box_normalized, axis,
      variance]
  kernel:
    func: [box_coder]
    param: [prior_box, prior_box_var, target_box, code_type, box_normalized, axis,
      variance]
    backend: null
    layout: null
    data_type: null
    dispatch: {box_coder: null}
  inplace: null
  backward: null
- name: broadcast_tensors
  inputs:
  - {typename: 'Tensor[]', name: input, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: 'Tensor[]', name: out, size: input.size(), intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: BroadcastTensorsInferMeta
    param: [input]
  kernel:
    func: [broadcast_tensors]
    param: [input]
    backend: null
    layout: null
    data_type: null
    dispatch: {broadcast_tensors: null}
  inplace: null
  backward: broadcast_tensors_grad
- name: cast
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: DataType, name: dtype}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CastInferMeta
    param: [x, dtype]
  kernel:
    func: [cast]
    param: [x, dtype]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {cast: null}
  inplace: null
  backward: cast_grad
- name: check_finite_and_unscale_
  inputs:
  - {typename: 'Tensor[]', name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: scale, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: input_found_infinite, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: 'Tensor[]', name: out, size: x.size(), intermediate: false}
  - {typename: Tensor, name: output_found_infinite, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CheckFiniteAndUnscaleInferMeta
    param: [x, scale]
  kernel:
    func: [check_finite_and_unscale]
    param: [x, scale]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {check_finite_and_unscale: null}
  inplace: {out): x, output_found_infinite: (input_found_infinite}
  backward: null
- name: class_center_sample
  inputs:
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: num_classes}
  - {typename: int, name: num_samples}
  - {typename: int, name: ring_id}
  - {typename: int, name: rank}
  - {typename: int, name: nranks}
  - {typename: bool, name: fix_seed}
  - {typename: int, name: seed}
  outputs:
  - {typename: Tensor, name: remapped_label, intermediate: false}
  - {typename: Tensor, name: sampled_local_class_center, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ClassCenterSampleInferMeta
    param: [label, num_classes, num_samples, ring_id, rank, nranks, fix_seed, seed]
  kernel:
    func: [class_center_sample]
    param: [label, num_classes, num_samples, ring_id, rank, nranks, fix_seed, seed]
    backend: null
    layout: null
    data_type: null
    dispatch: {class_center_sample: null}
  inplace: null
  backward: null
- name: clip_by_norm
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: max_norm}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ClipByNormInferMeta
    param: [x, max_norm]
  kernel:
    func: [clip_by_norm]
    param: [x, max_norm]
    backend: null
    layout: null
    data_type: null
    dispatch: {clip_by_norm: null}
  inplace: null
  backward: null
- name: coalesce_tensor
  inputs:
  - {typename: 'Tensor[]', name: input, optional: false, no_need_buffer: false}
  attrs:
  - {typename: DataType, name: dtype}
  - {typename: bool, name: copy_data, default_value: 'false'}
  - {typename: bool, name: set_constant, default_value: 'false'}
  - {typename: bool, name: persist_output, default_value: 'false'}
  - {typename: float, name: constant, default_value: '0.0'}
  - {typename: bool, name: use_align, default_value: 'true'}
  - {typename: int, name: align_size, default_value: '-1'}
  - {typename: int, name: size_of_dtype, default_value: '-1'}
  - {typename: 'int64_t[]', name: concated_shapes, default_value: '{}'}
  - {typename: 'int64_t[]', name: concated_ranks, default_value: '{}'}
  outputs:
  - {typename: 'Tensor[]', name: output, size: input.size(), intermediate: false}
  - {typename: Tensor, name: fused_output, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CoalesceTensorInferMeta
    param: [input, dtype, copy_data, set_constant, persist_output, constant, use_align,
      align_size, size_of_dtype, concated_shapes, concated_ranks]
  kernel:
    func: [coalesce_tensor]
    param: [input, dtype, copy_data, set_constant, persist_output, constant, use_align,
      align_size, size_of_dtype, concated_shapes, concated_ranks]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {coalesce_tensor: null}
  inplace: null
  backward: null
- name: concat
  inputs:
  - {typename: 'Tensor[]', name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar(int64_t), name: axis, data_type: int64_t}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ConcatInferMeta
    param: [x, axis]
  kernel:
    func: [concat]
    param: [x, axis]
    backend: null
    layout: null
    data_type: null
    dispatch: {concat: null}
  inplace: null
  backward: concat_grad
- name: conv2d
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: str, name: padding_algorithm}
  - {typename: 'int[]', name: dilations}
  - {typename: int, name: groups}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ConvInferMeta
    param: [input, filter, strides, paddings, padding_algorithm, dilations, groups,
      data_format]
  kernel:
    func: [conv2d]
    param: [input, filter, strides, paddings, padding_algorithm, dilations, groups,
      data_format]
    backend: null
    layout: null
    data_type: null
    dispatch: {conv2d: null}
  inplace: null
  backward: conv2d_grad
- name: conv2d_transpose
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: 'int[]', name: output_padding}
  - {typename: IntArray, name: output_size, data_type: 'std::vector<int64_t>'}
  - {typename: str, name: padding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: Conv2dTransposeInferMeta
    param: [x, filter, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
  kernel:
    func: [conv2d_transpose]
    param: [x, filter, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
    backend: null
    layout: null
    data_type: null
    dispatch: {conv2d_transpose: null}
  inplace: null
  backward: conv2d_transpose_grad
- name: conv3d
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: str, name: padding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: Conv3DInferMeta
    param: [input, filter, strides, paddings, padding_algorithm, groups, dilations,
      data_format]
  kernel:
    func: [conv3d]
    param: [input, filter, strides, paddings, padding_algorithm, groups, dilations,
      data_format]
    backend: null
    layout: null
    data_type: null
    dispatch: {conv3d: null}
  inplace: null
  backward: conv3d_grad
- name: conv3d_transpose
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: 'int[]', name: output_padding}
  - {typename: 'int[]', name: output_size}
  - {typename: str, name: padding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ConvTransposeInferMeta
    param: [x, filter, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
  kernel:
    func: [conv3d_transpose]
    param: [x, filter, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
    backend: null
    layout: null
    data_type: null
    dispatch: {conv3d_transpose: null}
  inplace: null
  backward: conv3d_transpose_grad
- name: copy_to
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Place, name: place}
  - {typename: bool, name: blocking}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  invoke: {func: copy_to_impl, args: 'x, place, blocking'}
  backward: null
- name: cross_entropy_with_softmax
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: soft_label}
  - {typename: bool, name: use_softmax}
  - {typename: bool, name: numeric_stable_mode}
  - {typename: int, name: ignore_index}
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: softmax, intermediate: false}
  - {typename: Tensor, name: loss, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CrossEntropyWithSoftmaxInferMeta
    param: [input, label, soft_label, use_softmax, numeric_stable_mode, ignore_index,
      axis]
  kernel:
    func: [cross_entropy_with_softmax]
    param: [input, label, soft_label, use_softmax, numeric_stable_mode, ignore_index,
      axis]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [input]
      to_complex_flag: [false]
    dispatch: {cross_entropy_with_softmax: null}
  inplace: null
  backward: cross_entropy_with_softmax_grad
- name: cumprod
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: dim}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMetaCheckAxis
    param: [x, dim]
  kernel:
    func: [cumprod]
    param: [x, dim]
    backend: null
    layout: null
    data_type: null
    dispatch: {cumprod: null}
  inplace: null
  backward: cumprod_grad
- name: cumsum
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: axis, data_type: float}
  - {typename: bool, name: flatten}
  - {typename: bool, name: exclusive}
  - {typename: bool, name: reverse}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CumScalarAxisInferMeta
    param: [x, axis, flatten, exclusive, reverse]
  kernel:
    func: [cumsum]
    param: [x, axis, flatten, exclusive, reverse]
    backend: null
    layout: null
    data_type: null
    dispatch: {cumsum: null}
  inplace: null
  backward: cumsum_grad
- name: decode_jpeg
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: mode}
  - {typename: Place, name: place}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: DecodeJpegInferMeta
    param: [x, mode]
  kernel:
    func: [decode_jpeg]
    param: [x, mode]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type: null
    dispatch: {decode_jpeg: null}
  inplace: null
  backward: null
- name: deformable_conv
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: offset, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: mask, optional: true, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: 'int[]', name: dilations}
  - {typename: int, name: deformable_groups}
  - {typename: int, name: groups}
  - {typename: int, name: im2col_step}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: DeformableConvInferMeta
    param: [x, offset, filter, mask, strides, paddings, dilations, deformable_groups,
      groups, im2col_step]
  kernel:
    func: [deformable_conv]
    param: [x, offset, filter, mask, strides, paddings, dilations, deformable_groups,
      groups, im2col_step]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {deformable_conv: null}
  inplace: null
  backward: deformable_conv_grad
- name: depthwise_conv2d
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: str, name: padding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: DepthwiseConvInferMeta
    param: [x, filter, strides, paddings, padding_algorithm, groups, dilations, data_format]
  kernel:
    func: [depthwise_conv2d]
    param: [x, filter, strides, paddings, padding_algorithm, groups, dilations, data_format]
    backend: null
    layout: null
    data_type: null
    dispatch: {depthwise_conv2d: null}
  inplace: null
  backward: depthwise_conv2d_grad
- name: depthwise_conv2d_transpose
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: 'int[]', name: output_padding}
  - {typename: IntArray, name: output_size, data_type: 'std::vector<int64_t>'}
  - {typename: str, name: padding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: Conv2dTransposeInferMeta
    param: [x, filter, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
  kernel:
    func: [depthwise_conv2d_transpose]
    param: [x, filter, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
    backend: null
    layout: null
    data_type: null
    dispatch: {depthwise_conv2d_transpose: null}
  inplace: null
  backward: depthwise_conv2d_transpose_grad
- name: dirichlet
  inputs:
  - {typename: Tensor, name: alpha, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: DirichletInferMeta
    param: [alpha]
  kernel:
    func: [dirichlet]
    param: [alpha]
    backend: null
    layout: null
    data_type: null
    dispatch: {dirichlet: null}
  inplace: null
  backward: null
- name: distribute_fpn_proposals
  inputs:
  - {typename: Tensor, name: fpn_rois, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: rois_num, optional: true, no_need_buffer: false}
  attrs:
  - {typename: int, name: min_level}
  - {typename: int, name: max_level}
  - {typename: int, name: refer_level}
  - {typename: int, name: refer_scale}
  - {typename: bool, name: pixel_offset}
  outputs:
  - {typename: 'Tensor[]', name: multi_fpn_rois, size: max_level - min_level + 1,
    intermediate: false}
  - {typename: 'Tensor[]', name: multi_level_rois_num, size: max_level - min_level
      + 1, intermediate: false}
  - {typename: Tensor, name: restore_index, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: DistributeFpnProposalsInferMeta
    param: [fpn_rois, rois_num, min_level, max_level, refer_level, refer_scale, pixel_offset]
  kernel:
    func: [distribute_fpn_proposals]
    param: [fpn_rois, rois_num, min_level, max_level, refer_level, refer_scale, pixel_offset]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [fpn_rois]
      to_complex_flag: [false]
    dispatch: {distribute_fpn_proposals: null}
  inplace: null
  backward: null
- name: divide
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [divide]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {divide: null}
  inplace: null
  backward: divide_grad
- name: dropout
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: seed_tensor, optional: true, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: p, data_type: float}
  - {typename: bool, name: is_test}
  - {typename: str, name: mode}
  - {typename: int, name: seed}
  - {typename: bool, name: fix_seed}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: mask, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: DropoutInferMeta
    param: [x, seed_tensor, p, is_test, mode, seed, fix_seed]
  kernel:
    func: [dropout]
    param: [x, seed_tensor, p, is_test, mode, seed, fix_seed]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {dropout: null}
  inplace: null
  backward: dropout_grad
- name: edit_distance
  inputs:
  - {typename: Tensor, name: hyps, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: refs, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: hypslength, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: refslength, optional: true, no_need_buffer: false}
  attrs:
  - {typename: bool, name: normalized, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: sequencenum, intermediate: false}
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: EditDistanceInferMeta
    param: [hyps, refs, hypslength, refslength, normalized]
  kernel:
    func: [edit_distance]
    param: [hyps, refs, hypslength, refslength, normalized]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: ['DataType::FLOAT32']
      to_complex_flag: [false]
    dispatch: {edit_distance: null}
  inplace: null
  backward: null
- name: eigvalsh
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: uplo}
  - {typename: bool, name: is_test}
  outputs:
  - {typename: Tensor, name: eigenvalues, intermediate: false}
  - {typename: Tensor, name: eigenvectors, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: EigvalshInferMeta
    param: [x, uplo, is_test]
  kernel:
    func: [eigvalsh]
    param: [x, uplo, is_test]
    backend: null
    layout: null
    data_type: null
    dispatch: {eigvalsh: null}
  inplace: null
  backward: eigvalsh_grad
- name: einsum
  inputs:
  - {typename: 'Tensor[]', name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: equation}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: 'Tensor[]', name: out, size: x.size(), intermediate: false}
  - {typename: 'Tensor[]', name: out, size: x.size(), intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: EinsumRawInferMeta
    param: [x, equation]
  kernel:
    func: [einsum_raw]
    param: [x, equation]
    backend: null
    layout: null
    data_type: null
    dispatch: {einsum_raw: null}
  inplace: null
  backward: einsum_grad
- name: elementwise_pow
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [elementwise_pow]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {elementwise_pow: null}
  inplace: null
  backward: elementwise_pow_grad
- name: embedding
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: weight, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int64_t, name: padding_idx, default_value: '-1'}
  - {typename: bool, name: sparse, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: EmbeddingInferMeta
    param: [x, weight, padding_idx]
  kernel:
    func: [embedding, sparse_weight_embedding]
    param: [x, weight, padding_idx]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [weight]
      to_complex_flag: [false]
    dispatch:
      embedding:
      - [dense, dense]
      - [dense]
      sparse_weight_embedding:
      - [dense, selected_rows]
      - [dense]
  inplace: null
  backward: embedding_grad
- name: empty
  inputs: []
  attrs:
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  - {typename: Place, name: place, default_value: CPUPlace()}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CreateInferMeta
    param: [shape, dtype]
  kernel:
    func: [empty]
    param: [shape, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {empty: null}
  inplace: null
  backward: null
- name: empty_like
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: DataType, name: dtype, default_value: 'DataType::UNDEFINED'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CreateLikeInferMeta
    param: [x, dtype]
  kernel:
    func: [empty_like]
    param: [x, dtype]
    backend:
      ordered: true
      candidates: [place, x]
    layout: null
    data_type:
      ordered: true
      candidates: [dtype, x]
      to_complex_flag: [false, false]
    dispatch: {empty_like: null}
  inplace: null
  backward: null
- name: equal
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CompareInferMeta
    param: [x, y]
  kernel:
    func: [equal]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {equal: null}
  inplace: null
  backward: null
- name: expand
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ExpandInferMeta
    param: [x, shape]
  kernel:
    func: [expand]
    param: [x, shape]
    backend: null
    layout: null
    data_type: null
    dispatch: {expand: null}
  inplace: null
  backward: expand_grad
- name: expand_as
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: true, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: target_shape}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ExpandAsInferMeta
    param: [x, y, target_shape]
  kernel:
    func: [expand_as]
    param: [x, y, target_shape]
    backend: null
    layout: null
    data_type: null
    dispatch: {expand_as: null}
  inplace: null
  backward: expand_as_grad
- name: exponential_
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: lam}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [exponential]
    param: [x, lam]
    backend: null
    layout: null
    data_type: null
    dispatch: {exponential: null}
  inplace: {out: x}
  backward: exponential__grad
- name: eye
  inputs: []
  attrs:
  - {typename: Scalar, name: num_rows, data_type: float}
  - {typename: Scalar, name: num_columns, data_type: float}
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: EyeInferMeta
    param: [num_rows, num_columns, dtype]
  kernel:
    func: [eye]
    param: [num_rows, num_columns, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {eye: null}
  inplace: null
  backward: null
- name: fill
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: value, data_type: float}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [fill]
    param: [x, value]
    backend: null
    layout: null
    data_type: null
    dispatch: {fill: null}
  inplace: {out: x}
  backward: fill_grad
- name: flatten
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: start_axis}
  - {typename: int, name: stop_axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: xshape, intermediate: true}
  no_need_buffer: null
  infer_meta:
    func: FlattenWithXShapeInferMeta
    param: [x, start_axis, stop_axis]
  kernel:
    func: [flatten_with_xshape]
    param: [x, start_axis, stop_axis]
    backend:
      ordered: false
      candidates: [x]
    layout: null
    data_type: null
    dispatch: {flatten_with_xshape: null}
  inplace: {out: x}
  backward: flatten_grad
- name: floor_divide
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [floor_divide]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {floor_divide: null}
  inplace: null
  backward: null
- name: fmax
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    param: [x, y]
    func: ElementwiseInferMeta
  kernel:
    func: [fmax]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {fmax: null}
  inplace: null
  backward: fmax_grad
- name: fmin
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    param: [x, y]
    func: ElementwiseInferMeta
  kernel:
    func: [fmin]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {fmin: null}
  inplace: null
  backward: fmin_grad
- name: frobenius_norm
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: axis}
  - {typename: bool, name: keep_dim}
  - {typename: bool, name: reduce_all}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ReduceInferMetaBase
    param: [x, axis, keep_dim, reduce_all]
  kernel:
    func: [frobenius_norm]
    param: [x, axis, keep_dim, reduce_all]
    backend: null
    layout: null
    data_type: null
    dispatch: {frobenius_norm: null}
  inplace: null
  backward: frobenius_norm_grad
- name: full
  inputs: []
  attrs:
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  - {typename: Scalar, name: value, data_type: float}
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  - {typename: Place, name: place, default_value: CPUPlace()}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CreateInferMeta
    param: [shape, dtype]
  kernel:
    func: [full]
    param: [shape, value, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {full: null}
  inplace: null
  backward: null
- name: full_
  inputs:
  - {typename: Tensor, name: output, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  - {typename: Scalar, name: value, data_type: float}
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  - {typename: Place, name: place, default_value: CPUPlace()}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CreateInferMeta
    param: [shape, dtype]
  kernel:
    func: [full]
    param: [shape, value, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {full: null}
  inplace: {out: output}
  backward: null
- name: full_batch_size_like
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: shape}
  - {typename: DataType, name: dtype}
  - {typename: Scalar, name: value, data_type: float}
  - {typename: int, name: input_dim_idx}
  - {typename: int, name: output_dim_idx}
  - {typename: Place, name: place, default_value: CPUPlace()}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: FullBatchSizeLikeInferMeta
    param: [input, shape, value, dtype, input_dim_idx, output_dim_idx]
  kernel:
    func: [full_batch_size_like]
    param: [input, shape, value, dtype, input_dim_idx, output_dim_idx]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {full_batch_size_like: null}
  inplace: null
  backward: null
- name: full_like
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: value, data_type: float}
  - {typename: DataType, name: dtype, default_value: 'DataType::UNDEFINED'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CreateLikeInferMeta
    param: [x, dtype]
  kernel:
    func: [full_like]
    param: [x, value, dtype]
    backend:
      ordered: true
      candidates: [place, x]
    layout: null
    data_type:
      ordered: true
      candidates: [dtype, x]
      to_complex_flag: [false, false]
    dispatch: {full_like: null}
  inplace: null
  backward: null
- name: gather
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar(int), name: axis, default_value: '0', data_type: int}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GatherInferMeta
    param: [x, index, axis]
  kernel:
    func: [gather]
    param: [x, index, axis]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {gather: null}
  inplace: null
  backward: gather_grad
- name: gaussian
  inputs: []
  attrs:
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  - {typename: float, name: mean}
  - {typename: float, name: std}
  - {typename: int, name: seed}
  - {typename: DataType, name: dtype}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GaussianInferMeta
    param: [shape, mean, std, seed, dtype]
  kernel:
    func: [gaussian]
    param: [shape, mean, std, seed, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {gaussian: null}
  inplace: null
  backward: null
- name: generate_proposals
  inputs:
  - {typename: Tensor, name: scores, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: bbox_deltas, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: im_shape, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: anchors, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: variances, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: pre_nms_top_n}
  - {typename: int, name: post_nms_top_n}
  - {typename: float, name: nms_thresh}
  - {typename: float, name: min_size}
  - {typename: float, name: eta}
  - {typename: bool, name: pixel_offset, default_value: 'true'}
  outputs:
  - {typename: Tensor, name: rpn_rois, intermediate: false}
  - {typename: Tensor, name: rpn_roi_probs, intermediate: false}
  - {typename: Tensor, name: rpn_rois_num, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GenerateProposalsV2InferMeta
    param: [scores, bbox_deltas, im_shape, anchors, variances, pre_nms_top_n, post_nms_top_n,
      nms_thresh, min_size, eta, pixel_offset]
  kernel:
    func: [generate_proposals]
    param: [scores, bbox_deltas, im_shape, anchors, variances, pre_nms_top_n, post_nms_top_n,
      nms_thresh, min_size, eta, pixel_offset]
    backend: null
    layout: null
    data_type: null
    dispatch: {generate_proposals: null}
  inplace: null
  backward: null
- name: greater_equal
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CompareInferMeta
    param: [x, y]
  kernel:
    func: [greater_equal]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {greater_equal: null}
  inplace: null
  backward: null
- name: greater_than
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CompareInferMeta
    param: [x, y]
  kernel:
    func: [greater_than]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {greater_than: null}
  inplace: null
  backward: null
- name: group_norm
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: scale, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: bias, optional: true, no_need_buffer: false}
  attrs:
  - {typename: float, name: epsilon}
  - {typename: int, name: groups}
  - {typename: str, name: data_layout}
  outputs:
  - {typename: Tensor, name: y, intermediate: false}
  - {typename: Tensor, name: mean, intermediate: true}
  - {typename: Tensor, name: variance, intermediate: true}
  no_need_buffer: null
  infer_meta:
    func: GroupNormInferMeta
    param: [x, scale, bias, epsilon, groups, data_layout]
  kernel:
    func: [group_norm]
    param: [x, scale, bias, epsilon, groups, data_layout]
    backend: null
    layout: null
    data_type: null
    dispatch: {group_norm: null}
  inplace: null
  backward: group_norm_grad
- name: hardswish
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [hardswish]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {hardswish: null}
  inplace: null
  backward: hardswish_grad
- name: hsigmoid_loss
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: w, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: bias, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: path, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: code, optional: true, no_need_buffer: false}
  attrs:
  - {typename: int, name: num_classes}
  - {typename: bool, name: remote_prefetch}
  - {typename: bool, name: is_sparse}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: pre_out, intermediate: false}
  - {typename: Tensor, name: w_out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: HSigmoidLossInferMeta
    param: [x, label, w, bias, path, code, num_classes, remote_prefetch, is_sparse]
  kernel:
    func: [hsigmoid_loss]
    param: [x, label, w, bias, path, code, num_classes, remote_prefetch, is_sparse]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {hsigmoid_loss: null}
  inplace: null
  backward: hsigmoid_loss_grad
- name: huber_loss
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: delta}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: residual, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: HuberLossInferMeta
    param: [input, label, delta]
  kernel:
    func: [huber_loss]
    param: [input, label, delta]
    backend: null
    layout: null
    data_type: null
    dispatch: {huber_loss: null}
  inplace: null
  backward: huber_loss_grad
- name: increment
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: value, default_value: '1.0'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: IncrementInferMeta
    param: [x, value]
  kernel:
    func: [increment]
    param: [x, value]
    backend: null
    layout: null
    data_type: null
    dispatch: {increment: null}
  inplace: {out: x}
  backward: null
- name: index_add
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: add_value, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: IndexAddInferMeta
    param: [x, index, add_value, axis]
  kernel:
    func: [index_add]
    param: [x, index, add_value, axis]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {index_add: null}
  inplace: {out: x}
  backward: index_add_grad
- name: instance_norm
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: scale, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: bias, optional: true, no_need_buffer: false}
  attrs:
  - {typename: float, name: epsilon}
  outputs:
  - {typename: Tensor, name: y, intermediate: false}
  - {typename: Tensor, name: saved_mean, intermediate: true}
  - {typename: Tensor, name: saved_variance, intermediate: true}
  no_need_buffer: null
  infer_meta:
    func: InstanceNormInferMeta
    param: [x, scale, bias, epsilon]
  kernel:
    func: [instance_norm]
    param: [x, scale, bias, epsilon]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {instance_norm: null}
  inplace: null
  backward: instance_norm_grad
- name: kldiv_loss
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: reduction}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: KLDivInferMeta
    param: [x, label, reduction]
  kernel:
    func: [kldiv_loss]
    param: [x, label, reduction]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {kldiv_loss: null}
  inplace: null
  backward: kldiv_loss_grad
- name: kron
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: KronInferMeta
    param: [x, y]
  kernel:
    func: [kron]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {kron: null}
  inplace: null
  backward: kron_grad
- name: lamb_
  inputs:
  - {typename: Tensor, name: param, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: learning_rate, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: moment1, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: moment2, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: beta1_pow, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: beta2_pow, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: master_param, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: skip_update, optional: true, no_need_buffer: false}
  attrs:
  - {typename: float, name: weight_decay}
  - {typename: float, name: beta1}
  - {typename: float, name: beta2}
  - {typename: float, name: epsilon}
  - {typename: bool, name: multi_precision}
  outputs:
  - {typename: Tensor, name: param_out, intermediate: false}
  - {typename: Tensor, name: moment1_out, intermediate: false}
  - {typename: Tensor, name: moment2_out, intermediate: false}
  - {typename: Tensor, name: beta1_pow_out, intermediate: false}
  - {typename: Tensor, name: beta2_pow_out, intermediate: false}
  - {typename: Tensor, name: master_param_outs, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: LambInferMeta
    param: [param, grad, learning_rate, moment1, moment2, beta1_pow, beta2_pow, master_param,
      skip_update, weight_decay, beta1, beta2, epsilon, multi_precision]
  kernel:
    func: [lamb, lamb_sr]
    param: [param, grad, learning_rate, moment1, moment2, beta1_pow, beta2_pow, master_param,
      skip_update, weight_decay, beta1, beta2, epsilon, multi_precision]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [param]
      to_complex_flag: [false]
    dispatch:
      lamb:
      - [dense, dense, dense, dense, dense, dense, dense, dense, dense]
      - [dense, dense, dense, dense, dense, dense]
      lamb_sr:
      - [dense, selected_rows, dense, dense, dense, dense, dense, dense, dense]
      - [dense, dense, dense, dense, dense, dense]
  inplace: {param_out): param, moment1_out): (moment1, moment2_out): (moment2, beta1_pow_out): (beta1_pow,
    beta2_pow_out): (beta2_pow, master_param_outs: (master_param}
  backward: null
- name: layer_norm
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: scale, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: bias, optional: true, no_need_buffer: false}
  attrs:
  - {typename: float, name: epsilon}
  - {typename: int, name: begin_norm_axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: mean, intermediate: false}
  - {typename: Tensor, name: variance, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: LayerNormInferMeta
    param: [x, scale, bias, epsilon, begin_norm_axis]
  kernel:
    func: [layer_norm]
    param: [x, scale, bias, epsilon, begin_norm_axis]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {layer_norm: null}
  inplace: null
  backward: layer_norm_grad
- name: less_equal
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CompareInferMeta
    param: [x, y]
  kernel:
    func: [less_equal]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {less_equal: null}
  inplace: null
  backward: null
- name: less_than
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CompareInferMeta
    param: [x, y]
  kernel:
    func: [less_than]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {less_than: null}
  inplace: null
  backward: null
- name: linear_interp
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_size, optional: true, no_need_buffer: false}
  - {typename: 'Tensor[]', name: size_tensor, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: scale_tensor, optional: true, no_need_buffer: false}
  attrs:
  - {typename: str, name: data_layout}
  - {typename: int, name: out_d}
  - {typename: int, name: out_h}
  - {typename: int, name: out_w}
  - {typename: 'float[]', name: scale}
  - {typename: str, name: interp_method}
  - {typename: bool, name: align_corners}
  - {typename: int, name: align_mode}
  outputs:
  - {typename: Tensor, name: output, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: InterpolateInferMeta
    param: [x, out_size, size_tensor, scale_tensor, data_layout, out_d, out_h, out_w,
      scale, interp_method, align_corners, align_mode]
  kernel:
    func: [linear_interp]
    param: [x, out_size, size_tensor, scale_tensor, data_layout, out_d, out_h, out_w,
      scale, interp_method, align_corners, align_mode]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {linear_interp: null}
  inplace: null
  backward: linear_interp_grad
- name: linspace
  inputs:
  - {typename: Tensor, name: start, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: stop, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: number, optional: false, no_need_buffer: false}
  attrs:
  - {typename: DataType, name: dtype}
  - {typename: Place, name: place}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: LinspaceInferMeta
    param: [start, stop, number, dtype]
  kernel:
    func: [linspace]
    param: [start, stop, number, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {linspace: null}
  inplace: null
  backward: null
- name: log_softmax
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMetaCheckAxis
    param: [x, axis]
  kernel:
    func: [log_softmax]
    param: [x, axis]
    backend: null
    layout: null
    data_type: null
    dispatch: {log_softmax: null}
  inplace: null
  backward: log_softmax_grad
- name: logcumsumexp
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  - {typename: bool, name: flatten}
  - {typename: bool, name: exclusive}
  - {typename: bool, name: reverse}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CumInferMeta
    param: [x, axis, flatten, exclusive, reverse]
  kernel:
    func: [logcumsumexp]
    param: [x, axis, flatten, exclusive, reverse]
    backend: null
    layout: null
    data_type: null
    dispatch: {logcumsumexp: null}
  inplace: null
  backward: logcumsumexp_grad
- name: logical_and
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [logical_and]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {logical_and: null}
  inplace: null
  backward: null
- name: logical_not
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [logical_not]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {logical_not: null}
  inplace: null
  backward: null
- name: logical_or
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [logical_or]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {logical_or: null}
  inplace: null
  backward: null
- name: logical_xor
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [logical_xor]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {logical_xor: null}
  inplace: null
  backward: null
- name: logsumexp
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: axis}
  - {typename: bool, name: keepdim}
  - {typename: bool, name: reduce_all}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: LogsumexpInferMeta
    param: [x, axis, keepdim, reduce_all]
  kernel:
    func: [logsumexp]
    param: [x, axis, keepdim, reduce_all]
    backend: null
    layout: null
    data_type: null
    dispatch: {logsumexp: null}
  inplace: null
  backward: logsumexp_grad
- name: lstsq
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: rcond, data_type: float}
  - {typename: str, name: driver}
  outputs:
  - {typename: Tensor, name: solution, intermediate: false}
  - {typename: Tensor, name: residuals, intermediate: false}
  - {typename: Tensor, name: rank, intermediate: false}
  - {typename: Tensor, name: singular_values, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: LstsqInferMeta
    param: [x, y, rcond, driver]
  kernel:
    func: [lstsq]
    param: [x, y, rcond, driver]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {lstsq: null}
  inplace: null
  backward: null
- name: lu
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: pivot}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: pivots, intermediate: false}
  - {typename: Tensor, name: infos, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: LUInferMeta
    param: [x, pivot]
  kernel:
    func: [lu]
    param: [x, pivot]
    backend: null
    layout: null
    data_type: null
    dispatch: {lu: null}
  inplace: null
  backward: lu_grad
- name: margin_cross_entropy
  inputs:
  - {typename: Tensor, name: logits, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: return_softmax}
  - {typename: int, name: ring_id}
  - {typename: int, name: rank}
  - {typename: int, name: nranks}
  - {typename: float, name: margin1}
  - {typename: float, name: margin2}
  - {typename: float, name: margin3}
  - {typename: float, name: scale}
  outputs:
  - {typename: Tensor, name: softmax, intermediate: false}
  - {typename: Tensor, name: loss, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MarginCrossEntropyInferMeta
    param: [logits, label, return_softmax, ring_id, rank, nranks, margin1, margin2,
      margin3, scale]
  kernel:
    func: [margin_cross_entropy]
    param: [logits, label, return_softmax, ring_id, rank, nranks, margin1, margin2,
      margin3, scale]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [logits]
      to_complex_flag: [false]
    dispatch: {margin_cross_entropy: null}
  inplace: null
  backward: margin_cross_entropy_grad
- name: matmul
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: transpose_x, default_value: 'false'}
  - {typename: bool, name: transpose_y, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MatmulInferMeta
    param: [x, y, transpose_x, transpose_y]
  kernel:
    func: [matmul]
    param: [x, y, transpose_x, transpose_y]
    backend: null
    layout: null
    data_type: null
    dispatch: {matmul: null}
  inplace: null
  backward: matmul_grad
- name: matrix_nms
  inputs:
  - {typename: Tensor, name: bboxes, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: scores, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: score_threshold}
  - {typename: int, name: nms_top_k}
  - {typename: int, name: keep_top_k}
  - {typename: float, name: post_threshold, default_value: '0.'}
  - {typename: bool, name: use_gaussian, default_value: 'false'}
  - {typename: float, name: gaussian_sigma, default_value: '2.0'}
  - {typename: int, name: background_label, default_value: '0'}
  - {typename: bool, name: normalized, default_value: 'true'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: index, intermediate: false}
  - {typename: Tensor, name: roisnum, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MatrixNMSInferMeta
    param: [bboxes, scores, score_threshold, nms_top_k, keep_top_k, post_threshold,
      use_gaussian, gaussian_sigma, background_label, normalized]
  kernel:
    func: [matrix_nms]
    param: [bboxes, scores, score_threshold, nms_top_k, keep_top_k, post_threshold,
      use_gaussian, gaussian_sigma, background_label, normalized]
    backend: null
    layout: null
    data_type: null
    dispatch: {matrix_nms: null}
  inplace: null
  backward: null
- name: matrix_rank
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: tol}
  - {typename: bool, name: hermitian, default_value: 'false'}
  - {typename: bool, name: use_default_tol, default_value: 'true'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MatrixRankInferMeta
    param: [x, hermitian, use_default_tol]
  kernel:
    func: [matrix_rank]
    param: [x, tol, hermitian, use_default_tol]
    backend: null
    layout: null
    data_type: null
    dispatch: {matrix_rank: null}
  inplace: null
  backward: null
- name: matrix_rank_tol
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: atol_tensor, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: use_default_tol, default_value: 'true'}
  - {typename: bool, name: hermitian, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MatrixRankTolInferMeta
    param: [x, atol_tensor, use_default_tol, hermitian]
  kernel:
    func: [matrix_rank_tol]
    param: [x, atol_tensor, use_default_tol, hermitian]
    backend: null
    layout: null
    data_type: null
    dispatch: {matrix_rank_tol: null}
  inplace: null
  backward: null
- name: max
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: axis, default_value: '{}', data_type: 'std::vector<int64_t>'}
  - {typename: bool, name: keepdim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ReduceIntArrayAxisInferMeta
    param: [x, axis, keepdim]
  kernel:
    func: [max]
    param: [x, axis, keepdim]
    backend: null
    layout: null
    data_type: null
    dispatch: {max: null}
  inplace: null
  backward: max_grad
- name: max_pool2d_with_index
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: kernel_size}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: bool, name: global_pooling}
  - {typename: bool, name: adaptive}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: mask, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MaxPoolWithIndexInferMeta
    param: [x, kernel_size, strides, paddings, global_pooling, adaptive]
  kernel:
    func: [max_pool2d_with_index]
    param: [x, kernel_size, strides, paddings, global_pooling, adaptive]
    backend: null
    layout: null
    data_type: null
    dispatch: {max_pool2d_with_index: null}
  inplace: null
  backward: max_pool2d_with_index_grad
- name: max_pool3d_with_index
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: kernel_size}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: bool, name: global_pooling}
  - {typename: bool, name: adaptive}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: mask, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MaxPoolWithIndexInferMeta
    param: [x, kernel_size, strides, paddings, global_pooling, adaptive]
  kernel:
    func: [max_pool3d_with_index]
    param: [x, kernel_size, strides, paddings, global_pooling, adaptive]
    backend: null
    layout: null
    data_type: null
    dispatch: {max_pool3d_with_index: null}
  inplace: null
  backward: max_pool3d_with_index_grad
- name: maximum
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [maximum]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {maximum: null}
  inplace: null
  backward: maximum_grad
- name: mean
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: axis, default_value: '{}', data_type: 'std::vector<int64_t>'}
  - {typename: bool, name: keepdim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ReduceIntArrayAxisInferMeta
    param: [x, axis, keepdim]
  kernel:
    func: [mean]
    param: [x, axis, keepdim]
    backend: null
    layout: null
    data_type: null
    dispatch: {mean: null}
  inplace: null
  backward: mean_grad
- name: mean_all
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MeanAllInferMeta
    param: [x]
  kernel:
    func: [mean_all]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {mean_all: null}
  inplace: null
  backward: mean_all_grad
- name: merge_selected_rows
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [merge_selected_rows]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch:
      merge_selected_rows:
      - [selected_rows]
      - [selected_rows]
  inplace: null
  backward: null
- name: merged_adam_
  inputs:
  - {typename: 'Tensor[]', name: param, optional: false, no_need_buffer: false}
  - {typename: 'Tensor[]', name: grad, optional: false, no_need_buffer: false}
  - {typename: 'Tensor[]', name: learning_rate, optional: false, no_need_buffer: false}
  - {typename: 'Tensor[]', name: moment1, optional: false, no_need_buffer: false}
  - {typename: 'Tensor[]', name: moment2, optional: false, no_need_buffer: false}
  - {typename: 'Tensor[]', name: beta1_pow, optional: false, no_need_buffer: false}
  - {typename: 'Tensor[]', name: beta2_pow, optional: false, no_need_buffer: false}
  - {typename: 'Tensor[]', name: master_param, optional: true, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: beta1, data_type: float}
  - {typename: Scalar, name: beta2, data_type: float}
  - {typename: Scalar, name: epsilon, data_type: float}
  - {typename: bool, name: multi_precision}
  - {typename: bool, name: use_global_beta_pow}
  outputs:
  - {typename: 'Tensor[]', name: param_out, size: param.size(), intermediate: false}
  - {typename: 'Tensor[]', name: moment1_out, size: param.size(), intermediate: false}
  - {typename: 'Tensor[]', name: moment2_out, size: param.size(), intermediate: false}
  - {typename: 'Tensor[]', name: beta1_pow_out, size: param.size(), intermediate: false}
  - {typename: 'Tensor[]', name: beta2_pow_out, size: param.size(), intermediate: false}
  - {typename: 'Tensor[]', name: master_param_out, size: param.size(), intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MergedAdamInferMeta
    param: [param, grad, learning_rate, moment1, moment2, beta1_pow, beta2_pow, master_param,
      beta1, beta2, epsilon, multi_precision, use_global_beta_pow]
  kernel:
    func: [merged_adam]
    param: [param, grad, learning_rate, moment1, moment2, beta1_pow, beta2_pow, master_param,
      beta1, beta2, epsilon, multi_precision, use_global_beta_pow]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [param]
      to_complex_flag: [false]
    dispatch: {merged_adam: null}
  inplace: {param_out): param, moment1_out): (moment1, moment2_out): (moment2, beta1_pow_out): (beta1_pow,
    beta2_pow_out): (beta2_pow, master_param_out: (master_param}
  backward: null
- name: merged_momentum_
  inputs:
  - {typename: 'Tensor[]', name: param, optional: false, no_need_buffer: false}
  - {typename: 'Tensor[]', name: grad, optional: false, no_need_buffer: false}
  - {typename: 'Tensor[]', name: velocity, optional: false, no_need_buffer: false}
  - {typename: 'Tensor[]', name: learning_rate, optional: false, no_need_buffer: false}
  - {typename: 'Tensor[]', name: master_param, optional: true, no_need_buffer: false}
  attrs:
  - {typename: float, name: mu}
  - {typename: bool, name: use_nesterov, default_value: 'false'}
  - {typename: 'str[]', name: regularization_method, default_value: '{}'}
  - {typename: 'float[]', name: regularization_coeff, default_value: '{}'}
  - {typename: bool, name: multi_precision, default_value: 'false'}
  - {typename: float, name: rescale_grad, default_value: 1.0f}
  outputs:
  - {typename: 'Tensor[]', name: param_out, size: param.size(), intermediate: false}
  - {typename: 'Tensor[]', name: velocity_out, size: param.size(), intermediate: false}
  - {typename: 'Tensor[]', name: master_param_out, size: param.size(), intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MergedMomentumInferMeta
    param: [param, grad, velocity, learning_rate, master_param, mu, use_nesterov,
      regularization_method, regularization_coeff, multi_precision, rescale_grad]
  kernel:
    func: [merged_momentum]
    param: [param, grad, velocity, learning_rate, master_param, mu, use_nesterov,
      regularization_method, regularization_coeff, multi_precision, rescale_grad]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [param]
      to_complex_flag: [false]
    dispatch: {merged_momentum: null}
  inplace: {param_out): param, velocity_out): (velocity, master_param_out: (master_param}
  backward: null
- name: min
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: axis, default_value: '{}', data_type: 'std::vector<int64_t>'}
  - {typename: bool, name: keepdim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ReduceIntArrayAxisInferMeta
    param: [x, axis, keepdim]
  kernel:
    func: [min]
    param: [x, axis, keepdim]
    backend: null
    layout: null
    data_type: null
    dispatch: {min: null}
  inplace: null
  backward: min_grad
- name: minimum
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [minimum]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {minimum: null}
  inplace: null
  backward: minimum_grad
- name: mish
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: lambda}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [mish]
    param: [x, lambda]
    backend: null
    layout: null
    data_type: null
    dispatch: {mish: null}
  inplace: null
  backward: mish_grad
- name: momentum_
  inputs:
  - {typename: Tensor, name: param, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: velocity, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: learning_rate, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: master_param, optional: true, no_need_buffer: false}
  attrs:
  - {typename: float, name: mu}
  - {typename: bool, name: use_nesterov, default_value: 'false'}
  - {typename: str, name: regularization_method, default_value: '""'}
  - {typename: float, name: regularization_coeff, default_value: '0.0'}
  - {typename: bool, name: multi_precision, default_value: 'false'}
  - {typename: float, name: rescale_grad, default_value: 1.0f}
  outputs:
  - {typename: Tensor, name: param_out, intermediate: false}
  - {typename: Tensor, name: velocity_out, intermediate: false}
  - {typename: Tensor, name: master_param_out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MomentumInferMeta
    param: [param, grad, velocity, learning_rate, master_param, mu, use_nesterov,
      regularization_method, regularization_coeff, multi_precision, rescale_grad]
  kernel:
    func: [momentum]
    param: [param, grad, velocity, learning_rate, master_param, mu, use_nesterov,
      regularization_method, regularization_coeff, multi_precision, rescale_grad]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [param]
      to_complex_flag: [false]
    dispatch: {momentum: null}
  inplace: {param_out): param, velocity_out): (velocity, master_param_out: (master_param}
  backward: null
- name: multiclass_nms3
  inputs:
  - {typename: Tensor, name: bboxes, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: scores, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: rois_num, optional: true, no_need_buffer: false}
  attrs:
  - {typename: float, name: score_threshold}
  - {typename: int, name: nms_top_k}
  - {typename: int, name: keep_top_k}
  - {typename: float, name: nms_threshold, default_value: '0.3'}
  - {typename: bool, name: normalized, default_value: 'true'}
  - {typename: float, name: nms_eta, default_value: '1.0'}
  - {typename: int, name: background_label, default_value: '0'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: index, intermediate: false}
  - {typename: Tensor, name: nms_rois_num, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MultiClassNMSInferMeta
    param: [bboxes, scores, rois_num, score_threshold, nms_top_k, keep_top_k, nms_threshold,
      normalized, nms_eta, background_label]
  kernel:
    func: [multiclass_nms3]
    param: [bboxes, scores, rois_num, score_threshold, nms_top_k, keep_top_k, nms_threshold,
      normalized, nms_eta, background_label]
    backend: null
    layout: null
    data_type: null
    dispatch: {multiclass_nms3: null}
  inplace: null
  backward: null
- name: multiply
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [multiply, multiply_sr]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch:
      multiply:
      - [dense, dense]
      - [dense]
      multiply_sr:
      - [selected_rows, dense]
      - [selected_rows]
  inplace: null
  backward: multiply_grad
- name: nearest_interp
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_size, optional: true, no_need_buffer: false}
  - {typename: 'Tensor[]', name: size_tensor, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: scale_tensor, optional: true, no_need_buffer: false}
  attrs:
  - {typename: str, name: data_layout}
  - {typename: int, name: out_d}
  - {typename: int, name: out_h}
  - {typename: int, name: out_w}
  - {typename: 'float[]', name: scale}
  - {typename: str, name: interp_method}
  - {typename: bool, name: align_corners}
  - {typename: int, name: align_mode}
  outputs:
  - {typename: Tensor, name: output, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: InterpolateInferMeta
    param: [x, out_size, size_tensor, scale_tensor, data_layout, out_d, out_h, out_w,
      scale, interp_method, align_corners, align_mode]
  kernel:
    func: [nearest_interp]
    param: [x, out_size, size_tensor, scale_tensor, data_layout, out_d, out_h, out_w,
      scale, interp_method, align_corners, align_mode]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {nearest_interp: null}
  inplace: null
  backward: nearest_interp_grad
- name: nms
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: threshold}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: NMSInferMeta
    param: [x, threshold]
  kernel:
    func: [nms]
    param: [x, threshold]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {nms: null}
  inplace: null
  backward: null
- name: nonzero
  inputs:
  - {typename: Tensor, name: condition, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: NonZeroInferMeta
    param: [condition]
  kernel:
    func: [nonzero]
    param: [condition]
    backend: null
    layout: null
    data_type: null
    dispatch: {nonzero: null}
  inplace: null
  backward: null
- name: norm
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  - {typename: float, name: epsilon}
  - {typename: bool, name: is_test}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: norm, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: NormInferMeta
    param: [x, axis, epsilon, is_test]
  kernel:
    func: [norm]
    param: [x, axis, epsilon, is_test]
    backend: null
    layout: null
    data_type: null
    dispatch: {norm: null}
  inplace: null
  backward: norm_grad
- name: not_equal
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CompareInferMeta
    param: [x, y]
  kernel:
    func: [not_equal]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {not_equal: null}
  inplace: null
  backward: null
- name: numel
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: size, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: NumelInferMeta
    param: [x]
  kernel:
    func: [numel]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {numel: null}
  inplace: null
  backward: null
- name: one_hot
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar(int), name: num_classes, data_type: int}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: OneHotInferMeta
    param: [x, num_classes]
  kernel:
    func: [one_hot]
    param: [x, num_classes]
    backend: null
    layout: null
    data_type: null
    dispatch: {one_hot: null}
  inplace: null
  backward: null
- name: ones
  inputs: []
  attrs:
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  - {typename: Place, name: place, default_value: CPUPlace()}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  invoke: {func: full, args: 'shape, 1, dtype, place'}
  backward: null
- name: ones_like
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: DataType, name: dtype, default_value: 'DataType::UNDEFINED'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  invoke: {func: full_like, args: 'x, 1, dtype, place'}
  backward: null
- name: p_norm
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: porder}
  - {typename: int, name: axis}
  - {typename: float, name: epsilon}
  - {typename: bool, name: keepdim}
  - {typename: bool, name: asvector, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: PNormInferMeta
    param: [x, porder, axis, epsilon, keepdim, asvector]
  kernel:
    func: [p_norm]
    param: [x, porder, axis, epsilon, keepdim, asvector]
    backend: null
    layout: null
    data_type: null
    dispatch: {p_norm: null}
  inplace: null
  backward: p_norm_grad
- name: pad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: paddings}
  - {typename: Scalar, name: pad_value, data_type: float}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: PadInferMeta
    param: [x, paddings, pad_value]
  kernel:
    func: [pad]
    param: [x, paddings, pad_value]
    backend: null
    layout: null
    data_type: null
    dispatch: {pad: null}
  inplace: null
  backward: pad_grad
- name: pad3d
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: paddings, data_type: 'std::vector<int64_t>'}
  - {typename: str, name: mode}
  - {typename: float, name: pad_value}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: Pad3dInferMeta
    param: [x, paddings, mode, pad_value, data_format]
  kernel:
    func: [pad3d]
    param: [x, paddings, mode, pad_value, data_format]
    backend: null
    layout: null
    data_type: null
    dispatch: {pad3d: null}
  inplace: null
  backward: pad3d_grad
- name: pool2d
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: kernel_size, data_type: 'std::vector<int64_t>'}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: bool, name: ceil_mode}
  - {typename: bool, name: exclusive}
  - {typename: str, name: data_format}
  - {typename: str, name: pooling_type}
  - {typename: bool, name: global_pooling}
  - {typename: bool, name: adaptive}
  - {typename: str, name: padding_algorithm}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: Pool2DInferMeta
    param: [x, kernel_size, strides, paddings, ceil_mode, exclusive, data_format,
      pooling_type, global_pooling, adaptive, padding_algorithm]
  kernel:
    func: [pool2d]
    param: [x, kernel_size, strides, paddings, ceil_mode, exclusive, data_format,
      pooling_type, global_pooling, adaptive, padding_algorithm]
    backend: null
    layout: null
    data_type: null
    dispatch: {pool2d: null}
  inplace: null
  backward: pool2d_grad
- name: pool3d
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: kernel_size}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: bool, name: ceil_mode}
  - {typename: bool, name: exclusive}
  - {typename: str, name: data_format}
  - {typename: str, name: pooling_type}
  - {typename: bool, name: global_pooling}
  - {typename: bool, name: adaptive}
  - {typename: str, name: padding_algorithm}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: PoolInferMeta
    param: [x, kernel_size, strides, paddings, ceil_mode, exclusive, data_format,
      pooling_type, global_pooling, adaptive, padding_algorithm]
  kernel:
    func: [pool3d]
    param: [x, kernel_size, strides, paddings, ceil_mode, exclusive, data_format,
      pooling_type, global_pooling, adaptive, padding_algorithm]
    backend: null
    layout: null
    data_type: null
    dispatch: {pool3d: null}
  inplace: null
  backward: pool3d_grad
- name: pow
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: y, data_type: float}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [pow]
    param: [x, y]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {pow: null}
  inplace: null
  backward: pow_grad
- name: prelu
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: alpha, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: data_format}
  - {typename: str, name: mode}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: PReluInferMeta
    param: [x, alpha, data_format, mode]
  kernel:
    func: [prelu]
    param: [x, alpha, data_format, mode]
    backend: null
    layout: null
    data_type: null
    dispatch: {prelu: null}
  inplace: null
  backward: prelu_grad
- name: prior_box
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: image, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'float[]', name: min_sizes}
  - {typename: 'float[]', name: aspect_ratios}
  - {typename: 'float[]', name: variances}
  - {typename: 'float[]', name: max_sizes, default_value: '{}'}
  - {typename: bool, name: flip, default_value: 'true'}
  - {typename: bool, name: clip, default_value: 'true'}
  - {typename: float, name: step_w, default_value: '0.0'}
  - {typename: float, name: step_h, default_value: '0.0'}
  - {typename: float, name: offset, default_value: '0.5'}
  - {typename: bool, name: min_max_aspect_ratios_order, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: var, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: PriorBoxInferMeta
    param: [input, image, min_sizes, aspect_ratios, variances, max_sizes, flip, clip,
      step_w, step_h, offset, min_max_aspect_ratios_order]
  kernel:
    func: [prior_box]
    param: [input, image, min_sizes, aspect_ratios, variances, max_sizes, flip, clip,
      step_w, step_h, offset, min_max_aspect_ratios_order]
    backend: null
    layout: null
    data_type: null
    dispatch: {prior_box: null}
  inplace: null
  backward: null
- name: prod
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: dims, data_type: 'std::vector<int64_t>'}
  - {typename: bool, name: keep_dim}
  - {typename: bool, name: reduce_all}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ReduceIntArrayAxisInferMetaBase
    param: [x, dims, keep_dim, reduce_all]
  kernel:
    func: [prod_raw]
    param: [x, dims, keep_dim, reduce_all]
    backend: null
    layout: null
    data_type: null
    dispatch: {prod_raw: null}
  inplace: null
  backward: prod_grad
- name: psroi_pool
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: boxes, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: boxes_num, optional: true, no_need_buffer: false}
  attrs:
  - {typename: int, name: pooled_height}
  - {typename: int, name: pooled_width}
  - {typename: int, name: output_channels}
  - {typename: float, name: spatial_scale}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: PsroiPoolInferMeta
    param: [x, boxes, boxes_num, pooled_height, pooled_width, output_channels, spatial_scale]
  kernel:
    func: [psroi_pool]
    param: [x, boxes, boxes_num, pooled_height, pooled_width, output_channels, spatial_scale]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {psroi_pool: null}
  inplace: null
  backward: psroi_pool_grad
- name: randint
  inputs: []
  attrs:
  - {typename: int, name: low}
  - {typename: int, name: high}
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  - {typename: DataType, name: dtype, default_value: 'DataType::INT64'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: RandintInferMeta
    param: [low, high, shape, dtype]
  kernel:
    func: [randint]
    param: [low, high, shape, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {randint: null}
  inplace: null
  backward: null
- name: randperm
  inputs: []
  attrs:
  - {typename: int, name: n}
  - {typename: DataType, name: dtype}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: RandpermInferMeta
    param: [n, dtype]
  kernel:
    func: [randperm]
    param: [n, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {randperm: null}
  inplace: null
  backward: null
- name: relu6
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [relu6]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {relu6: null}
  inplace: null
  backward: relu6_grad
- name: remainder
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [remainder]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {remainder: null}
  inplace: {out: x}
  backward: null
- name: repeat_interleave
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: repeats}
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: RepeatInterleaveInferMeta
    param: [x, repeats, axis]
  kernel:
    func: [repeat_interleave]
    param: [x, repeats, axis]
    backend: null
    layout: null
    data_type: null
    dispatch: {repeat_interleave: null}
  inplace: null
  backward: repeat_interleave_grad
- name: repeat_interleave_with_tensor_index
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: repeats, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: RepeatInterleaveWithTensorIndexInferMeta
    param: [x, repeats, axis]
  kernel:
    func: [repeat_interleave_with_tensor_index]
    param: [x, repeats, axis]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {repeat_interleave_with_tensor_index: null}
  inplace: null
  backward: repeat_interleave_with_tensor_index_grad
- name: reshape
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: xshape, intermediate: true}
  no_need_buffer: null
  infer_meta:
    func: ReshapeWithXShapeInferMeta
    param: [x, shape]
  kernel:
    func: [reshape_with_xshape]
    param: [x, shape]
    backend: null
    layout: null
    data_type: null
    dispatch: {reshape_with_xshape: null}
  inplace: {out: x}
  backward: reshape_grad
- name: reverse
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: axis, data_type: 'std::vector<int64_t>'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ReverseInferMeta
    param: [x, axis]
  kernel:
    func: [reverse]
    param: [x, axis]
    backend: null
    layout: null
    data_type: null
    dispatch: {reverse: null}
  inplace: null
  backward: reverse_grad
- name: rmsprop_
  inputs:
  - {typename: Tensor, name: param, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: mean_square, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: moment, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: learning_rate, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: mean_grad, optional: true, no_need_buffer: false}
  attrs:
  - {typename: float, name: epsilon}
  - {typename: float, name: decay}
  - {typename: float, name: momentum}
  - {typename: bool, name: centered}
  outputs:
  - {typename: Tensor, name: param_out, intermediate: false}
  - {typename: Tensor, name: moment_out, intermediate: false}
  - {typename: Tensor, name: mean_square_out, intermediate: false}
  - {typename: Tensor, name: mean_grad_out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: RmspropInferMeta
    param: [param, mean_square, grad, moment, learning_rate, mean_grad, epsilon, decay,
      momentum, centered]
  kernel:
    func: [rmsprop, rmsprop_dense_param_sparse_grad]
    param: [param, mean_square, grad, moment, learning_rate, mean_grad, epsilon, decay,
      momentum, centered]
    backend: null
    layout: null
    data_type: null
    dispatch:
      rmsprop:
      - [dense, dense, dense, dense, dense, dense]
      - [dense, dense, dense, dense]
      rmsprop_dense_param_sparse_grad:
      - [dense, dense, selected_rows, dense, dense, dense]
      - [dense, dense, dense, dense]
  inplace: {param_out): param, moment_out): (moment, mean_square_out): (mean_square,
    mean_grad_out: (mean_grad}
  backward: null
- name: rnn
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: 'Tensor[]', name: pre_state, optional: false, no_need_buffer: false}
  - {typename: 'Tensor[]', name: weight_list, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: sequence_length, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: dropout_state_in, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: dropout_prob, default_value: '0.0'}
  - {typename: bool, name: is_bidirec, default_value: 'false'}
  - {typename: int, name: input_size, default_value: '10'}
  - {typename: int, name: hidden_size, default_value: '100'}
  - {typename: int, name: num_layers, default_value: '1'}
  - {typename: str, name: mode, default_value: '"RNN_TANH"'}
  - {typename: int, name: seed, default_value: '0'}
  - {typename: bool, name: is_test, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: dropout_state_out, intermediate: false}
  - {typename: 'Tensor[]', name: state, size: pre_state.size(), intermediate: false}
  - {typename: Tensor, name: reserve, intermediate: true}
  no_need_buffer: null
  infer_meta:
    func: RnnInferMeta
    param: [x, pre_state, weight_list, sequence_length, dropout_prob, is_bidirec,
      input_size, hidden_size, num_layers, mode, seed, is_test]
  kernel:
    func: [rnn]
    param: [x, pre_state, weight_list, sequence_length, dropout_prob, is_bidirec,
      input_size, hidden_size, num_layers, mode, seed, is_test]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {rnn: null}
  inplace: null
  backward: rnn_grad
- name: roi_align
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: boxes, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: boxes_num, optional: true, no_need_buffer: false}
  attrs:
  - {typename: int, name: pooled_height}
  - {typename: int, name: pooled_width}
  - {typename: float, name: spatial_scale}
  - {typename: int, name: sampling_ratio}
  - {typename: bool, name: aligned}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: RoiAlignInferMeta
    param: [x, boxes, boxes_num, pooled_height, pooled_width, spatial_scale, sampling_ratio,
      aligned]
  kernel:
    func: [roi_align]
    param: [x, boxes, boxes_num, pooled_height, pooled_width, spatial_scale, sampling_ratio,
      aligned]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {roi_align: null}
  inplace: null
  backward: roi_align_grad
- name: roi_pool
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: boxes, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: boxes_num, optional: true, no_need_buffer: false}
  attrs:
  - {typename: int, name: pooled_height}
  - {typename: int, name: pooled_width}
  - {typename: float, name: spatial_scale}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: arg_max, intermediate: true}
  no_need_buffer: null
  infer_meta:
    func: RoiPoolInferMeta
    param: [x, boxes, boxes_num, pooled_height, pooled_width, spatial_scale]
  kernel:
    func: [roi_pool]
    param: [x, boxes, boxes_num, pooled_height, pooled_width, spatial_scale]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {roi_pool: null}
  inplace: null
  backward: roi_pool_grad
- name: scale
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: scale, data_type: float}
  - {typename: float, name: bias}
  - {typename: bool, name: bias_after_scale}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [scale, scale_sr]
    param: [x, scale, bias, bias_after_scale]
    backend: null
    layout: null
    data_type: null
    dispatch:
      scale:
      - [dense]
      - [dense]
      scale_sr:
      - [selected_rows]
      - [selected_rows]
  inplace: {out: x}
  backward: scale_grad
- name: segment_pool
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: segment_ids, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: pooltype}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: summed_ids, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: SegmentPoolInferMeta
    param: [x, segment_ids, pooltype]
  kernel:
    func: [segment_pool]
    param: [x, segment_ids, pooltype]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {segment_pool: null}
  inplace: null
  backward: segment_pool_grad
- name: send_u_recv
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: src_index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: dst_index, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: reduce_op, default_value: '"SUM"'}
  - {typename: IntArray, name: out_size, default_value: '{0}', data_type: 'std::vector<int64_t>'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: dst_count, intermediate: true}
  no_need_buffer: null
  infer_meta:
    func: SendURecvInferMeta
    param: [x, src_index, dst_index, reduce_op, out_size]
  kernel:
    func: [send_u_recv]
    param: [x, src_index, dst_index, reduce_op, out_size]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {send_u_recv: null}
  inplace: null
  backward: send_u_recv_grad
- name: send_ue_recv
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: src_index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: dst_index, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: message_op}
  - {typename: str, name: reduce_op}
  - {typename: IntArray, name: out_size, data_type: 'std::vector<int64_t>'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: dst_count, intermediate: true}
  no_need_buffer: null
  infer_meta:
    func: SendUERecvInferMeta
    param: [x, y, src_index, dst_index, message_op, reduce_op, out_size]
  kernel:
    func: [send_ue_recv]
    param: [x, y, src_index, dst_index, message_op, reduce_op, out_size]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {send_ue_recv: null}
  inplace: null
  backward: send_ue_recv_grad
- name: sgd_
  inputs:
  - {typename: Tensor, name: param, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: learning_rate, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: master_param, optional: true, no_need_buffer: false}
  attrs:
  - {typename: bool, name: multi_precision}
  outputs:
  - {typename: Tensor, name: param_out, intermediate: false}
  - {typename: Tensor, name: master_param_out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: SgdInferMeta
    param: [param, learning_rate, grad, master_param, multi_precision]
  kernel:
    func: [sgd, sgd_dense_param_sparse_grad, sgd_sparse_param_sparse_grad]
    param: [param, learning_rate, grad, master_param, multi_precision]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [param]
      to_complex_flag: [false]
    dispatch:
      sgd:
      - [dense, dense, dense, dense]
      - [dense, dense]
      sgd_dense_param_sparse_grad:
      - [dense, dense, selected_rows, dense]
      - [dense, dense]
      sgd_sparse_param_sparse_grad:
      - [selected_rows, dense, selected_rows, selected_rows]
      - [selected_rows, selected_rows]
  inplace: {param_out): param, master_param_out: (master_param}
  backward: null
- name: shape
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ShapeInferMeta
    param: [input]
  kernel:
    func: [shape, shape_sr]
    param: [input]
    backend: null
    layout: null
    data_type: null
    dispatch:
      shape:
      - [dense]
      - [dense]
      shape_sr:
      - [selected_rows]
      - [selected_rows]
  inplace: null
  backward: null
- name: sigmoid_cross_entropy_with_logits
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: normalize}
  - {typename: int, name: ignore_index}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: SigmoidCrossEntropyWithLogitsInferMeta
    param: [x, label, normalize, ignore_index]
  kernel:
    func: [sigmoid_cross_entropy_with_logits]
    param: [x, label, normalize, ignore_index]
    backend: null
    layout: null
    data_type: null
    dispatch: {sigmoid_cross_entropy_with_logits: null}
  inplace: null
  backward: sigmoid_cross_entropy_with_logits_grad
- name: sign
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [sign]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {sign: null}
  inplace: null
  backward: sign_grad
- name: slice
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: axes}
  - {typename: IntArray, name: starts, data_type: 'std::vector<int64_t>'}
  - {typename: IntArray, name: ends, data_type: 'std::vector<int64_t>'}
  - {typename: 'int64_t[]', name: infer_flags}
  - {typename: 'int64_t[]', name: decrease_axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: SliceRawInferMeta
    param: [input, axes, starts, ends, infer_flags, decrease_axis]
  kernel:
    func: [slice]
    param: [input, axes, starts, ends, infer_flags, decrease_axis]
    backend: null
    layout: null
    data_type: null
    dispatch: {slice: null}
  inplace: null
  backward: slice_grad
- name: slogdet
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [slogdet]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {slogdet: null}
  inplace: null
  backward: slogdet_grad
- name: softmax
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: SoftmaxInferMeta
    param: [x, axis]
  kernel:
    func: [softmax]
    param: [x, axis]
    backend: null
    layout: null
    data_type: null
    dispatch: {softmax: null}
  inplace: {out: x}
  backward: softmax_grad
- name: spectral_norm
  inputs:
  - {typename: Tensor, name: weight, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: u, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: v, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: dim}
  - {typename: int, name: power_iters}
  - {typename: float, name: eps}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: SpectralNormInferMeta
    param: [weight, u, v, dim, power_iters, eps]
  kernel:
    func: [spectral_norm]
    param: [weight, u, v, dim, power_iters, eps]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [weight]
      to_complex_flag: [false]
    dispatch: {spectral_norm: null}
  inplace: null
  backward: spectral_norm_grad
- name: split
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: sections, data_type: 'std::vector<int64_t>'}
  - {typename: Scalar(int), name: axis, data_type: int}
  outputs:
  - {typename: 'Tensor[]', name: out, size: sections.size(), intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: SplitInferMeta
    param: [x, sections, axis]
  kernel:
    func: [split]
    param: [x, sections, axis]
    backend: null
    layout: null
    data_type: null
    dispatch: {split: null}
  inplace: null
  backward: split_grad
- name: split_with_num
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: num}
  - {typename: Scalar(int), name: axis, data_type: int}
  outputs:
  - {typename: 'Tensor[]', name: out, size: num, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: SplitWithNumInferMeta
    param: [x, num, axis]
  kernel:
    func: [split_with_num]
    param: [x, num, axis]
    backend: null
    layout: null
    data_type: null
    dispatch: {split_with_num: null}
  inplace: null
  backward: split_with_num_grad
- name: squared_l2_norm
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: SquaredL2NormInferMeta
    param: [x]
  kernel:
    func: [squared_l2_norm]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {squared_l2_norm: null}
  inplace: null
  backward: squared_l2_norm_grad
- name: stack
  inputs:
  - {typename: 'Tensor[]', name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: StackInferMeta
    param: [x, axis]
  kernel:
    func: [stack]
    param: [x, axis]
    backend: null
    layout: null
    data_type: null
    dispatch: {stack: null}
  inplace: null
  backward: stack_grad
- name: strided_slice
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: axes}
  - {typename: IntArray, name: starts, data_type: 'std::vector<int64_t>'}
  - {typename: IntArray, name: ends, data_type: 'std::vector<int64_t>'}
  - {typename: IntArray, name: strides, data_type: 'std::vector<int64_t>'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: StridedSliceInferMeta
    param: [x, axes, starts, ends, strides]
  kernel:
    func: [strided_slice]
    param: [x, axes, starts, ends, strides]
    backend: null
    layout: null
    data_type: null
    dispatch: {strided_slice: null}
  inplace: null
  backward: strided_slice_grad
- name: subtract
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  kernel:
    func: [subtract]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {subtract: null}
  inplace: {out: x}
  backward: subtract_grad
- name: sum
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: axis, default_value: '{}', data_type: 'std::vector<int64_t>'}
  - {typename: DataType, name: dtype, default_value: 'DataType::UNDEFINED'}
  - {typename: bool, name: keepdim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: SumInferMeta
    param: [x, axis, dtype, keepdim]
  kernel:
    func: [sum]
    param: [x, axis, dtype, keepdim]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {sum: null}
  inplace: null
  backward: sum_grad
- name: swish
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [swish]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {swish: null}
  inplace: null
  backward: swish_grad
- name: sync_batch_norm_
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: mean, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: variance, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: scale, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: bias, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: is_test}
  - {typename: float, name: momentum}
  - {typename: float, name: epsilon}
  - {typename: str, name: data_layout}
  - {typename: bool, name: use_global_stats}
  - {typename: bool, name: trainable_statistics}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: mean_out, intermediate: false}
  - {typename: Tensor, name: variance_out, intermediate: false}
  - {typename: Tensor, name: saved_mean, intermediate: false}
  - {typename: Tensor, name: saved_variance, intermediate: false}
  - {typename: Tensor, name: reserve_space, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: BatchNormInferMeta
    param: [x, mean, variance, scale, bias, is_test, momentum, epsilon, data_layout,
      use_global_stats, trainable_statistics]
  kernel:
    func: [sync_batch_norm]
    param: [x, mean, variance, scale, bias, is_test, momentum, epsilon, data_layout,
      use_global_stats, trainable_statistics]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {sync_batch_norm: null}
  inplace: {mean_out): mean, variance_out: (variance}
  backward: sync_batch_norm_grad
- name: temporal_shift
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: seg_num}
  - {typename: float, name: shift_ratio}
  - {typename: str, name: data_format_str}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: TemporalShiftInferMeta
    param: [x, seg_num, shift_ratio, data_format_str]
  kernel:
    func: [temporal_shift]
    param: [x, seg_num, shift_ratio, data_format_str]
    backend: null
    layout: null
    data_type: null
    dispatch: {temporal_shift: null}
  inplace: null
  backward: temporal_shift_grad
- name: tile
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: repeat_times, data_type: 'std::vector<int64_t>'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: TileInferMeta
    param: [x, repeat_times]
  kernel:
    func: [tile]
    param: [x, repeat_times]
    backend: null
    layout: null
    data_type: null
    dispatch: {tile: null}
  inplace: null
  backward: tile_grad
- name: transpose
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: perm}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: TransposeInferMeta
    param: [x, perm]
  kernel:
    func: [transpose]
    param: [x, perm]
    backend: null
    layout: null
    data_type: null
    dispatch: {transpose: null}
  inplace: null
  backward: transpose_grad
- name: triangular_solve
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: upper}
  - {typename: bool, name: transpose}
  - {typename: bool, name: unitriangular}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: TriangularSolveInferMeta
    param: [x, y, upper, transpose, unitriangular]
  kernel:
    func: [triangular_solve]
    param: [x, y, upper, transpose, unitriangular]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {triangular_solve: null}
  inplace: null
  backward: triangular_solve_grad
- name: tril
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: diagonal}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: TrilInferMeta
    param: [x, diagonal]
  kernel:
    func: [tril]
    param: [x, diagonal]
    backend: null
    layout: null
    data_type: null
    dispatch: {tril: null}
  inplace: null
  backward: tril_grad
- name: tril_indices
  inputs: []
  attrs:
  - {typename: int, name: rows}
  - {typename: int, name: cols}
  - {typename: int, name: offset}
  - {typename: DataType, name: dtype}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: TrilIndicesInferMeta
    param: [rows, cols, offset, dtype]
  kernel:
    func: [tril_indices]
    param: [rows, cols, offset, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {tril_indices: null}
  inplace: null
  backward: null
- name: trilinear_interp
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_size, optional: true, no_need_buffer: false}
  - {typename: 'Tensor[]', name: size_tensor, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: scale_tensor, optional: true, no_need_buffer: false}
  attrs:
  - {typename: str, name: data_layout}
  - {typename: int, name: out_d}
  - {typename: int, name: out_h}
  - {typename: int, name: out_w}
  - {typename: 'float[]', name: scale}
  - {typename: str, name: interp_method}
  - {typename: bool, name: align_corners}
  - {typename: int, name: align_mode}
  outputs:
  - {typename: Tensor, name: output, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: InterpolateInferMeta
    param: [x, out_size, size_tensor, scale_tensor, data_layout, out_d, out_h, out_w,
      scale, interp_method, align_corners, align_mode]
  kernel:
    func: [trilinear_interp]
    param: [x, out_size, size_tensor, scale_tensor, data_layout, out_d, out_h, out_w,
      scale, interp_method, align_corners, align_mode]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {trilinear_interp: null}
  inplace: null
  backward: trilinear_interp_grad
- name: triu
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: diagonal}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: TriuInferMeta
    param: [x, diagonal]
  kernel:
    func: [triu]
    param: [x, diagonal]
    backend: null
    layout: null
    data_type: null
    dispatch: {triu: null}
  inplace: null
  backward: triu_grad
- name: triu_indices
  inputs: []
  attrs:
  - {typename: int, name: row}
  - {typename: int, name: col}
  - {typename: int, name: offset}
  - {typename: DataType, name: dtype}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: TriuIndicesInferMeta
    param: [row, col, offset, dtype]
  kernel:
    func: [triu_indices]
    param: [row, col, offset, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {triu_indices: null}
  inplace: null
  backward: null
- name: truncated_gaussian_random
  inputs: []
  attrs:
  - {typename: 'int[]', name: shape}
  - {typename: float, name: mean}
  - {typename: float, name: std}
  - {typename: int, name: seed}
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: TruncatedGaussianRandomInferMeta
    param: [shape, mean, std, seed, dtype]
  kernel:
    func: [truncated_gaussian_random]
    param: [shape, mean, std, seed, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {truncated_gaussian_random: null}
  inplace: null
  backward: null
- name: unbind
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: 'Tensor[]', name: out, size: 'axis<0 ? input.dims()[input.dims().size()+axis]:input.dims()[axis]',
    intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnbindInferMeta
    param: [input, axis]
  kernel:
    func: [unbind]
    param: [input, axis]
    backend: null
    layout: null
    data_type: null
    dispatch: {unbind: null}
  inplace: null
  backward: unbind_grad
- name: uniform
  inputs: []
  attrs:
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  - {typename: DataType, name: dtype}
  - {typename: Scalar, name: min, data_type: float}
  - {typename: Scalar, name: max, data_type: float}
  - {typename: int, name: seed}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UniformRandomInferMeta
    param: [shape, dtype]
  kernel:
    func: [uniform]
    param: [shape, dtype, min, max, seed]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {uniform: null}
  inplace: null
  backward: null
- name: uniform_inplace
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: min}
  - {typename: float, name: max}
  - {typename: int, name: seed}
  - {typename: int, name: diag_num}
  - {typename: int, name: diag_step}
  - {typename: float, name: diag_val}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UniformRandomInplaceInferMeta
    param: [x, min, max, seed, diag_num, diag_step, diag_val]
  kernel:
    func: [uniform_inplace]
    param: [x, min, max, seed, diag_num, diag_step, diag_val]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {uniform_inplace: null}
  inplace: {out: x}
  backward: uniform_inplace_grad
- name: unique
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: return_index}
  - {typename: bool, name: return_inverse}
  - {typename: bool, name: return_counts}
  - {typename: 'int[]', name: axis}
  - {typename: DataType, name: dtype, default_value: 'DataType::INT64'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: indices, intermediate: false}
  - {typename: Tensor, name: inverse, intermediate: false}
  - {typename: Tensor, name: counts, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UniqueInferMeta
    param: [x, return_index, return_inverse, return_counts, axis, dtype]
  kernel:
    func: [unique]
    param: [x, return_index, return_inverse, return_counts, axis, dtype]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {unique: null}
  inplace: null
  backward: null
- name: unique_consecutive
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: return_inverse}
  - {typename: bool, name: return_counts}
  - {typename: 'int[]', name: axis}
  - {typename: int, name: dtype}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  - {typename: Tensor, name: index, intermediate: false}
  - {typename: Tensor, name: counts, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UniqueConsecutiveInferMeta
    param: [x, return_inverse, return_counts, axis, dtype]
  kernel:
    func: [unique_consecutive]
    param: [x, return_inverse, return_counts, axis, dtype]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {unique_consecutive: null}
  inplace: null
  backward: null
- name: unpool
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: indices, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: ksize}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: padding}
  - {typename: IntArray, name: output_size, data_type: 'std::vector<int64_t>'}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnpoolInferMeta
    param: [x, indices, ksize, strides, padding, output_size, data_format]
  kernel:
    func: [unpool]
    param: [x, indices, ksize, strides, padding, output_size, data_format]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {unpool: null}
  inplace: null
  backward: unpool_grad
- name: unpool3d
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: indices, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: ksize}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: padding}
  - {typename: 'int[]', name: output_size}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: Unpool3dInferMeta
    param: [x, indices, ksize, strides, padding, output_size, data_format]
  kernel:
    func: [unpool3d]
    param: [x, indices, ksize, strides, padding, output_size, data_format]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {unpool3d: null}
  inplace: null
  backward: unpool3d_grad
- name: update_loss_scaling_
  inputs:
  - {typename: 'Tensor[]', name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: found_infinite, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: prev_loss_scaling, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: in_good_steps, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: in_bad_steps, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: incr_every_n_steps}
  - {typename: int, name: decr_every_n_nan_or_inf}
  - {typename: float, name: incr_ratio}
  - {typename: float, name: decr_ratio}
  - {typename: Scalar, name: stop_update, data_type: float}
  outputs:
  - {typename: 'Tensor[]', name: out, size: x.size(), intermediate: false}
  - {typename: Tensor, name: loss_scaling, intermediate: false}
  - {typename: Tensor, name: out_good_steps, intermediate: false}
  - {typename: Tensor, name: out_bad_steps, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UpdateLossScalingInferMeta
    param: [x, found_infinite, prev_loss_scaling, in_good_steps, in_bad_steps]
  kernel:
    func: [update_loss_scaling]
    param: [x, found_infinite, prev_loss_scaling, in_good_steps, in_bad_steps, incr_every_n_steps,
      decr_every_n_nan_or_inf, incr_ratio, decr_ratio, stop_update]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {update_loss_scaling: null}
  inplace: {out): x, loss_scaling): (prev_loss_scaling, out_good_steps): (in_good_steps,
    out_bad_steps: (in_bad_steps}
  backward: null
- name: warpctc
  inputs:
  - {typename: Tensor, name: logits, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: logits_length, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: labels_length, optional: true, no_need_buffer: false}
  attrs:
  - {typename: int, name: blank}
  - {typename: bool, name: norm_by_times}
  outputs:
  - {typename: Tensor, name: loss, intermediate: false}
  - {typename: Tensor, name: warpctcgrad, intermediate: true}
  no_need_buffer: null
  infer_meta:
    func: WarpctcInferMeta
    param: [logits, label, logits_length, labels_length, blank, norm_by_times]
  kernel:
    func: [warpctc]
    param: [logits, label, logits_length, labels_length, blank, norm_by_times]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [logits]
      to_complex_flag: [false]
    dispatch: {warpctc: null}
  inplace: null
  backward: warpctc_grad
- name: yolo_box
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: img_size, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: anchors}
  - {typename: int, name: class_num}
  - {typename: float, name: conf_thresh}
  - {typename: int, name: downsample_ratio}
  - {typename: bool, name: clip_bbox}
  - {typename: float, name: scale_x_y, default_value: '1.0'}
  - {typename: bool, name: iou_aware, default_value: 'false'}
  - {typename: float, name: iou_aware_factor, default_value: '0.5'}
  outputs:
  - {typename: Tensor, name: boxes, intermediate: false}
  - {typename: Tensor, name: scores, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: YoloBoxInferMeta
    param: [x, img_size, anchors, class_num, conf_thresh, downsample_ratio, clip_bbox,
      scale_x_y, iou_aware, iou_aware_factor]
  kernel:
    func: [yolo_box]
    param: [x, img_size, anchors, class_num, conf_thresh, downsample_ratio, clip_bbox,
      scale_x_y, iou_aware, iou_aware_factor]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {yolo_box: null}
  inplace: null
  backward: null
- name: yolo_loss
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: gt_box, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: gt_label, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: gt_score, optional: true, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: anchors}
  - {typename: 'int[]', name: anchor_mask}
  - {typename: int, name: class_num}
  - {typename: float, name: ignore_thresh}
  - {typename: int, name: downsample_ratio}
  - {typename: bool, name: use_label_smooth, default_value: 'true'}
  - {typename: float, name: scale_x_y, default_value: '1.0'}
  outputs:
  - {typename: Tensor, name: loss, intermediate: false}
  - {typename: Tensor, name: objectness_mask, intermediate: false}
  - {typename: Tensor, name: gt_match_mask, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: YoloLossInferMeta
    param: [x, gt_box, gt_label, gt_score, anchors, anchor_mask, class_num, ignore_thresh,
      downsample_ratio, use_label_smooth, scale_x_y]
  kernel:
    func: [yolo_loss]
    param: [x, gt_box, gt_label, gt_score, anchors, anchor_mask, class_num, ignore_thresh,
      downsample_ratio, use_label_smooth, scale_x_y]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {yolo_loss: null}
  inplace: null
  backward: yolo_loss_grad
- name: zeros
  inputs: []
  attrs:
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  - {typename: Place, name: place, default_value: CPUPlace()}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  invoke: {func: full, args: 'shape, 0, dtype, place'}
  backward: null
- name: zeros_like
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  attrs:
  - {typename: DataType, name: dtype, default_value: 'DataType::UNDEFINED'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, intermediate: false}
  no_need_buffer: null
  invoke: {func: full_like, args: 'x, 0, dtype, place'}
  backward: null
