- name: adadelta_
  inputs:
  - typename: Tensor
    name: param
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: grad
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: avg_squared_grad
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: avg_squared_update
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: learning_rate
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: master_param
    optional: true
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: float, name: rho}
  - {typename: float, name: epsilon}
  - {typename: bool, name: multi_precision}
  outputs:
  - {typename: Tensor, name: param_out, optional: false, intermediate: false}
  - {typename: Tensor, name: moment_out, optional: false, intermediate: false}
  - {typename: Tensor, name: inf_norm_out, optional: false, intermediate: false}
  - {typename: Tensor, name: master_param_out, optional: true, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [adadelta]
    param: [param, grad, avg_squared_grad, avg_squared_update, learning_rate, master_param,
      rho, epsilon, multi_precision]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [param]
      to_complex_flag: [false]
    dispatch: {adadelta: null}
    force_backend: null
  infer_meta:
    func: AdadeltaInferMeta
    param: [param, grad, avg_squared_grad, avg_squared_update, learning_rate, master_param,
      rho, epsilon, multi_precision]
  inplace: {param_out: param, moment_out: avg_squared_grad, inf_norm_out: avg_squared_update,
    master_param_out: master_param}
  view: null
  backward: null
- name: add
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: y
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [add]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {add: null}
    force_backend: null
  infer_meta:
    func: ElementwiseInferMeta
    spmd_rule: ElementwiseBinaryInferSpmd
    param: [x, y]
  inplace: {out: x}
  view: null
  backward: add_grad
- name: add_n
  inputs:
  - typename: Tensor[]
    name: inputs
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  invoke: {func: add_n_impl, args: inputs}
  backward: add_n_grad
- name: all
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: 'int64_t[]', name: axis, default_value: '{}'}
  - {typename: bool, name: keepdim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [all]
    param: [x, axis, keepdim]
    backend: null
    layout: null
    data_type: null
    dispatch: {all: null}
    force_backend: null
  infer_meta:
    func: ReduceInferMeta
    spmd_rule: ReductionAllInferSpmdDynamic
    param: [x, axis, keepdim]
  inplace: null
  view: null
  backward: null
- name: amax
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: 'int64_t[]', name: axis, default_value: '{}'}
  - {typename: bool, name: keepdim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [amax]
    param: [x, axis, keepdim]
    backend: null
    layout: null
    data_type: null
    dispatch: {amax: null}
    force_backend: null
  infer_meta:
    func: ReduceInferMeta
    param: [x, axis, keepdim]
  inplace: null
  view: null
  backward: amax_grad
- name: amin
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: 'int64_t[]', name: axis, default_value: '{}'}
  - {typename: bool, name: keepdim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [amin]
    param: [x, axis, keepdim]
    backend: null
    layout: null
    data_type: null
    dispatch: {amin: null}
    force_backend: null
  infer_meta:
    func: ReduceInferMeta
    param: [x, axis, keepdim]
  inplace: null
  view: null
  backward: amin_grad
- name: any
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: 'int64_t[]', name: axis, default_value: '{}'}
  - {typename: bool, name: keepdim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [any]
    param: [x, axis, keepdim]
    backend: null
    layout: null
    data_type: null
    dispatch: {any: null}
    force_backend: null
  infer_meta:
    func: ReduceInferMeta
    param: [x, axis, keepdim]
  inplace: null
  view: null
  backward: null
- name: arange
  inputs:
  - typename: Tensor
    name: start
    optional: false
    no_need_buffer: false
    data_transform: {skip_trans_args: false, support_trans_dtype: true}
  - typename: Tensor
    name: end
    optional: false
    no_need_buffer: false
    data_transform: {skip_trans_args: false, support_trans_dtype: true}
  - typename: Tensor
    name: step
    optional: false
    no_need_buffer: false
    data_transform: {skip_trans_args: false, support_trans_dtype: true}
  attrs:
  - {typename: DataType, name: dtype}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform:
    support_trans_dtype: [start, end, step]
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [arange_tensor]
    param: [start, end, step]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {arange_tensor: null}
    force_backend: null
  infer_meta:
    func: ArangeTensorInferMeta
    param: [start, end, step]
  inplace: null
  view: null
  backward: null
- name: assign
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [assign]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {assign: null}
    force_backend: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  inplace: {out: x}
  view: null
  backward: assign_grad
- name: assign_out_
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: output
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [assign]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {assign: null}
    force_backend: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  inplace: {out: output}
  view: null
  backward: assign_out__grad
- name: assign_value_
  inputs:
  - typename: Tensor
    name: output
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: 'int[]', name: shape}
  - {typename: DataType, name: dtype}
  - {typename: 'Scalar[]', name: values, data_type: 'std::vector<Scalar>'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [assign_value]
    param: [shape, dtype, values]
    backend:
      ordered: true
      candidates: [place, output]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {assign_value: null}
    force_backend: null
  infer_meta:
    func: AssignValueInferMeta
    param: [shape, dtype]
  inplace: {out: output}
  view: null
  backward: null
- name: batch_norm
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: mean
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: variance
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: scale
    optional: true
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: bias
    optional: true
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: bool, name: is_test}
  - {typename: float, name: momentum}
  - {typename: float, name: epsilon}
  - {typename: str, name: data_format}
  - {typename: bool, name: use_global_stats}
  - {typename: bool, name: trainable_statistics}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  - {typename: Tensor, name: mean_out, optional: false, intermediate: false}
  - {typename: Tensor, name: variance_out, optional: false, intermediate: false}
  - {typename: Tensor, name: saved_mean, optional: false, intermediate: false}
  - {typename: Tensor, name: saved_variance, optional: false, intermediate: false}
  - {typename: Tensor, name: reserve_space, optional: true, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [batch_norm]
    param: [x, mean, variance, scale, bias, is_test, momentum, epsilon, data_format,
      use_global_stats, trainable_statistics]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {batch_norm: null}
    force_backend: null
  infer_meta:
    func: BatchNormInferMeta
    param: [x, mean, variance, scale, bias, is_test, momentum, epsilon, data_format,
      use_global_stats, trainable_statistics]
  inplace: null
  view: {mean_out: mean, variance_out: variance}
  backward: batch_norm_grad
- name: c_allgather
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: ring_id}
  - {typename: int, name: nranks}
  - {typename: bool, name: use_calc_stream}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [c_allgather]
    param: [x, ring_id, nranks, use_calc_stream]
    backend: null
    layout: null
    data_type: null
    dispatch: {c_allgather: null}
    force_backend: null
  infer_meta:
    func: AllGatherInferMeta
    param: [x, nranks]
  inplace: null
  view: null
  backward: null
- name: c_allreduce_max
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: ring_id}
  - {typename: bool, name: use_calc_stream}
  - {typename: bool, name: use_model_parallel}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [c_allreduce_max]
    param: [x, ring_id, use_calc_stream, use_model_parallel]
    backend: null
    layout: null
    data_type: null
    dispatch: {c_allreduce_max: null}
    force_backend: null
  infer_meta:
    func: AllReduceInferMeta
    param: [x]
  inplace: {out: x}
  view: null
  backward: null
- name: c_allreduce_prod
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: ring_id}
  - {typename: bool, name: use_calc_stream}
  - {typename: bool, name: use_model_parallel}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [c_allreduce_prod]
    param: [x, ring_id, use_calc_stream, use_model_parallel]
    backend: null
    layout: null
    data_type: null
    dispatch: {c_allreduce_prod: null}
    force_backend: null
  infer_meta:
    func: AllReduceInferMeta
    param: [x]
  inplace: {out: x}
  view: null
  backward: null
- name: c_allreduce_sum
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: ring_id}
  - {typename: bool, name: use_calc_stream}
  - {typename: bool, name: use_model_parallel}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [c_allreduce_sum]
    param: [x, ring_id, use_calc_stream, use_model_parallel]
    backend: null
    layout: null
    data_type: null
    dispatch: {c_allreduce_sum: null}
    force_backend: null
  infer_meta:
    func: AllReduceInferMeta
    param: [x]
  inplace: {out: x}
  view: null
  backward: null
- name: c_broadcast
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: ring_id, default_value: '0'}
  - {typename: int, name: root, default_value: '0'}
  - {typename: bool, name: use_calc_stream, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [c_broadcast]
    param: [x, ring_id, root, use_calc_stream]
    backend: null
    layout: null
    data_type: null
    dispatch: {c_broadcast: null}
    force_backend: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  inplace: {out: x}
  view: null
  backward: null
- name: c_concat
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: rank}
  - {typename: int, name: nranks}
  - {typename: int, name: ring_id}
  - {typename: bool, name: use_calc_stream}
  - {typename: bool, name: use_model_parallel}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [c_concat]
    param: [x, rank, nranks, ring_id, use_calc_stream, use_model_parallel]
    backend: null
    layout: null
    data_type: null
    dispatch: {c_concat: null}
    force_backend: null
  infer_meta:
    func: CConcatInferMeta
    param: [x, nranks]
  inplace: null
  view: null
  backward: null
- name: c_embedding
  inputs:
  - typename: Tensor
    name: weight
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int64_t, name: start_index, default_value: '0'}
  - {typename: int64_t, name: vocab_size, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [c_embedding]
    param: [weight, x, start_index, vocab_size]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [weight]
      to_complex_flag: [false]
    dispatch: {c_embedding: null}
    force_backend: null
  infer_meta:
    func: CEmbeddingInferMeta
    param: [weight, x, start_index]
  inplace: null
  view: null
  backward: c_embedding_grad
- name: c_identity
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: ring_id}
  - {typename: bool, name: use_calc_stream}
  - {typename: bool, name: use_model_parallel}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [c_identity]
    param: [x, ring_id, use_calc_stream, use_model_parallel]
    backend: null
    layout: null
    data_type: null
    dispatch: {c_identity: null}
    force_backend: null
  infer_meta:
    func: CIdentityInferMeta
    param: [x, ring_id, use_calc_stream, use_model_parallel]
  inplace: {out: x}
  view: null
  backward: null
- name: c_reduce_sum
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: ring_id}
  - {typename: int, name: root_id}
  - {typename: bool, name: use_calc_stream}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [c_reduce_sum]
    param: [x, ring_id, root_id, use_calc_stream]
    backend: null
    layout: null
    data_type: null
    dispatch: {c_reduce_sum: null}
    force_backend: null
  infer_meta:
    func: DistReduceInferMeta
    param: [x]
  inplace: {out: x}
  view: null
  backward: null
- name: c_sync_calc_stream
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [c_sync_calc_stream]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {c_sync_calc_stream: null}
    force_backend: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  inplace: {out: x}
  view: null
  backward: null
- name: c_sync_comm_stream
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: ring_id}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [c_sync_comm_stream]
    param: [x, ring_id]
    backend: null
    layout: null
    data_type: null
    dispatch: {c_sync_comm_stream: null}
    force_backend: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  inplace: {out: x}
  view: null
  backward: null
- name: cast
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: DataType, name: dtype}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [cast]
    param: [x, dtype]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {cast: null}
    force_backend: null
  infer_meta:
    func: CastInferMeta
    spmd_rule: CastInferSpmd
    param: [x, dtype]
  inplace: {out: x}
  view: null
  backward: cast_grad
- name: channel_shuffle
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: groups}
  - {typename: str, name: data_format, default_value: '"NCHW"'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [channel_shuffle]
    param: [x, groups, data_format]
    backend: null
    layout: null
    data_type: null
    dispatch: {channel_shuffle: null}
    force_backend: null
  infer_meta:
    func: ChannelShuffleInferMeta
    param: [x, groups, data_format]
  inplace: null
  view: null
  backward: channel_shuffle_grad
- name: conv2d_transpose
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: filter
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: 'int[]', name: strides, default_value: '{1, 1}'}
  - {typename: 'int[]', name: paddings, default_value: '{0, 0}'}
  - {typename: 'int[]', name: output_padding, default_value: '{}'}
  - {typename: IntArray, name: output_size, default_value: '{}', data_type: 'std::vector<int64_t>'}
  - {typename: str, name: padding_algorithm, default_value: '"EXPLICIT"'}
  - {typename: int, name: groups, default_value: '1'}
  - {typename: 'int[]', name: dilations, default_value: '{1, 1}'}
  - {typename: str, name: data_format, default_value: '"NCHW"'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [conv2d_transpose]
    param: [x, filter, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {conv2d_transpose: null}
    force_backend: null
  infer_meta:
    func: Conv2dTransposeInferMeta
    param: [x, filter, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
  inplace: null
  view: null
  backward: conv2d_transpose_grad
- name: copy_to
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: Place, name: place}
  - {typename: bool, name: blocking}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  invoke: {func: copy_to_impl, args: 'x, place, blocking'}
  backward: null
- name: decode_jpeg
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: str, name: mode}
  - {typename: Place, name: place}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [decode_jpeg]
    param: [x, mode]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type: null
    dispatch: {decode_jpeg: null}
    force_backend: null
  infer_meta:
    func: DecodeJpegInferMeta
    param: [x, mode]
  inplace: null
  view: null
  backward: null
- name: deformable_conv
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: offset
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: filter
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: mask
    optional: true
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: 'int[]', name: dilations}
  - {typename: int, name: deformable_groups}
  - {typename: int, name: groups}
  - {typename: int, name: im2col_step}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [deformable_conv]
    param: [x, offset, filter, mask, strides, paddings, dilations, deformable_groups,
      groups, im2col_step]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {deformable_conv: null}
    force_backend: null
  infer_meta:
    func: DeformableConvInferMeta
    param: [x, offset, filter, mask, strides, paddings, dilations, deformable_groups,
      groups, im2col_step]
  inplace: null
  view: null
  backward: deformable_conv_grad
- name: depthwise_conv2d_transpose
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: filter
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: 'int[]', name: strides, default_value: '{1, 1}'}
  - {typename: 'int[]', name: paddings, default_value: '{0, 0}'}
  - {typename: 'int[]', name: output_padding, default_value: '{}'}
  - {typename: IntArray, name: output_size, default_value: '{}', data_type: 'std::vector<int64_t>'}
  - {typename: str, name: padding_algorithm, default_value: '"EXPLICIT"'}
  - {typename: int, name: groups, default_value: '1'}
  - {typename: 'int[]', name: dilations, default_value: '{1, 1}'}
  - {typename: str, name: data_format, default_value: '"NCHW"'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [depthwise_conv2d_transpose]
    param: [x, filter, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {depthwise_conv2d_transpose: null}
    force_backend: null
  infer_meta:
    func: Conv2dTransposeInferMeta
    param: [x, filter, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
  inplace: null
  view: null
  backward: depthwise_conv2d_transpose_grad
- name: disable_check_model_nan_inf
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: flag, default_value: '0'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [check_model_nan_inf]
    param: [x, flag]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {check_model_nan_inf: null}
    force_backend: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  inplace: null
  view: null
  backward: disable_check_model_nan_inf_grad
- name: distribute_fpn_proposals
  inputs:
  - typename: Tensor
    name: fpn_rois
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: rois_num
    optional: true
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: min_level}
  - {typename: int, name: max_level}
  - {typename: int, name: refer_level}
  - {typename: int, name: refer_scale}
  - {typename: bool, name: pixel_offset}
  outputs:
  - {typename: 'Tensor[]', name: multi_fpn_rois, size: max_level - min_level + 1,
    optional: false, intermediate: false}
  - {typename: 'Tensor[]', name: multi_level_rois_num, size: max_level - min_level
      + 1, optional: false, intermediate: false}
  - {typename: Tensor, name: restore_index, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [distribute_fpn_proposals]
    param: [fpn_rois, rois_num, min_level, max_level, refer_level, refer_scale, pixel_offset]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [fpn_rois]
      to_complex_flag: [false]
    dispatch: {distribute_fpn_proposals: null}
    force_backend: null
  infer_meta:
    func: DistributeFpnProposalsInferMeta
    param: [fpn_rois, rois_num, min_level, max_level, refer_level, refer_scale, pixel_offset]
  inplace: null
  view: null
  backward: null
- name: divide
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: y
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [divide]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {divide: null}
    force_backend: null
  infer_meta:
    func: ElementwiseInferMeta
    spmd_rule: ElementwiseBinaryInferSpmd
    param: [x, y]
  inplace: {out: x}
  view: null
  backward: divide_grad
- name: dropout
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: seed_tensor
    optional: true
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: Scalar, name: p, data_type: float}
  - {typename: bool, name: is_test}
  - {typename: str, name: mode}
  - {typename: int, name: seed}
  - {typename: bool, name: fix_seed}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  - {typename: Tensor, name: mask, optional: false, intermediate: true}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [dropout]
    param: [x, seed_tensor, p, is_test, mode, seed, fix_seed]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {dropout: null}
    force_backend: null
  infer_meta:
    func: DropoutInferMeta
    param: [x, seed_tensor, p, is_test, mode, seed, fix_seed]
  inplace: null
  view: null
  backward: dropout_grad
- name: einsum
  inputs:
  - typename: Tensor[]
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: str, name: equation}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  - {typename: 'Tensor[]', name: inner_cache, size: x.size(), optional: false, intermediate: false}
  - {typename: 'Tensor[]', name: xshape, size: x.size(), optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [einsum]
    param: [x, equation]
    backend: null
    layout: null
    data_type: null
    dispatch: {einsum: null}
    force_backend: null
  infer_meta:
    func: EinsumRawInferMeta
    param: [x, equation]
  inplace: null
  view: null
  backward: einsum_grad
- name: elementwise_pow
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: y
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [elementwise_pow]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {elementwise_pow: null}
    force_backend: null
  infer_meta:
    func: ElementwiseInferMeta
    spmd_rule: ElementwiseBinaryInferSpmd
    param: [x, y]
  inplace: null
  view: null
  backward: elementwise_pow_grad
- name: embedding
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: weight
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int64_t, name: padding_idx, default_value: '-1'}
  - {typename: bool, name: sparse, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [embedding, sparse_weight_embedding]
    param: [x, weight, padding_idx]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [weight]
      to_complex_flag: [false]
    dispatch:
      embedding:
      - [dense, dense]
      - [dense]
      sparse_weight_embedding:
      - [dense, selected_rows]
      - [dense]
    force_backend: null
  infer_meta:
    func: EmbeddingInferMeta
    param: [x, weight, padding_idx]
    spmd_rule: EmbeddingInferSpmdUnspportVocabParallel
  inplace: null
  view: null
  backward: embedding_grad
- name: embedding_grad_dense
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: weight
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: out_grad
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int64_t, name: padding_idx, default_value: '-1'}
  - {typename: bool, name: sparse, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: weight_grad, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [embedding_grad]
    param: [x, weight, out_grad, padding_idx, sparse]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [weight]
      to_complex_flag: [false]
    dispatch: {embedding_grad: null}
    force_backend: null
  infer_meta:
    func: UnchangedInferMeta
    param: [weight]
  inplace: null
  view: null
  backward: null
- name: empty
  inputs: []
  attrs:
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  - {typename: Place, name: place, default_value: CPUPlace()}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [empty]
    param: [shape, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {empty: null}
    force_backend: null
  infer_meta:
    func: CreateInferMeta
    param: [shape, dtype]
  inplace: null
  view: null
  backward: null
- name: empty_like
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: DataType, name: dtype, default_value: 'DataType::UNDEFINED'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [empty_like]
    param: [x, dtype]
    backend:
      ordered: true
      candidates: [place, x]
    layout: null
    data_type:
      ordered: true
      candidates: [dtype, x]
      to_complex_flag: [false, false]
    dispatch: {empty_like: null}
    force_backend: null
  infer_meta:
    func: CreateLikeInferMeta
    param: [x, dtype]
  inplace: null
  view: null
  backward: null
- name: enable_check_model_nan_inf
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: flag, default_value: '1'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [check_model_nan_inf]
    param: [x, flag]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {check_model_nan_inf: null}
    force_backend: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  inplace: null
  view: null
  backward: enable_check_model_nan_inf_grad
- name: equal
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: y
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [equal]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {equal: null}
    force_backend: null
  infer_meta:
    func: CompareInferMeta
    spmd_rule: ElementwiseBinaryInferSpmd
    param: [x, y]
  inplace: {out: x}
  view: null
  backward: null
- name: exponential_
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: float, name: lam}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [exponential]
    param: [x, lam]
    backend: null
    layout: null
    data_type: null
    dispatch: {exponential: null}
    force_backend: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  inplace: {out: x}
  view: null
  backward: exponential__grad
- name: eye
  inputs: []
  attrs:
  - {typename: Scalar, name: num_rows, data_type: float}
  - {typename: Scalar, name: num_columns, data_type: float}
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [eye]
    param: [num_rows, num_columns, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {eye: null}
    force_backend: null
  infer_meta:
    func: EyeInferMeta
    param: [num_rows, num_columns, dtype]
  inplace: null
  view: null
  backward: null
- name: floor_divide
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: y
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [floor_divide]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {floor_divide: null}
    force_backend: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  inplace: {out: x}
  view: null
  backward: null
- name: frobenius_norm
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: IntArray, name: axis, data_type: 'std::vector<int64_t>'}
  - {typename: bool, name: keep_dim}
  - {typename: bool, name: reduce_all}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [frobenius_norm]
    param: [x, axis, keep_dim, reduce_all]
    backend: null
    layout: null
    data_type: null
    dispatch: {frobenius_norm: null}
    force_backend: null
  infer_meta:
    func: ReduceIntArrayAxisInferMetaBase
    param: [x, axis, keep_dim, reduce_all]
  inplace: null
  view: null
  backward: frobenius_norm_grad
- name: full
  inputs: []
  attrs:
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  - {typename: Scalar, name: value, data_type: float}
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  - {typename: Place, name: place, default_value: CPUPlace()}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [full]
    param: [shape, value, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {full: null}
    force_backend: null
  infer_meta:
    func: CreateInferMeta
    param: [shape, dtype]
  inplace: null
  view: null
  backward: null
- name: full_
  inputs:
  - typename: Tensor
    name: output
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  - {typename: Scalar, name: value, data_type: float}
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  - {typename: Place, name: place, default_value: CPUPlace()}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [full]
    param: [shape, value, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {full: null}
    force_backend: null
  infer_meta:
    func: CreateInferMeta
    param: [shape, dtype]
  inplace: {out: output}
  view: null
  backward: null
- name: full_batch_size_like
  inputs:
  - typename: Tensor
    name: input
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: 'int[]', name: shape}
  - {typename: DataType, name: dtype}
  - {typename: Scalar, name: value, data_type: float}
  - {typename: int, name: input_dim_idx}
  - {typename: int, name: output_dim_idx}
  - {typename: Place, name: place, default_value: CPUPlace()}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [full_batch_size_like]
    param: [input, shape, value, dtype, input_dim_idx, output_dim_idx]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {full_batch_size_like: null}
    force_backend: null
  infer_meta:
    func: FullBatchSizeLikeInferMeta
    param: [input, shape, value, dtype, input_dim_idx, output_dim_idx]
  inplace: null
  view: null
  backward: null
- name: full_like
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {skip_trans_args: true, support_trans_dtype: false}
  attrs:
  - {typename: Scalar, name: value, data_type: float}
  - {typename: DataType, name: dtype, default_value: 'DataType::UNDEFINED'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform:
    skip_transform: [x]
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [full_like]
    param: [x, value, dtype]
    backend:
      ordered: true
      candidates: [place, x]
    layout: null
    data_type:
      ordered: true
      candidates: [dtype, x]
      to_complex_flag: [false, false]
    dispatch: {full_like: null}
    force_backend: null
  infer_meta:
    func: CreateLikeInferMeta
    param: [x, dtype]
    spmd_rule: FullLikeInferSpmd
  inplace: null
  view: null
  backward: null
- name: full_with_tensor
  inputs:
  - typename: Tensor
    name: shape
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: value
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [full_with_tensor]
    param: [shape, value, dtype]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {full_with_tensor: null}
    force_backend: null
  infer_meta:
    func: FullWithTensorInferMeta
    param: [shape, dtype]
  inplace: null
  view: null
  backward: null
- name: fused_adam_
  inputs:
  - typename: Tensor[]
    name: params
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor[]
    name: grads
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: learning_rate
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor[]
    name: moments1
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor[]
    name: moments2
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor[]
    name: beta1_pows
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor[]
    name: beta2_pows
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor[]
    name: master_params
    optional: true
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: skip_update
    optional: true
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: Scalar, name: beta1, data_type: float}
  - {typename: Scalar, name: beta2, data_type: float}
  - {typename: Scalar, name: epsilon, data_type: float}
  - {typename: int, name: chunk_size}
  - {typename: float, name: weight_decay}
  - {typename: bool, name: use_adamw}
  - {typename: bool, name: multi_precision}
  - {typename: bool, name: use_global_beta_pow}
  outputs:
  - {typename: 'Tensor[]', name: params_out, size: params.size(), optional: false,
    intermediate: false}
  - {typename: 'Tensor[]', name: moments1_out, size: params.size(), optional: false,
    intermediate: false}
  - {typename: 'Tensor[]', name: moments2_out, size: params.size(), optional: false,
    intermediate: false}
  - {typename: 'Tensor[]', name: beta1_pows_out, size: params.size(), optional: false,
    intermediate: false}
  - {typename: 'Tensor[]', name: beta2_pows_out, size: params.size(), optional: false,
    intermediate: false}
  - {typename: 'Tensor[]', name: master_params_out, size: params.size(), optional: false,
    intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [fused_adam]
    param: [params, grads, learning_rate, moments1, moments2, beta1_pows, beta2_pows,
      master_params, skip_update, beta1, beta2, epsilon, chunk_size, weight_decay,
      use_adamw, multi_precision, use_global_beta_pow]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [params]
      to_complex_flag: [false]
    dispatch: {fused_adam: null}
    force_backend: null
  infer_meta:
    func: FusedAdamInferMeta
    param: [params, grads, learning_rate, moments1, moments2, beta1_pows, beta2_pows,
      master_params, skip_update, beta1, beta2, epsilon, chunk_size, weight_decay,
      use_adamw, multi_precision, use_global_beta_pow]
  inplace: {params_out: params, moments1_out: moments1, moments2_out: moments2, beta1_pows_out: beta1_pows,
    beta2_pows_out: beta2_pows, master_params_out: master_params}
  view: null
  backward: null
- name: fused_batch_norm_act
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: scale
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: bias
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: mean
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: variance
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: float, name: momentum}
  - {typename: float, name: epsilon}
  - {typename: str, name: act_type}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  - {typename: Tensor, name: mean_out, optional: false, intermediate: false}
  - {typename: Tensor, name: variance_out, optional: false, intermediate: false}
  - {typename: Tensor, name: saved_mean, optional: false, intermediate: false}
  - {typename: Tensor, name: saved_variance, optional: false, intermediate: false}
  - {typename: Tensor, name: reserve_space, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [fused_batch_norm_act]
    param: [x, scale, bias, mean, variance, momentum, epsilon, act_type]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {fused_batch_norm_act: null}
    force_backend: null
  infer_meta:
    func: FusedBatchNormActInferMeta
    param: [x, scale, bias, mean, variance]
  inplace: null
  view: {mean_out: mean, variance_out: variance}
  backward: fused_batch_norm_act_grad
- name: fused_bn_add_activation
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: z
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: scale
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: bias
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: mean
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: variance
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: float, name: momentum}
  - {typename: float, name: epsilon}
  - {typename: str, name: act_type}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  - {typename: Tensor, name: mean_out, optional: false, intermediate: false}
  - {typename: Tensor, name: variance_out, optional: false, intermediate: false}
  - {typename: Tensor, name: saved_mean, optional: false, intermediate: false}
  - {typename: Tensor, name: saved_variance, optional: false, intermediate: false}
  - {typename: Tensor, name: reserve_space, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [fused_bn_add_activation]
    param: [x, z, scale, bias, mean, variance, momentum, epsilon, act_type]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {fused_bn_add_activation: null}
    force_backend: null
  infer_meta:
    func: FusedBatchNormActInferMeta
    param: [x, scale, bias, mean, variance]
  inplace: null
  view: {mean_out: mean, variance_out: variance}
  backward: fused_bn_add_activation_grad
- name: fused_softmax_mask_upper_triangle
  inputs:
  - typename: Tensor
    name: X
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: Out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [fused_softmax_mask_upper_triangle]
    param: [X]
    backend: null
    layout: null
    data_type: null
    dispatch: {fused_softmax_mask_upper_triangle: null}
    force_backend: null
  infer_meta:
    func: UnchangedInferMeta
    param: [X]
  inplace: null
  view: null
  backward: fused_softmax_mask_upper_triangle_grad
- name: gaussian
  inputs: []
  attrs:
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  - {typename: float, name: mean}
  - {typename: float, name: std}
  - {typename: int, name: seed}
  - {typename: DataType, name: dtype}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [gaussian]
    param: [shape, mean, std, seed, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {gaussian: null}
    force_backend: null
  infer_meta:
    func: GaussianInferMeta
    param: [shape, mean, std, seed, dtype]
  inplace: null
  view: null
  backward: null
- name: greater_equal
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: y
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [greater_equal]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {greater_equal: null}
    force_backend: null
  infer_meta:
    func: CompareInferMeta
    param: [x, y]
  inplace: {out: x}
  view: null
  backward: null
- name: greater_than
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: y
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [greater_than]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {greater_than: null}
    force_backend: null
  infer_meta:
    func: CompareInferMeta
    param: [x, y]
  inplace: {out: x}
  view: null
  backward: null
- name: hardswish
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [hardswish]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {hardswish: null}
    force_backend: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  inplace: null
  view: null
  backward: hardswish_grad
- name: hsigmoid_loss
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: label
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: w
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: bias
    optional: true
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: path
    optional: true
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: code
    optional: true
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: num_classes}
  - {typename: bool, name: is_sparse}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  - {typename: Tensor, name: pre_out, optional: false, intermediate: false}
  - {typename: Tensor, name: w_out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [hsigmoid_loss]
    param: [x, label, w, bias, path, code, num_classes, is_sparse]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {hsigmoid_loss: null}
    force_backend: null
  infer_meta:
    func: HSigmoidLossInferMeta
    param: [x, label, w, bias, path, code, num_classes, is_sparse]
  inplace: null
  view: null
  backward: hsigmoid_loss_grad
- name: increment
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: float, name: value, default_value: '1.0'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [increment]
    param: [x, value]
    backend: null
    layout: null
    data_type: null
    dispatch: {increment: null}
    force_backend: null
  infer_meta:
    func: IncrementInferMeta
    param: [x, value]
  inplace: {out: x}
  view: null
  backward: null
- name: less_equal
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: y
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [less_equal]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {less_equal: null}
    force_backend: null
  infer_meta:
    func: CompareInferMeta
    param: [x, y]
  inplace: {out: x}
  view: null
  backward: null
- name: less_than
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: y
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [less_than]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {less_than: null}
    force_backend: null
  infer_meta:
    func: CompareInferMeta
    param: [x, y]
  inplace: {out: x}
  view: null
  backward: null
- name: linspace
  inputs:
  - typename: Tensor
    name: start
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: stop
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: number
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: DataType, name: dtype}
  - {typename: Place, name: place}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [linspace]
    param: [start, stop, number, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {linspace: null}
    force_backend: null
  infer_meta:
    func: LinspaceInferMeta
    param: [start, stop, number, dtype]
  inplace: null
  view: null
  backward: null
- name: logspace
  inputs:
  - typename: Tensor
    name: start
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: stop
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: num
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: base
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: DataType, name: dtype}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [logspace]
    param: [start, stop, num, base, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {logspace: null}
    force_backend: null
  infer_meta:
    func: LogspaceInferMeta
    param: [start, stop, num, base, dtype]
  inplace: null
  view: null
  backward: null
- name: logsumexp
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: 'int64_t[]', name: axis}
  - {typename: bool, name: keepdim}
  - {typename: bool, name: reduce_all}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [logsumexp]
    param: [x, axis, keepdim, reduce_all]
    backend: null
    layout: null
    data_type: null
    dispatch: {logsumexp: null}
    force_backend: null
  infer_meta:
    func: LogsumexpInferMeta
    param: [x, axis, keepdim, reduce_all]
  inplace: null
  view: null
  backward: logsumexp_grad
- name: matmul
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: y
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: bool, name: transpose_x, default_value: 'false'}
  - {typename: bool, name: transpose_y, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [matmul]
    param: [x, y, transpose_x, transpose_y]
    backend: null
    layout: null
    data_type: null
    dispatch: {matmul: null}
    force_backend: null
  infer_meta:
    func: MatmulInferMeta
    spmd_rule: MatmulInferSpmd
    param: [x, y, transpose_x, transpose_y]
  inplace: null
  view: null
  backward: matmul_grad
- name: matrix_rank
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: float, name: tol}
  - {typename: bool, name: use_default_tol, default_value: 'true'}
  - {typename: bool, name: hermitian, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [matrix_rank]
    param: [x, tol, use_default_tol, hermitian]
    backend: null
    layout: null
    data_type: null
    dispatch: {matrix_rank: null}
    force_backend: null
  infer_meta:
    func: MatrixRankInferMeta
    param: [x, use_default_tol, hermitian]
  inplace: null
  view: null
  backward: null
- name: matrix_rank_tol
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: atol_tensor
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: bool, name: use_default_tol, default_value: 'true'}
  - {typename: bool, name: hermitian, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [matrix_rank_tol]
    param: [x, atol_tensor, use_default_tol, hermitian]
    backend: null
    layout: null
    data_type: null
    dispatch: {matrix_rank_tol: null}
    force_backend: null
  infer_meta:
    func: MatrixRankTolInferMeta
    param: [x, atol_tensor, use_default_tol, hermitian]
  inplace: null
  view: null
  backward: null
- name: max
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: IntArray, name: axis, default_value: '{}', data_type: 'std::vector<int64_t>'}
  - {typename: bool, name: keepdim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [max]
    param: [x, axis, keepdim]
    backend: null
    layout: null
    data_type: null
    dispatch: {max: null}
    force_backend: null
  infer_meta:
    func: ReduceIntArrayAxisInferMeta
    spmd_rule: ReductionMaxInferSpmdDynamic
    param: [x, axis, keepdim]
  inplace: null
  view: null
  backward: max_grad
- name: maximum
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: y
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [maximum]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {maximum: null}
    force_backend: null
  infer_meta:
    func: ElementwiseInferMeta
    spmd_rule: ElementwiseBinaryInferSpmd
    param: [x, y]
  inplace: null
  view: null
  backward: maximum_grad
- name: mean
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: IntArray, name: axis, default_value: '{}', data_type: 'std::vector<int64_t>'}
  - {typename: bool, name: keepdim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [mean]
    param: [x, axis, keepdim]
    backend: null
    layout: null
    data_type: null
    dispatch: {mean: null}
    force_backend: null
  infer_meta:
    func: ReduceIntArrayAxisInferMeta
    spmd_rule: ReductionMeanInferSpmdDynamic
    param: [x, axis, keepdim]
  inplace: null
  view: null
  backward: mean_grad
- name: memcpy_d2h
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: dst_place_type}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [memcpy_d2h]
    param: [x, dst_place_type]
    backend: null
    layout: null
    data_type: null
    dispatch: {memcpy_d2h: null}
    force_backend: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  inplace: null
  view: null
  backward: null
- name: memcpy_h2d
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: dst_place_type}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [memcpy_h2d]
    param: [x, dst_place_type]
    backend: null
    layout: null
    data_type: null
    dispatch: {memcpy_h2d: null}
    force_backend: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  inplace: null
  view: null
  backward: null
- name: min
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: IntArray, name: axis, default_value: '{}', data_type: 'std::vector<int64_t>'}
  - {typename: bool, name: keepdim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [min]
    param: [x, axis, keepdim]
    backend: null
    layout: null
    data_type: null
    dispatch: {min: null}
    force_backend: null
  infer_meta:
    func: ReduceIntArrayAxisInferMeta
    param: [x, axis, keepdim]
  inplace: null
  view: null
  backward: min_grad
- name: minimum
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: y
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [minimum]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {minimum: null}
    force_backend: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  inplace: null
  view: null
  backward: minimum_grad
- name: mish
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: float, name: lambda}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [mish]
    param: [x, lambda]
    backend: null
    layout: null
    data_type: null
    dispatch: {mish: null}
    force_backend: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  inplace: null
  view: null
  backward: mish_grad
- name: multiply
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: y
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [multiply, multiply_sr]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch:
      multiply:
      - [dense, dense]
      - [dense]
      multiply_sr:
      - [selected_rows, dense]
      - [selected_rows]
    force_backend: null
  infer_meta:
    func: ElementwiseInferMeta
    spmd_rule: ElementwiseBinaryInferSpmd
    param: [x, y]
  inplace: {out: x}
  view: null
  backward: multiply_grad
- name: norm
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: axis}
  - {typename: float, name: epsilon}
  - {typename: bool, name: is_test}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  - {typename: Tensor, name: norm, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [norm]
    param: [x, axis, epsilon, is_test]
    backend: null
    layout: null
    data_type: null
    dispatch: {norm: null}
    force_backend: null
  infer_meta:
    func: NormInferMeta
    param: [x, axis, epsilon, is_test]
  inplace: null
  view: null
  backward: norm_grad
- name: not_equal
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: y
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [not_equal]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {not_equal: null}
    force_backend: null
  infer_meta:
    func: CompareInferMeta
    spmd_rule: ElementwiseBinaryInferSpmd
    param: [x, y]
  inplace: {out: x}
  view: null
  backward: null
- name: one_hot
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: Scalar(int), name: num_classes, data_type: int}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [one_hot]
    param: [x, num_classes]
    backend: null
    layout: null
    data_type: null
    dispatch: {one_hot: null}
    force_backend: null
  infer_meta:
    func: OneHotInferMeta
    param: [x, num_classes]
  inplace: null
  view: null
  backward: null
- name: ones
  inputs: []
  attrs:
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  - {typename: Place, name: place, default_value: CPUPlace()}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  invoke: {func: full, args: 'shape, 1, dtype, place'}
  backward: null
- name: ones_like
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: DataType, name: dtype, default_value: 'DataType::UNDEFINED'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  invoke: {func: full_like, args: 'x, 1, dtype, place'}
  backward: null
- name: pad
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: 'int[]', name: paddings}
  - {typename: Scalar, name: pad_value, data_type: float}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [pad]
    param: [x, paddings, pad_value]
    backend: null
    layout: null
    data_type: null
    dispatch: {pad: null}
    force_backend: null
  infer_meta:
    func: PadInferMeta
    param: [x, paddings, pad_value]
  inplace: null
  view: null
  backward: pad_grad
- name: pool2d
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: IntArray, name: kernel_size, data_type: 'std::vector<int64_t>'}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: bool, name: ceil_mode}
  - {typename: bool, name: exclusive}
  - {typename: str, name: data_format}
  - {typename: str, name: pooling_type}
  - {typename: bool, name: global_pooling}
  - {typename: bool, name: adaptive}
  - {typename: str, name: padding_algorithm}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [pool2d]
    param: [x, kernel_size, strides, paddings, ceil_mode, exclusive, data_format,
      pooling_type, global_pooling, adaptive, padding_algorithm]
    backend: null
    layout: null
    data_type: null
    dispatch: {pool2d: null}
    force_backend: null
  infer_meta:
    func: Pool2DInferMeta
    param: [x, kernel_size, strides, paddings, ceil_mode, exclusive, data_format,
      pooling_type, global_pooling, adaptive, padding_algorithm]
  inplace: null
  view: null
  backward: pool2d_grad
- name: pool3d
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: 'int[]', name: kernel_size}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: bool, name: ceil_mode}
  - {typename: bool, name: exclusive}
  - {typename: str, name: data_format}
  - {typename: str, name: pooling_type}
  - {typename: bool, name: global_pooling}
  - {typename: bool, name: adaptive}
  - {typename: str, name: padding_algorithm}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [pool3d]
    param: [x, kernel_size, strides, paddings, ceil_mode, exclusive, data_format,
      pooling_type, global_pooling, adaptive, padding_algorithm]
    backend: null
    layout: null
    data_type: null
    dispatch: {pool3d: null}
    force_backend: null
  infer_meta:
    func: PoolInferMeta
    param: [x, kernel_size, strides, paddings, ceil_mode, exclusive, data_format,
      pooling_type, global_pooling, adaptive, padding_algorithm]
  inplace: null
  view: null
  backward: pool3d_grad
- name: prod
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: IntArray, name: dims, data_type: 'std::vector<int64_t>'}
  - {typename: bool, name: keep_dim}
  - {typename: bool, name: reduce_all}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [prod]
    param: [x, dims, keep_dim, reduce_all]
    backend: null
    layout: null
    data_type: null
    dispatch: {prod: null}
    force_backend: null
  infer_meta:
    func: ReduceIntArrayAxisInferMetaBase
    param: [x, dims, keep_dim, reduce_all]
  inplace: null
  view: null
  backward: prod_grad
- name: randint
  inputs: []
  attrs:
  - {typename: int, name: low}
  - {typename: int, name: high}
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  - {typename: DataType, name: dtype, default_value: 'DataType::INT64'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [randint]
    param: [low, high, shape, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {randint: null}
    force_backend: null
  infer_meta:
    func: RandintInferMeta
    param: [low, high, shape, dtype]
  inplace: null
  view: null
  backward: null
- name: randperm
  inputs: []
  attrs:
  - {typename: int, name: n}
  - {typename: DataType, name: dtype}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [randperm]
    param: [n, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {randperm: null}
    force_backend: null
  infer_meta:
    func: RandpermInferMeta
    param: [n, dtype]
  inplace: null
  view: null
  backward: null
- name: read_file
  inputs: []
  attrs:
  - {typename: str, name: filename, default_value: '""'}
  - {typename: DataType, name: dtype, default_value: 'DataType::UINT8'}
  - {typename: Place, name: place, default_value: CPUPlace()}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [read_file]
    param: [filename]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {read_file: null}
    force_backend: null
  infer_meta:
    func: ReadFileInferMeta
    param: [filename]
  inplace: null
  view: null
  backward: null
- name: remainder
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: y
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [remainder]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {remainder: null}
    force_backend: null
  infer_meta:
    func: ElementwiseInferMeta
    param: [x, y]
  inplace: {out: x}
  view: null
  backward: null
- name: repeat_interleave
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: repeats}
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [repeat_interleave]
    param: [x, repeats, axis]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {repeat_interleave: null}
    force_backend: null
  infer_meta:
    func: RepeatInterleaveInferMeta
    param: [x, repeats, axis]
  inplace: null
  view: null
  backward: repeat_interleave_grad
- name: repeat_interleave_with_tensor_index
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: repeats
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [repeat_interleave_with_tensor_index]
    param: [x, repeats, axis]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {repeat_interleave_with_tensor_index: null}
    force_backend: null
  infer_meta:
    func: RepeatInterleaveWithTensorIndexInferMeta
    param: [x, repeats, axis]
  inplace: null
  view: null
  backward: repeat_interleave_with_tensor_index_grad
- name: reshape
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  - {typename: Tensor, name: xshape, optional: false, intermediate: true}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [reshape]
    param: [x, shape]
    backend: null
    layout: null
    data_type: null
    dispatch: {reshape: null}
    force_backend: null
  infer_meta:
    func: ReshapeWithXShapeInferMeta
    spmd_rule: ReshapeInferSpmdDynamic
    param: [x, shape]
  inplace: {out: x}
  view: {out: x}
  backward: reshape_grad
- name: rnn
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor[]
    name: pre_state
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor[]
    name: weight_list
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: sequence_length
    optional: true
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: dropout_state_in
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: float, name: dropout_prob, default_value: '0.0'}
  - {typename: bool, name: is_bidirec, default_value: 'false'}
  - {typename: int, name: input_size, default_value: '10'}
  - {typename: int, name: hidden_size, default_value: '100'}
  - {typename: int, name: num_layers, default_value: '1'}
  - {typename: str, name: mode, default_value: '"RNN_TANH"'}
  - {typename: int, name: seed, default_value: '0'}
  - {typename: bool, name: is_test, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  - {typename: Tensor, name: dropout_state_out, optional: false, intermediate: false}
  - {typename: 'Tensor[]', name: state, size: pre_state.size(), optional: false, intermediate: false}
  - {typename: Tensor, name: reserve, optional: false, intermediate: true}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [rnn]
    param: [x, pre_state, weight_list, sequence_length, dropout_prob, is_bidirec,
      input_size, hidden_size, num_layers, mode, seed, is_test]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {rnn: null}
    force_backend: null
  infer_meta:
    func: RnnInferMeta
    param: [x, pre_state, weight_list, sequence_length, dropout_prob, is_bidirec,
      input_size, hidden_size, num_layers, mode, seed, is_test]
  inplace: null
  view: {dropout_state_out: dropout_state_in}
  backward: rnn_grad
- name: rrelu
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: float, name: lower}
  - {typename: float, name: upper}
  - {typename: bool, name: is_test}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  - {typename: Tensor, name: noise, optional: false, intermediate: true}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [rrelu]
    param: [x, lower, upper, is_test]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {rrelu: null}
    force_backend: null
  infer_meta:
    func: RReluInferMeta
    param: [x, lower, upper, is_test]
  inplace: null
  view: null
  backward: rrelu_grad
- name: sequence_mask
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: Scalar(int), name: max_len, data_type: int}
  - {typename: DataType, name: out_dtype}
  outputs:
  - {typename: Tensor, name: y, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [sequence_mask_scalar]
    param: [x, max_len, out_dtype]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {sequence_mask_scalar: null}
    force_backend: null
  infer_meta:
    func: SequenceMaskScalarInferMeta
    param: [x, max_len, out_dtype]
  inplace: null
  view: null
  backward: null
- name: set_value
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: IntArray, name: starts, data_type: 'std::vector<int64_t>'}
  - {typename: IntArray, name: ends, data_type: 'std::vector<int64_t>'}
  - {typename: IntArray, name: steps, data_type: 'std::vector<int64_t>'}
  - {typename: 'int64_t[]', name: axes}
  - {typename: 'int64_t[]', name: decrease_axes}
  - {typename: 'int64_t[]', name: none_axes}
  - {typename: 'int64_t[]', name: shape}
  - {typename: 'Scalar[]', name: values, data_type: 'std::vector<Scalar>'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [set_value]
    param: [x, starts, ends, steps, axes, decrease_axes, none_axes, shape, values]
    backend: null
    layout: null
    data_type: null
    dispatch: {set_value: null}
    force_backend: null
  infer_meta:
    func: SetValueInferMeta
    param: [x]
  inplace: {out: x}
  view: null
  backward: set_value_grad
- name: set_value_with_tensor
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: values
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: IntArray, name: starts, data_type: 'std::vector<int64_t>'}
  - {typename: IntArray, name: ends, data_type: 'std::vector<int64_t>'}
  - {typename: IntArray, name: steps, data_type: 'std::vector<int64_t>'}
  - {typename: 'int64_t[]', name: axes}
  - {typename: 'int64_t[]', name: decrease_axes}
  - {typename: 'int64_t[]', name: none_axes}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [set_value_with_tensor]
    param: [x, values, starts, ends, steps, axes, decrease_axes, none_axes]
    backend: null
    layout: null
    data_type: null
    dispatch: {set_value_with_tensor: null}
    force_backend: null
  infer_meta:
    func: SetValueInferMeta
    param: [x]
  inplace: {out: x}
  view: null
  backward: set_value_with_tensor_grad
- name: slice
  inputs:
  - typename: Tensor
    name: input
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: 'int64_t[]', name: axes}
  - {typename: IntArray, name: starts, data_type: 'std::vector<int64_t>'}
  - {typename: IntArray, name: ends, data_type: 'std::vector<int64_t>'}
  - {typename: 'int64_t[]', name: infer_flags}
  - {typename: 'int64_t[]', name: decrease_axis}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [slice]
    param: [input, axes, starts, ends, infer_flags, decrease_axis]
    backend: null
    layout: null
    data_type: null
    dispatch: {slice: null}
    force_backend: null
  infer_meta:
    func: SliceRawInferMeta
    spmd_rule: SliceInferSpmdDynamic
    param: [input, axes, starts, ends, infer_flags, decrease_axis]
  inplace: null
  view: null
  backward: slice_grad
- name: softmax
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [softmax]
    param: [x, axis]
    backend: null
    layout: null
    data_type: null
    dispatch: {softmax: null}
    force_backend: null
  infer_meta:
    func: SoftmaxInferMeta
    spmd_rule: SoftmaxInferSpmd
    param: [x, axis]
  inplace: {out: x}
  view: null
  backward: softmax_grad
- name: split
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: IntArray, name: sections, data_type: 'std::vector<int64_t>'}
  - {typename: Scalar(int), name: axis, data_type: int}
  outputs:
  - {typename: 'Tensor[]', name: out, size: sections.size(), optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [split]
    param: [x, sections, axis]
    backend: null
    layout: null
    data_type: null
    dispatch: {split: null}
    force_backend: null
  infer_meta:
    func: SplitInferMeta
    param: [x, sections, axis]
  inplace: null
  view: null
  backward: split_grad
- name: split_with_num
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: num}
  - {typename: Scalar(int), name: axis, data_type: int}
  outputs:
  - {typename: 'Tensor[]', name: out, size: num, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [split_with_num]
    param: [x, num, axis]
    backend: null
    layout: null
    data_type: null
    dispatch: {split_with_num: null}
    force_backend: null
  infer_meta:
    func: SplitWithNumInferMeta
    spmd_rule: SplitWithNumInferSpmdDynamic
    param: [x, num, axis]
  inplace: null
  view: null
  backward: split_with_num_grad
- name: strided_slice
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: 'int[]', name: axes}
  - {typename: IntArray, name: starts, data_type: 'std::vector<int64_t>'}
  - {typename: IntArray, name: ends, data_type: 'std::vector<int64_t>'}
  - {typename: IntArray, name: strides, data_type: 'std::vector<int64_t>'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [strided_slice]
    param: [x, axes, starts, ends, strides]
    backend: null
    layout: null
    data_type: null
    dispatch: {strided_slice: null}
    force_backend: null
  infer_meta:
    func: StridedSliceInferMeta
    spmd_rule: StridedSliceInferSpmdDynamic
    param: [x, axes, starts, ends, strides]
  inplace: null
  view: null
  backward: strided_slice_grad
- name: subtract
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: y
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [subtract]
    param: [x, y]
    backend: null
    layout: null
    data_type: null
    dispatch: {subtract: null}
    force_backend: null
  infer_meta:
    func: ElementwiseInferMeta
    spmd_rule: ElementwiseBinaryInferSpmd
    param: [x, y]
  inplace: {out: x}
  view: null
  backward: subtract_grad
- name: sum
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: IntArray, name: axis, default_value: '{}', data_type: 'std::vector<int64_t>'}
  - {typename: DataType, name: dtype, default_value: 'DataType::UNDEFINED'}
  - {typename: bool, name: keepdim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [sum]
    param: [x, axis, dtype, keepdim]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {sum: null}
    force_backend: null
  infer_meta:
    func: SumInferMeta
    spmd_rule: ReductionSumInferSpmdDynamic
    param: [x, axis, dtype, keepdim]
  inplace: null
  view: null
  backward: sum_grad
- name: swish
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [swish]
    param: [x]
    backend: null
    layout: null
    data_type: null
    dispatch: {swish: null}
    force_backend: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  inplace: null
  view: null
  backward: swish_grad
- name: sync_batch_norm_
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: mean
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: variance
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: scale
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: bias
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: bool, name: is_test}
  - {typename: float, name: momentum}
  - {typename: float, name: epsilon}
  - {typename: str, name: data_format}
  - {typename: bool, name: use_global_stats}
  - {typename: bool, name: trainable_statistics}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  - {typename: Tensor, name: mean_out, optional: false, intermediate: false}
  - {typename: Tensor, name: variance_out, optional: false, intermediate: false}
  - {typename: Tensor, name: saved_mean, optional: false, intermediate: false}
  - {typename: Tensor, name: saved_variance, optional: false, intermediate: false}
  - {typename: Tensor, name: reserve_space, optional: true, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [sync_batch_norm]
    param: [x, mean, variance, scale, bias, is_test, momentum, epsilon, data_format,
      use_global_stats, trainable_statistics]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {sync_batch_norm: null}
    force_backend: null
  infer_meta:
    func: BatchNormInferMeta
    param: [x, mean, variance, scale, bias, is_test, momentum, epsilon, data_format,
      use_global_stats, trainable_statistics]
  inplace: {mean_out: mean, variance_out: variance}
  view: null
  backward: sync_batch_norm_grad
- name: tile
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: IntArray, name: repeat_times, default_value: '{}', data_type: 'std::vector<int64_t>'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [tile]
    param: [x, repeat_times]
    backend: null
    layout: null
    data_type: null
    dispatch: {tile: null}
    force_backend: null
  infer_meta:
    func: TileInferMeta
    spmd_rule: TileInferSpmdDynamic
    param: [x, repeat_times]
  inplace: null
  view: null
  backward: tile_grad
- name: trans_layout
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: 'int[]', name: perm}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [transpose]
    param: [x, perm]
    backend: null
    layout: null
    data_type: null
    dispatch: {transpose: null}
    force_backend: null
  infer_meta:
    func: TransposeInferMeta
    param: [x, perm]
  inplace: null
  view: null
  backward: trans_layout_grad
- name: transpose
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: 'int[]', name: perm}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [transpose]
    param: [x, perm]
    backend: null
    layout: null
    data_type: null
    dispatch: {transpose: null}
    force_backend: null
  infer_meta:
    func: TransposeInferMeta
    spmd_rule: TransposeInferSpmd
    param: [x, perm]
  inplace: {out: x}
  view: null
  backward: transpose_grad
- name: tril
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: diagonal}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [tril]
    param: [x, diagonal]
    backend: null
    layout: null
    data_type: null
    dispatch: {tril: null}
    force_backend: null
  infer_meta:
    func: TrilInferMeta
    param: [x, diagonal]
  inplace: {out: x}
  view: null
  backward: tril_grad
- name: tril_indices
  inputs: []
  attrs:
  - {typename: int, name: rows}
  - {typename: int, name: cols}
  - {typename: int, name: offset}
  - {typename: DataType, name: dtype}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [tril_indices]
    param: [rows, cols, offset, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {tril_indices: null}
    force_backend: null
  infer_meta:
    func: TrilIndicesInferMeta
    param: [rows, cols, offset, dtype]
  inplace: null
  view: null
  backward: null
- name: triu
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: int, name: diagonal}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [triu]
    param: [x, diagonal]
    backend: null
    layout: null
    data_type: null
    dispatch: {triu: null}
    force_backend: null
  infer_meta:
    func: TriuInferMeta
    spmd_rule: TriuInferSpmd
    param: [x, diagonal]
  inplace: {out: x}
  view: null
  backward: triu_grad
- name: triu_indices
  inputs: []
  attrs:
  - {typename: int, name: row}
  - {typename: int, name: col}
  - {typename: int, name: offset}
  - {typename: DataType, name: dtype}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [triu_indices]
    param: [row, col, offset, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {triu_indices: null}
    force_backend: null
  infer_meta:
    func: TriuIndicesInferMeta
    param: [row, col, offset, dtype]
  inplace: null
  view: null
  backward: null
- name: truncated_gaussian_random
  inputs: []
  attrs:
  - {typename: 'int[]', name: shape}
  - {typename: float, name: mean}
  - {typename: float, name: std}
  - {typename: int, name: seed}
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [truncated_gaussian_random]
    param: [shape, mean, std, seed, dtype]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {truncated_gaussian_random: null}
    force_backend: null
  infer_meta:
    func: TruncatedGaussianRandomInferMeta
    param: [shape, mean, std, seed, dtype]
  inplace: null
  view: null
  backward: null
- name: uniform
  inputs: []
  attrs:
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  - {typename: DataType, name: dtype}
  - {typename: Scalar, name: min, data_type: float}
  - {typename: Scalar, name: max, data_type: float}
  - {typename: int, name: seed}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [uniform]
    param: [shape, dtype, min, max, seed]
    backend:
      ordered: false
      candidates: [place]
    layout: null
    data_type:
      ordered: false
      candidates: [dtype]
      to_complex_flag: [false]
    dispatch: {uniform: null}
    force_backend: null
  infer_meta:
    func: UniformRandomInferMeta
    param: [shape, dtype]
  inplace: null
  view: null
  backward: null
- name: unique
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: bool, name: return_index}
  - {typename: bool, name: return_inverse}
  - {typename: bool, name: return_counts}
  - {typename: 'int[]', name: axis}
  - {typename: DataType, name: dtype, default_value: 'DataType::INT64'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  - {typename: Tensor, name: indices, optional: true, intermediate: false}
  - {typename: Tensor, name: inverse, optional: true, intermediate: false}
  - {typename: Tensor, name: counts, optional: true, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [unique]
    param: [x, return_index, return_inverse, return_counts, axis, dtype]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {unique: null}
    force_backend: null
  infer_meta:
    func: UniqueInferMeta
    param: [x, return_index, return_inverse, return_counts, axis, dtype]
  inplace: null
  view: null
  backward: null
- name: unpool
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: indices
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: 'int[]', name: ksize}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: padding}
  - {typename: IntArray, name: output_size, data_type: 'std::vector<int64_t>'}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  kernel:
    func: [unpool]
    param: [x, indices, ksize, strides, padding, output_size, data_format]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {unpool: null}
    force_backend: null
  infer_meta:
    func: UnpoolInferMeta
    param: [x, indices, ksize, strides, padding, output_size, data_format]
  inplace: null
  view: null
  backward: unpool_grad
- name: zeros
  inputs: []
  attrs:
  - {typename: IntArray, name: shape, data_type: 'std::vector<int64_t>'}
  - {typename: DataType, name: dtype, default_value: 'DataType::FLOAT32'}
  - {typename: Place, name: place, default_value: CPUPlace()}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  invoke: {func: full, args: 'shape, 0, dtype, place'}
  backward: null
- name: zeros_like
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: DataType, name: dtype, default_value: 'DataType::UNDEFINED'}
  - {typename: Place, name: place, default_value: '{}'}
  outputs:
  - {typename: Tensor, name: out, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  support_tensor: []
  traits: []
  interfaces: []
  invoke: {func: full_like, args: 'x, 0, dtype, place'}
  backward: null
