/* Copyright (c) 2021 PaddlePaddle Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. */


#if defined(__CUDA_ARCH__)
  #undef __CUDA_ARCH__
#endif

#if defined(__CUDACC__)
  #undef __CUDACC__
#endif

#if defined(__CUDA__)
  #undef __CUDA__
#endif

#if defined(__NVCC__)
  #undef __NVCC__
#endif

#if defined(EIGEN_HAS_BUILTIN_INT128)
  #undef EIGEN_HAS_BUILTIN_INT128
#endif

#include <xpu/runtime.h>
#include "xpu/kernel/cluster_header.h"
#include "xpu/kernel/debug.h"
#include "xpu/kernel/math.h"
#include "paddle/fluid/operators/elementwise/elementwise_add_op.h"
#include <memory>
#include <string>
#include "paddle/fluid/operators/elementwise/elementwise_op.h"
#include "paddle/fluid/operators/elementwise/elementwise_xpu.h"
#include "paddle/fluid/operators/elementwise/elementwise_add_op.h"
#include "paddle/fluid/operators/elementwise/elementwise_op_broadcast_test.cu.h"
#include "paddle/fluid/operators/reduce_ops/reduce_op_test.cu.h"

namespace paddle {
namespace operators {

template <typename T>
struct ReluFunctor {
  T zero = static_cast<T>(0.0f);

  // relu(x) = max(x, 0)
  __device__  T operator()(const T& x) const {
    return x > static_cast<T>(0.0f) ? x : static_cast<T>(0.0f);
  }
};

template <typename T>
struct ReluGradFunctor{
  T zero = static_cast<T>(0.0f);

  // dx = dout * (out > 0)
  __device__ T operator()(const T& dout, const T& out) const {
    return out > static_cast<T>(0.0f) ? dout : static_cast<T>(0.0f);
  }

};

void ReluXPU2Compute(const framework::ExecutionContext& ctx,
                    const std::vector<const framework::Tensor *> &ins,
                     std::vector<framework::Tensor *> *outs, int axis) {
  // std::cout<<"niulliling relu xpu start !"<<std::endl;
  const auto& dev_ctx =
      ctx.template device_context<paddle::platform::XPUDeviceContext>();
  LaunchSameDimsElementwiseCudaKernel<ElementwiseType::kUnary, float, float, ReluFunctor<float>>(
      dev_ctx, ins, outs, ReluFunctor<float>());
//  std::cout<<"niulliling elementwise xpu end   !"<<std::endl;
}

void ReluGradXPU2Compute(const framework::ExecutionContext& ctx,
                     const std::vector<const framework::Tensor *> &ins,
                     std::vector<framework::Tensor *> *outs, int axis) {
 // std::cout<<"niulliling relu grad xpu start !"<<std::endl;
  const auto& dev_ctx =
      ctx.template device_context<paddle::platform::XPUDeviceContext>();
  if (axis == 1) {
      LaunchSameDimsElementwiseCudaKernel<ElementwiseType::kBinary, float, float, ReluGradFunctor<float>>(
          dev_ctx, ins, outs, ReluGradFunctor<float>());

  } else if (axis == 2) {
    LaunchSameDimsElementwiseCudaKernel<ElementwiseType::kUnary, float, float, ReluGradFunctor<float>>(
        dev_ctx, ins, outs, ReluGradFunctor<float>());
  }
//  std::cout<<"niulliling elementwise xpu end   !"<<std::endl;
}

}  // namespace operators
}  // namespace paddle
