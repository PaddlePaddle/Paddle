include "paddle/infrt/dialect/infrt/infrt_ops_base.td"

// Op definition
class Infrt_Op<string mnemonic, list<OpTrait> traits = []> : Op<Infrt_Dialect, mnemonic, traits> {

  // Each registered op needs to provide all of a printer, parser and verifier.
  // let printer = [{ return infrt::print(p, *this); }];
  // let verifier = [{ return infrt::verify(*this); }];
  // let parser = [{ return infrt::parse$cppClass(parser, result); }];
}

def Infrt_KernelOp : Infrt_Op<"kernel", [NoSideEffect]> {
  let summary = "kernel op";
  let description = [{kernel op!}];
  let arguments = (ins Variadic<AnyType>:$operands,
                       StrAttr:$name,
                       OptionalAttr<DictionaryAttr>:$attrs);
  let results = (outs Variadic<AnyType>);
}

def Infrt_ReturnOp : Infrt_Op<"return", [Terminator]> {
  let summary = "host executor return operation";
  let description = [{
      The "infrt.return" operation represents a return operation within a function.

        func @foo() : (i32, f8) {
        infrt.return %0, %1 : i32, f8
        }
    }];

  let arguments = (ins Variadic<AnyType>:$operands);

  let builders = [OpBuilder<(ins),
                  [{ build($_builder, $_state, llvm::None); }]>];
}

def Infrt_CvtTensorOp : Infrt_Op<"cvt_tensor", [NoSideEffect]> {
  let summary = "convert tensor type op";
  let description = [{convert tensor type op!}];
  let arguments = (ins AnyType:$input);
  let results = (outs AnyType:$output);
}
