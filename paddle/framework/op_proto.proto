/* Copyright (c) 2016 PaddlePaddle Authors. All Rights Reserve.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. */

// Protocol Message for 3rd-party language binding.
//
// Paddle Python package will use `OpProto` to generate op creation methods.
// The op creation methods take user's input and generate `OpDesc` proto message,
// then pass `OpDesc` to C++ side and create Op pointer.
//
syntax="proto2";
package paddle.framework;

import "attr_type.proto";

// Attribute protocol message for 3rd-party language binding.
// It will store the Op support what attribute and what type.
message AttrProto {
    // Supported attribute name. e.g. `scale` for cosine op.
    required string name = 1;

    // Supported attribute type.
    required AttrType type = 2;

    // Supported attribute comments. It helps 3rd-party language generate doc-string.
    required string comment = 3;
}

// Input or output message for 3rd-party language binding.
// It contains parameter name and its comments.
message VarProto {
    // Input or output name in that op creation function.
    // e.g. `cos(a, b, output, ...)`, "a", "b", "output" are names.
    required string name = 1;

    // The comment for that input. It helps 3rd-party language generate doc-string.
    required string comment = 2;
}

// Op protocol message for 3rd-party language binding.
// It contains all information for generating op creation method.
message OpProto {
    // The input information to generate op creation method.
    repeated VarProto inputs = 1;

    // The output information to generate op creation method.
    repeated VarProto outputs = 2;

    // The attribute information to generate op creation method.
    repeated AttrProto attrs = 3;

    // The comments for that Op. It helps 3rd-party language generate
    // doc-string. The whole documentation of that Op is generated by comment,
    // inputs, outputs, attrs together.
    required string comment = 4;

    // The type of that Op.
    required string type = 5;
}
