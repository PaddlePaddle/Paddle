# Copyright (c) 2017 PaddlePaddle Authors. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from paddle.trainer_config_helpers import *

settings(batch_size=16)
channels = get_config_arg("channels", int, 2)

def two_conv(input, group_name):
  out1 = img_conv_layer(input=input,
              name=group_name+'_conv1_',
              filter_size=1,
              num_filters=channels,
              padding=0,
              shared_biases=True,
              act=ReluActivation())

  out2 = img_conv_layer(input=input,
              name=group_name+'_conv2_',
              filter_size=3,
              num_filters=channels,
              padding=1,
              shared_biases=True,
              act=ReluActivation())
  return out1, out2

def two_conv_bn(input, group_name):
  out1, out2 = two_conv(input, group_name)
  out1 = batch_norm_layer(input=out1,
              name=group_name+'_bn1_',
              use_global_stats=False,
              act=ReluActivation())

  out2 = batch_norm_layer(input=out2,
              name=group_name+'_bn2_',
              use_global_stats=False,
              act=ReluActivation())
  return out1, out2

def two_conv_pool(input, group_name):
  out1, out2 = two_conv(input, group_name)
  out1 = img_pool_layer(input=out1,
              name=group_name+'_pool1_',
              pool_size=3,
              stride=2,
              padding=0,
              pool_type=MaxPooling())

  out2 = img_pool_layer(input=out2,
              name=group_name+'_pool2_',
              pool_size=5,
              stride=2,
              padding=1,
              pool_type=MaxPooling())
  return out1, out2

def two_fc(input, group_name):
  out1 = fc_layer(input=input,
            name=group_name+'_fc1_',
            size=channels,
            bias_attr=False,
            act=LinearActivation())

  out2 = fc_layer(input=input,
            name=group_name+'_fc2_',
            size=channels,
            bias_attr=False,
            act=LinearActivation())
  return out1, out2

data = data_layer(name ="input", size=channels*16*16)

tmp = img_conv_layer(input=data,
            num_channels=channels,
            filter_size=3,
            num_filters=channels,
            padding=1,
            shared_biases=True,
            act=ReluActivation())

a1, a2 = two_conv(tmp, 'conv_branch')
tmp = addto_layer(input=[a1, a2],
            act=ReluActivation(),
            bias_attr=False)

tmp = img_pool_layer(input=tmp,
            pool_size=3,
            stride=2,
            padding=1,
            pool_type=AvgPooling())

b1, b2 = two_conv_pool(tmp, 'pool_branch')
tmp = concat_layer(input=[b1, b2])

tmp = img_pool_layer(input=tmp,
            num_channels=channels*2,
            pool_size=3,
            stride=2,
            padding=1,
            pool_type=MaxPooling())

tmp = img_conv_layer(input=tmp,
            filter_size=3,
            num_filters=channels,
            padding=1,
            stride=2,
            shared_biases=True,
            act=LinearActivation(),
            bias_attr=False)

tmp = batch_norm_layer(input=tmp,
            use_global_stats=False,
            act=ReluActivation())

c1, c2 = two_conv_bn(tmp, 'bn_branch')
tmp = addto_layer(input=[c1, c2],
            act=ReluActivation(),
            bias_attr=False)

tmp = fc_layer(input=tmp, size=channels,
            bias_attr=True,
            act=ReluActivation())

d1, d2 = two_fc(tmp, 'fc_branch')
tmp = addto_layer(input=[d1, d2])

out = fc_layer(input=tmp, size=10,
            bias_attr=True,
            act=SoftmaxActivation())

outputs(out)
