# phi auto cmake utils
include(phi)

# paddle experimental common components
add_subdirectory(common)

# phi (low level) api headers: include
# phi (high level) api
add_subdirectory(api)
# phi core components
add_subdirectory(core)
# phi components of specific backends
add_subdirectory(backends)
# phi kernels for diff device
add_subdirectory(kernels)
# phi infermeta
add_subdirectory(infermeta)
# phi tools
add_subdirectory(tools)
# phi tests
add_subdirectory(tests)
# phi capi
if(WITH_CUSTOM_DEVICE)
  add_subdirectory(capi)
endif()

# make an unity target for compile deps
set(PHI_DEPS
    convert_utils
    dense_tensor
    phi_backends
    kernel_factory
    kernel_context
    arg_map_context
    infermeta
    lod_utils
    sparse_csr_tensor
    sparse_coo_tensor
    string_tensor
    api_scalar
    api_int_array
    extended_tensor)

get_property(phi_kernels GLOBAL PROPERTY PHI_KERNELS)
set(PHI_DEPS ${PHI_DEPS} ${phi_kernels})

cc_library(phi DEPS ${PHI_DEPS})

set(phi_extension_header_file
    ${CMAKE_CURRENT_SOURCE_DIR}/extension.h
    CACHE INTERNAL "phi/extension.h file")
file(
  WRITE ${phi_extension_header_file}
  "// Header file generated by paddle/phi/CMakeLists.txt for external users,\n// DO NOT edit or include it within paddle.\n\n#pragma once\n\n"
)

# generate inner headers include dir for users
generate_unify_header(backends EXCLUDES context_pool_utils.h)
generate_unify_header(core EXCLUDES cuda_stream.h)
generate_unify_header(infermeta)
generate_unify_header(kernels SKIP_SUFFIX grad_kernel)

file(
  GLOB
  PHI_SRCS
  "api/lib/api*.cc"
  "api/lib/context_pool.cc "
  "api/lib/data_transform.cc"
  "api/lib/dygraph_api.cc"
  "api/lib/int_array.cc"
  "api/lib/kernel_dispatch.cc"
  "api/lib/op*.cc"
  "api/lib/scalar.cc"
  "api/lib/sparse_api.cc"
  "api/lib/strings_api.cc"
  "api/lib/tensor*.cc"
  "backends/all_context.cc"
  "backends/callback_manager.cc"
  "backends/context_pool.cc"
  "backends/device_base.cc"
  "backends/device_guard.cc"
  "backends/device_manager.cc"
  "backends/event.cc"
  "backends/stream.cc"
  "backends/cpu/*.cc"
  "core/*.cc"
  "kernels/*.cc"
  "kernels/cpu/*.cc"
  "kernels/funcs/*.cc"
  "kernels/selected_rows/*.cc"
  "kernels/sparse/*.cc"
  "kernels/sparse/cpu/*.cc"
  "kernels/strings/*.cc"
  "kernels/strings/cpu/*.cc")

if(WITH_MKLDNN)
  file(GLOB PHI_SRCS ${PHI_SRCS} "backends/onednn/*.cc"
       "kernels/fusion/onednn/*.cc" "kernels/onednn/*.cc")
endif()

#Distributed lib is not supported now
#list(REMOVE_ITEM PHI_SHARED_DEPS ${CMAKE_CURRENT_SOURCE_DIR}/backends/processgroup_comm_utils.cc)

set(PHI_SHARED_DEPS
    flags
    eigen3
    simple_threadpool
    mklml
    warpctc
    warprnnt
    pocketfft
    utf8proc)

if(WITH_GPU)
  set(PHI_SHARED_DEPS ${PHI_SHARED_DEPS} external_error_proto)
endif()

if(WITH_XBYAK)
  list(APPEND PHI_SHARED_DEPS xbyak)
endif()

if(WITH_MKLDNN)
  list(APPEND PHI_SHARED_DEPS mkldnn)
endif()

cc_library(
  phi_shared SHARED
  SRCS ${PHI_SRCS}
  DEPS ${PHI_SHARED_DEPS})
set_target_properties(phi_shared PROPERTIES OUTPUT_NAME phi)
