// Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by generic_mixed_gemm_kernelLauncher.py - Do not edit.

#include "paddle/phi/kernels/fusion/cutlass/cutlass_kernels/fpA_intB_gemm/fpA_intB_gemm_template.h"

namespace phi {

template <>
void generic_mixed_gemm_kernelLauncher_template<
    half,
    uint8_t,
    cutlass::arch::Sm70,
    EpilogueOpNoBias,
    cutlass::gemm::GemmShape<32, 128, 64>,
    cutlass::gemm::GemmShape<32, 32, 64>,
    2>(const half* A,
       const uint8_t* B,
       const half* weight_scales,
       const half* biases,
       half* C,
       int m,
       int n,
       int k,
       CutlassGemmConfig gemm_config,
       char* workspace,
       size_t workspace_bytes,
       cudaStream_t stream,
       int* occupancy) {
  generic_mixed_gemm_kernelLauncher<half,
                                    uint8_t,
                                    cutlass::arch::Sm70,
                                    EpilogueOpNoBias,
                                    cutlass::gemm::GemmShape<32, 128, 64>,
                                    cutlass::gemm::GemmShape<32, 32, 64>,
                                    2>(A,
                                       B,
                                       weight_scales,
                                       biases,
                                       C,
                                       m,
                                       n,
                                       k,
                                       gemm_config,
                                       workspace,
                                       workspace_bytes,
                                       stream,
                                       occupancy);
}

template <>
void generic_mixed_gemm_kernelLauncher_template<
    half,
    uint8_t,
    cutlass::arch::Sm70,
    EpilogueOpNoBias,
    cutlass::gemm::GemmShape<64, 128, 64>,
    cutlass::gemm::GemmShape<64, 64, 64>,
    2>(const half* A,
       const uint8_t* B,
       const half* weight_scales,
       const half* biases,
       half* C,
       int m,
       int n,
       int k,
       CutlassGemmConfig gemm_config,
       char* workspace,
       size_t workspace_bytes,
       cudaStream_t stream,
       int* occupancy) {
  generic_mixed_gemm_kernelLauncher<half,
                                    uint8_t,
                                    cutlass::arch::Sm70,
                                    EpilogueOpNoBias,
                                    cutlass::gemm::GemmShape<64, 128, 64>,
                                    cutlass::gemm::GemmShape<64, 64, 64>,
                                    2>(A,
                                       B,
                                       weight_scales,
                                       biases,
                                       C,
                                       m,
                                       n,
                                       k,
                                       gemm_config,
                                       workspace,
                                       workspace_bytes,
                                       stream,
                                       occupancy);
}

template <>
void generic_mixed_gemm_kernelLauncher_template<
    half,
    cutlass::uint4b_t,
    cutlass::arch::Sm70,
    EpilogueOpNoBias,
    cutlass::gemm::GemmShape<32, 128, 64>,
    cutlass::gemm::GemmShape<32, 32, 64>,
    2>(const half* A,
       const cutlass::uint4b_t* B,
       const half* weight_scales,
       const half* biases,
       half* C,
       int m,
       int n,
       int k,
       CutlassGemmConfig gemm_config,
       char* workspace,
       size_t workspace_bytes,
       cudaStream_t stream,
       int* occupancy) {
  generic_mixed_gemm_kernelLauncher<half,
                                    cutlass::uint4b_t,
                                    cutlass::arch::Sm70,
                                    EpilogueOpNoBias,
                                    cutlass::gemm::GemmShape<32, 128, 64>,
                                    cutlass::gemm::GemmShape<32, 32, 64>,
                                    2>(A,
                                       B,
                                       weight_scales,
                                       biases,
                                       C,
                                       m,
                                       n,
                                       k,
                                       gemm_config,
                                       workspace,
                                       workspace_bytes,
                                       stream,
                                       occupancy);
}

template <>
void generic_mixed_gemm_kernelLauncher_template<
    half,
    cutlass::uint4b_t,
    cutlass::arch::Sm70,
    EpilogueOpNoBias,
    cutlass::gemm::GemmShape<64, 128, 64>,
    cutlass::gemm::GemmShape<64, 64, 64>,
    2>(const half* A,
       const cutlass::uint4b_t* B,
       const half* weight_scales,
       const half* biases,
       half* C,
       int m,
       int n,
       int k,
       CutlassGemmConfig gemm_config,
       char* workspace,
       size_t workspace_bytes,
       cudaStream_t stream,
       int* occupancy) {
  generic_mixed_gemm_kernelLauncher<half,
                                    cutlass::uint4b_t,
                                    cutlass::arch::Sm70,
                                    EpilogueOpNoBias,
                                    cutlass::gemm::GemmShape<64, 128, 64>,
                                    cutlass::gemm::GemmShape<64, 64, 64>,
                                    2>(A,
                                       B,
                                       weight_scales,
                                       biases,
                                       C,
                                       m,
                                       n,
                                       k,
                                       gemm_config,
                                       workspace,
                                       workspace_bytes,
                                       stream,
                                       occupancy);
}

}  // namespace phi
