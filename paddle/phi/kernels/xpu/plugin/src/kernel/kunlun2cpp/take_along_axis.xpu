// Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/*
 * copyright (C) 2022 KUNLUNXIN, Inc
 */

#include "xpu/kernel/cluster.h"
#include "xpu/kernel/cluster_partition.h"
#include "xpu/kernel/cluster_primitive.h"

namespace xpu2 {
namespace plugin {

template <typename T, typename TID>
__global__ void take_along_axis(const T* x,
                                const TID* indices,
                                T* y,
                                int64_t batch,
                                int64_t xlen,
                                int64_t ylen) {
  int cid = core_id();
  const int ncores = core_num();
  int tid = cid * cluster_num() + cluster_id();
  int nthreads = cluster_num() * ncores;

  __simd__ char lm_x[5 * sizeof(int64_t)];
  __simd__ char lm_y[sizeof(T)];
  __simd__ char lm_idx[sizeof(TID)];

  for (int64_t i = tid; i < batch * ylen; i += nthreads) {
    GM2LM(indices + i, lm_idx, sizeof(TID));
    TID idx = ((TID*)lm_idx)[0];
    if (idx < 0) {
      idx += xlen;
    }
    if (idx < xlen) {
      GM2LM(x + i / ylen * xlen + idx, lm_y, sizeof(T));
      LM2GM(lm_y, y + i, sizeof(T));
    }
  }
  return;
}

#define _XPU_DEF__TAKE_ALONG_AXIS_(DTYPE, IDTYPE)          \
  template __global__ void take_along_axis<DTYPE, IDTYPE>( \
      const DTYPE* x,                                      \
      const IDTYPE* indices,                               \
      DTYPE* y,                                            \
      int64_t batch,                                       \
      int64_t xlen,                                        \
      int64_t ylen);
_XPU_DEF__TAKE_ALONG_AXIS_(float, int);
_XPU_DEF__TAKE_ALONG_AXIS_(float16, int);
_XPU_DEF__TAKE_ALONG_AXIS_(float, int64_t);
_XPU_DEF__TAKE_ALONG_AXIS_(float16, int64_t);

}  // namespace plugin
}  // namespace xpu2
