- name: abs_double_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [abs_double_grad]
    param: [x, grad_x_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: abs_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs: []
    outputs:
    - {name: grad_x, typename: Tensor}
- name: abs_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [abs_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: abs_double_grad
  forward:
    name: abs
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: acos_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [acos_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: acos
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: acosh_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [acosh_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: acosh
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: add_double_grad
  inputs:
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: grad_y_grad, optional: true, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [grad_out]
  kernel:
    func: [add_double_grad]
    param: [y, grad_out, grad_x_grad, grad_y_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: {grad_out_grad: grad_x_grad}
  backward: add_triple_grad
  forward:
    name: add_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: axis, typename: int}
    outputs:
    - {name: grad_x, typename: Tensor}
    - {name: grad_y, typename: Tensor}
- name: add_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  no_need_buffer: [x, y]
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, y]
  kernel:
    func: [add_grad]
    param: [x, y, out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: add_double_grad
  forward:
    name: add
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: add_triple_grad
  inputs:
  - {typename: Tensor, name: grad_grad_x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_grad_y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_grad_out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: grad_grad_x_grad, intermediate: false}
  - {typename: Tensor, name: grad_grad_y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [grad_grad_x, grad_grad_y]
  kernel:
    func: [add_triple_grad]
    param: [grad_grad_x, grad_grad_y, grad_grad_out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: {grad_grad_x_grad: grad_grad_out_grad}
  backward: null
  forward:
    name: add_double_grad
    inputs:
    - {name: y, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    - {name: grad_grad_x, typename: Tensor}
    - {name: grad_grad_y, typename: Tensor}
    attrs:
    - {name: axis, typename: int}
    outputs:
    - {name: grad_grad_out, typename: Tensor}
- name: addmm_grad
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: alpha}
  - {typename: float, name: beta}
  outputs:
  - {typename: Tensor, name: input_grad, intermediate: false}
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralTernaryGradInferMeta
    param: [input, x, y]
  kernel:
    func: [addmm_grad]
    param: [input, x, y, out_grad, alpha, beta]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: addmm
    inputs:
    - {name: input, typename: Tensor}
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    attrs:
    - {name: alpha, typename: float}
    - {name: beta, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: affine_grid_grad
  inputs:
  - {typename: Tensor, name: output_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: outputShape}
  - {typename: bool, name: use_cudnn, default_value: 'true'}
  - {typename: bool, name: align_corners, default_value: 'true'}
  outputs:
  - {typename: Tensor, name: input_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: AffineGridGradInferMeta
    param: [output_grad, outputShape, align_corners]
  kernel:
    func: [affine_grid_grad]
    param: [output_grad, outputShape, align_corners]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: affine_grid
    inputs:
    - {name: input, typename: Tensor}
    attrs:
    - {name: outputShape, typename: IntArray}
    - {name: use_cudnn, typename: bool}
    - {name: align_corners, typename: bool}
    outputs:
    - {name: output, typename: Tensor}
- name: amax_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: dims, default_value: '{}'}
  - {typename: bool, name: keep_dim, default_value: 'false'}
  - {typename: bool, name: reduce_all, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [amax_grad]
    param: [x, out, out_grad, dims, keep_dim, reduce_all]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: amax
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: dims, typename: 'int64_t[]'}
    - {name: keep_dim, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: amin_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: dims, default_value: '{}'}
  - {typename: bool, name: keep_dim, default_value: 'false'}
  - {typename: bool, name: reduce_all, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [amin_grad]
    param: [x, out, out_grad, dims, keep_dim, reduce_all]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: amin
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: dims, typename: 'int64_t[]'}
    - {name: keep_dim, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: angle_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [angle_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: angle
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: argsort_grad
  inputs:
  - {typename: Tensor, name: indices, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  - {typename: bool, name: descending}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [argsort_grad]
    param: [indices, x, out_grad, axis, descending]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [out_grad]
  inplace: null
  backward: null
  forward:
    name: argsort
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: axis, typename: int}
    - {name: descending, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
    - {name: indices, typename: Tensor}
- name: as_complex_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: as_real, args: out_grad}
  backward: null
  forward:
    name: as_complex
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: as_real_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: as_complex, args: out_grad}
  backward: null
  forward:
    name: as_real
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: asin_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [asin_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: asin
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: asinh_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [asinh_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: asinh
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: assign_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: assign, args: out_grad}
  backward: null
  forward:
    name: assign
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: assign_out__grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out_grad]
  kernel:
    func: [assign]
    param: [out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: assign_out_
    inputs:
    - {name: x, typename: Tensor}
    - {name: output, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: atan_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [atan_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: atan
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: atanh_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [atanh_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: atanh
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: batch_norm_double_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: scale, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_mean, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: out_variance, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: saved_mean, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: saved_variance, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_scale_grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_bias_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: momentum}
  - {typename: float, name: epsilon}
  - {typename: str, name: data_layout}
  - {typename: bool, name: is_test}
  - {typename: bool, name: use_global_stats}
  - {typename: bool, name: trainable_statistics}
  - {typename: bool, name: fuse_with_relu}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: scale_grad, intermediate: false}
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralTernaryGradInferMeta
    param: [x, scale, x]
  kernel:
    func: [batch_norm_grad_grad]
    param: [x, scale, out_mean, out_variance, saved_mean, saved_variance, grad_out,
      grad_x_grad, grad_scale_grad, grad_bias_grad, momentum, epsilon, data_layout,
      is_test, use_global_stats, trainable_statistics, fuse_with_relu]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: {grad_out_grad: grad_out}
  backward: null
  forward:
    name: batch_norm_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: scale, typename: Tensor}
    - {name: bias, typename: Tensor}
    - {name: out_mean, typename: Tensor}
    - {name: out_variance, typename: Tensor}
    - {name: saved_mean, typename: Tensor}
    - {name: saved_variance, typename: Tensor}
    - {name: reserve_space, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: momentum, typename: float}
    - {name: epsilon, typename: float}
    - {name: data_layout, typename: str}
    - {name: is_test, typename: bool}
    - {name: use_global_stats, typename: bool}
    - {name: trainable_statistics, typename: bool}
    - {name: fuse_with_relu, typename: bool}
    outputs:
    - {name: grad_x, typename: Tensor}
    - {name: grad_scale, typename: Tensor}
    - {name: grad_bias, typename: Tensor}
- name: batch_norm_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: scale, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: bias, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: mean_out, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: variance_out, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: saved_mean, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: saved_variance, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: reserve_space, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: momentum}
  - {typename: float, name: epsilon}
  - {typename: str, name: data_layout}
  - {typename: bool, name: is_test}
  - {typename: bool, name: use_global_stats}
  - {typename: bool, name: trainable_statistics}
  - {typename: bool, name: fuse_with_relu}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: scale_grad, intermediate: false}
  - {typename: Tensor, name: bias_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralTernaryGradInferMeta
    param: [x, scale, bias]
  kernel:
    func: [batch_norm_grad]
    param: [x, scale, bias, mean_out, variance_out, saved_mean, saved_variance, reserve_space,
      out_grad, momentum, epsilon, data_layout, is_test, use_global_stats, trainable_statistics,
      fuse_with_relu]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [out_grad]
  inplace: null
  backward: batch_norm_double_grad
  forward:
    name: batch_norm
    inputs:
    - {name: x, typename: Tensor}
    - {name: scale, typename: Tensor}
    - {name: bias, typename: Tensor}
    - {name: mean, typename: Tensor}
    - {name: variance, typename: Tensor}
    attrs:
    - {name: momentum, typename: float}
    - {name: epsilon, typename: float}
    - {name: data_layout, typename: str}
    - {name: is_test, typename: bool}
    - {name: use_global_stats, typename: bool}
    - {name: trainable_statistics, typename: bool}
    - {name: fuse_with_relu, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
    - {name: mean_out, typename: Tensor}
    - {name: variance_out, typename: Tensor}
    - {name: saved_mean, typename: Tensor}
    - {name: saved_variance, typename: Tensor}
    - {name: reserve_space, typename: Tensor}
- name: bce_loss_grad
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: input_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [input]
  kernel:
    func: [bce_loss_grad]
    param: [input, label, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {input_grad: out_grad}
  backward: null
  forward:
    name: bce_loss
    inputs:
    - {name: input, typename: Tensor}
    - {name: label, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: bicubic_interp_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_size, optional: true, no_need_buffer: false}
  - {typename: 'Tensor[]', name: size_tensor, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: scale_tensor, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: output_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: data_layout}
  - {typename: int, name: out_d}
  - {typename: int, name: out_h}
  - {typename: int, name: out_w}
  - {typename: 'float[]', name: scale}
  - {typename: str, name: interp_method}
  - {typename: bool, name: align_corners}
  - {typename: int, name: align_mode}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [bicubic_interp_grad]
    param: [x, out_size, size_tensor, scale_tensor, output_grad, data_layout, out_d,
      out_h, out_w, scale, interp_method, align_corners, align_mode]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [output_grad]
  inplace: null
  backward: null
  forward:
    name: bicubic_interp
    inputs:
    - {name: x, typename: Tensor}
    - {name: out_size, typename: Tensor}
    - {name: size_tensor, typename: 'Tensor[]'}
    - {name: scale_tensor, typename: Tensor}
    attrs:
    - {name: data_layout, typename: str}
    - {name: out_d, typename: int}
    - {name: out_h, typename: int}
    - {name: out_w, typename: int}
    - {name: scale, typename: 'float[]'}
    - {name: interp_method, typename: str}
    - {name: align_corners, typename: bool}
    - {name: align_mode, typename: int}
    outputs:
    - {name: output, typename: Tensor}
- name: bilinear_interp_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_size, optional: true, no_need_buffer: false}
  - {typename: 'Tensor[]', name: size_tensor, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: scale_tensor, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: output_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: data_layout}
  - {typename: int, name: out_d}
  - {typename: int, name: out_h}
  - {typename: int, name: out_w}
  - {typename: 'float[]', name: scale}
  - {typename: str, name: interp_method}
  - {typename: bool, name: align_corners}
  - {typename: int, name: align_mode}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [bilinear_interp_grad]
    param: [x, out_size, size_tensor, scale_tensor, output_grad, data_layout, out_d,
      out_h, out_w, scale, interp_method, align_corners, align_mode]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [output_grad]
  inplace: null
  backward: null
  forward:
    name: bilinear_interp
    inputs:
    - {name: x, typename: Tensor}
    - {name: out_size, typename: Tensor}
    - {name: size_tensor, typename: 'Tensor[]'}
    - {name: scale_tensor, typename: Tensor}
    attrs:
    - {name: data_layout, typename: str}
    - {name: out_d, typename: int}
    - {name: out_h, typename: int}
    - {name: out_w, typename: int}
    - {name: scale, typename: 'float[]'}
    - {name: interp_method, typename: str}
    - {name: align_corners, typename: bool}
    - {name: align_mode, typename: int}
    outputs:
    - {name: output, typename: Tensor}
- name: bilinear_tensor_product_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: weight, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  - {typename: Tensor, name: weight_grad, intermediate: false}
  - {typename: Tensor, name: bias_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: BilinearTensorProductGradInferMeta
    param: [x, y, weight, out_grad]
  kernel:
    func: [bilinear_tensor_product_grad]
    param: [x, y, weight, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: bilinear_tensor_product
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    - {name: weight, typename: Tensor}
    - {name: bias, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: bmm_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: BmmGradInferMeta
    param: [x, y, out_grad]
  kernel:
    func: [bmm_grad]
    param: [x, y, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: bmm
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: brelu_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: t_min}
  - {typename: float, name: t_max}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [brelu_grad]
    param: [x, out_grad, t_min, t_max]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: brelu
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: t_min, typename: float}
    - {name: t_max, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: broadcast_tensors_grad
  inputs:
  - {typename: 'Tensor[]', name: x, optional: false, no_need_buffer: true}
  - {typename: 'Tensor[]', name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: 'Tensor[]', name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedMultiInferMeta
    param: [x]
  kernel:
    func: [broadcast_tensors_grad]
    param: [out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: broadcast_tensors
    inputs:
    - {name: x, typename: 'Tensor[]'}
    attrs: []
    outputs:
    - {name: out, typename: 'Tensor[]'}
- name: cast_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  invoke: {func: cast, args: 'out_grad, x.dtype('}
  backward: null
  forward:
    name: cast
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: out_dtype, typename: DataType}
    outputs:
    - {name: out, typename: Tensor}
- name: ceil_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out_grad]
  kernel:
    func: [ceil_grad]
    param: [out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: ceil
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: celu_double_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: alpha}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, x]
  kernel:
    func: [celu_double_grad]
    param: [x, grad_out, grad_x_grad, alpha]
    backend: null
    layout: null
    data_type: null
  inplace: {grad_out_grad: grad_x_grad}
  backward: null
  forward:
    name: celu_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: alpha, typename: float}
    outputs:
    - {name: grad_x, typename: Tensor}
- name: celu_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: alpha}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [celu_grad]
    param: [x, out_grad, alpha]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: celu_double_grad
  forward:
    name: celu
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: alpha, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: clip_double_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: min, default_value: '0.'}
  - {typename: Scalar, name: max, default_value: '0.'}
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [clip_grad]
    param: [x, grad_x_grad, min, max]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: clip_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: min, typename: Scalar}
    - {name: max, typename: Scalar}
    outputs:
    - {name: grad_x, typename: Tensor}
- name: clip_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: min, default_value: '0.'}
  - {typename: Scalar, name: max, default_value: '0.'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [clip_grad]
    param: [x, out_grad, min, max]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: clip_double_grad
  forward:
    name: clip
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: min, typename: Scalar}
    - {name: max, typename: Scalar}
    outputs:
    - {name: out, typename: Tensor}
- name: complex_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ComplexGradInferMeta
    param: [x, y, out_grad]
  kernel:
    func: [complex_grad]
    param: [x, y, out_grad]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: null
  forward:
    name: complex
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: concat_double_grad
  inputs:
  - {typename: 'Tensor[]', name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: axis, default_value: '0'}
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: concat, args: 'grad_x_grad, axis'}
  backward: null
  forward:
    name: concat_grad
    inputs:
    - {name: x, typename: 'Tensor[]'}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: axis, typename: Scalar}
    outputs:
    - {name: grad_x, typename: 'Tensor[]'}
- name: concat_grad
  inputs:
  - {typename: 'Tensor[]', name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: axis, default_value: '0'}
  outputs:
  - {typename: 'Tensor[]', name: x_grad, size: x.size(), intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedMultiInferMeta
    param: [x]
  kernel:
    func: [concat_grad]
    param: [x, out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: concat_double_grad
  forward:
    name: concat
    inputs:
    - {name: x, typename: 'Tensor[]'}
    attrs:
    - {name: axis, typename: Scalar}
    outputs:
    - {name: out, typename: Tensor}
- name: conj_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out_grad]
  kernel:
    func: [conj]
    param: [out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: conj
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: conv2d_grad
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: str, name: paddding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  - {typename: bool, name: use_addto}
  - {typename: int, name: workspace_size_MB}
  - {typename: bool, name: exhaustive_search}
  outputs:
  - {typename: Tensor, name: input_grad, intermediate: false}
  - {typename: Tensor, name: filter_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [input, filter]
  kernel:
    func: [conv2d_grad]
    param: [input, filter, out_grad, strides, paddings, paddding_algorithm, groups,
      dilations, data_format, use_addto, workspace_size_MB, exhaustive_search]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: conv2d_grad_grad
  forward:
    name: conv2d
    inputs:
    - {name: input, typename: Tensor}
    - {name: filter, typename: Tensor}
    attrs:
    - {name: strides, typename: 'int[]'}
    - {name: paddings, typename: 'int[]'}
    - {name: paddding_algorithm, typename: str}
    - {name: groups, typename: int}
    - {name: dilations, typename: 'int[]'}
    - {name: data_format, typename: str}
    - {name: use_addto, typename: bool}
    - {name: workspace_size_MB, typename: int}
    - {name: exhaustive_search, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: conv2d_grad_grad
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_input_grad, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: grad_filter_grad, optional: true, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: str, name: paddding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  - {typename: bool, name: use_addto}
  - {typename: int, name: workspace_size_MB}
  - {typename: bool, name: exhaustive_search}
  outputs:
  - {typename: Tensor, name: input_grad, intermediate: false}
  - {typename: Tensor, name: filter_grad, intermediate: false}
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralTernaryGradInferMeta
    param: [input, filter, grad_out]
  kernel:
    func: [conv2d_grad_grad]
    param: [input, filter, grad_out, grad_input_grad, grad_filter_grad, strides, paddings,
      paddding_algorithm, groups, dilations, data_format, use_addto, workspace_size_MB,
      exhaustive_search]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: conv2d_grad
    inputs:
    - {name: input, typename: Tensor}
    - {name: filter, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: strides, typename: 'int[]'}
    - {name: paddings, typename: 'int[]'}
    - {name: paddding_algorithm, typename: str}
    - {name: groups, typename: int}
    - {name: dilations, typename: 'int[]'}
    - {name: data_format, typename: str}
    - {name: use_addto, typename: bool}
    - {name: workspace_size_MB, typename: int}
    - {name: exhaustive_search, typename: bool}
    outputs:
    - {name: grad_input, typename: Tensor}
    - {name: grad_filter, typename: Tensor}
- name: conv2d_transpose_double_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_filter_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: 'int[]', name: output_padding}
  - {typename: IntArray, name: output_size}
  - {typename: str, name: padding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: filter_grad, intermediate: false}
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: Conv2dTransposeDoubleGradInferMeta
    param: [x, filter, grad_out, grad_x_grad, grad_filter_grad, strides, paddings,
      output_padding, output_size, padding_algorithm, groups, dilations, data_format]
  kernel:
    func: [conv2d_transpose_grad_grad]
    param: [x, filter, grad_out, grad_x_grad, grad_filter_grad, strides, paddings,
      output_padding, output_size, padding_algorithm, groups, dilations, data_format]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: conv2d_transpose_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: filter, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: strides, typename: 'int[]'}
    - {name: paddings, typename: 'int[]'}
    - {name: output_padding, typename: 'int[]'}
    - {name: output_size, typename: IntArray}
    - {name: padding_algorithm, typename: str}
    - {name: groups, typename: int}
    - {name: dilations, typename: 'int[]'}
    - {name: data_format, typename: str}
    outputs:
    - {name: grad_x, typename: Tensor}
    - {name: grad_filter, typename: Tensor}
- name: conv2d_transpose_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: 'int[]', name: output_padding}
  - {typename: IntArray, name: output_size}
  - {typename: str, name: padding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: filter_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: Conv2dTransposeGradInferMeta
    param: [x, filter, out_grad, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
  kernel:
    func: [conv2d_transpose_grad]
    param: [x, filter, out_grad, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: conv2d_transpose_double_grad
  forward:
    name: conv2d_transpose
    inputs:
    - {name: x, typename: Tensor}
    - {name: filter, typename: Tensor}
    attrs:
    - {name: strides, typename: 'int[]'}
    - {name: paddings, typename: 'int[]'}
    - {name: output_padding, typename: 'int[]'}
    - {name: output_size, typename: IntArray}
    - {name: padding_algorithm, typename: str}
    - {name: groups, typename: int}
    - {name: dilations, typename: 'int[]'}
    - {name: data_format, typename: str}
    outputs:
    - {name: out, typename: Tensor}
- name: conv3d_grad
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: str, name: paddding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  - {typename: bool, name: use_addto}
  - {typename: int, name: workspace_size_MB}
  - {typename: bool, name: exhaustive_search}
  outputs:
  - {typename: Tensor, name: input_grad, intermediate: false}
  - {typename: Tensor, name: filter_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [input, filter]
  kernel:
    func: [conv3d_grad]
    param: [input, filter, out_grad, strides, paddings, paddding_algorithm, groups,
      dilations, data_format, use_addto, workspace_size_MB, exhaustive_search]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: conv3d_grad_grad
  forward:
    name: conv3d
    inputs:
    - {name: input, typename: Tensor}
    - {name: filter, typename: Tensor}
    attrs:
    - {name: strides, typename: 'int[]'}
    - {name: paddings, typename: 'int[]'}
    - {name: paddding_algorithm, typename: str}
    - {name: groups, typename: int}
    - {name: dilations, typename: 'int[]'}
    - {name: data_format, typename: str}
    - {name: use_addto, typename: bool}
    - {name: workspace_size_MB, typename: int}
    - {name: exhaustive_search, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: conv3d_grad_grad
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_input_grad, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: grad_filter_grad, optional: true, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: str, name: paddding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  - {typename: bool, name: use_addto}
  - {typename: int, name: workspace_size_MB}
  - {typename: bool, name: exhaustive_search}
  outputs:
  - {typename: Tensor, name: input_grad, intermediate: false}
  - {typename: Tensor, name: filter_grad, intermediate: false}
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralTernaryGradInferMeta
    param: [input, filter, grad_out]
  kernel:
    func: [conv3d_grad_grad]
    param: [input, filter, grad_out, grad_input_grad, grad_filter_grad, strides, paddings,
      paddding_algorithm, groups, dilations, data_format, use_addto, workspace_size_MB,
      exhaustive_search]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: conv3d_grad
    inputs:
    - {name: input, typename: Tensor}
    - {name: filter, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: strides, typename: 'int[]'}
    - {name: paddings, typename: 'int[]'}
    - {name: paddding_algorithm, typename: str}
    - {name: groups, typename: int}
    - {name: dilations, typename: 'int[]'}
    - {name: data_format, typename: str}
    - {name: use_addto, typename: bool}
    - {name: workspace_size_MB, typename: int}
    - {name: exhaustive_search, typename: bool}
    outputs:
    - {name: grad_input, typename: Tensor}
    - {name: grad_filter, typename: Tensor}
- name: conv3d_transpose_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: 'int[]', name: output_padding}
  - {typename: 'int[]', name: output_size}
  - {typename: str, name: padding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: filter_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ConvTransposeGradInferMeta
    param: [x, filter, out_grad, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
  kernel:
    func: [conv3d_transpose_grad]
    param: [x, filter, out_grad, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: conv3d_transpose
    inputs:
    - {name: x, typename: Tensor}
    - {name: filter, typename: Tensor}
    attrs:
    - {name: strides, typename: 'int[]'}
    - {name: paddings, typename: 'int[]'}
    - {name: output_padding, typename: 'int[]'}
    - {name: output_size, typename: 'int[]'}
    - {name: padding_algorithm, typename: str}
    - {name: groups, typename: int}
    - {name: dilations, typename: 'int[]'}
    - {name: data_format, typename: str}
    outputs:
    - {name: out, typename: Tensor}
- name: cos_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [cos_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: cos
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: cosh_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [cosh_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: cosh
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: crop_tensor_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: offsets}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CropTensorGradInferMeta
    param: [x, out_grad, offsets]
  kernel:
    func: [crop_tensor_grad]
    param: [x, out_grad, offsets]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: null
  forward:
    name: crop_tensor
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: shape, typename: IntArray}
    - {name: offsets, typename: IntArray}
    outputs:
    - {name: out, typename: Tensor}
- name: cross_entropy_with_softmax_grad
  inputs:
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: softmax, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: loss_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: soft_label}
  - {typename: bool, name: use_softmax}
  - {typename: bool, name: numeric_stable_mode}
  - {typename: int, name: ignore_index}
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: input_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: CrossEntropyWithSoftmaxGradInferMeta
    param: [label, softmax, loss_grad, soft_label, use_softmax, numeric_stable_mode,
      ignore_index, axis]
  kernel:
    func: [cross_entropy_with_softmax_grad]
    param: [label, softmax, loss_grad, soft_label, use_softmax, numeric_stable_mode,
      ignore_index, axis]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [softmax]
  inplace: {input_grad: softmax}
  backward: null
  forward:
    name: cross_entropy_with_softmax
    inputs:
    - {name: input, typename: Tensor}
    - {name: label, typename: Tensor}
    attrs:
    - {name: soft_label, typename: bool}
    - {name: use_softmax, typename: bool}
    - {name: numeric_stable_mode, typename: bool}
    - {name: ignore_index, typename: int}
    - {name: axis, typename: int}
    outputs:
    - {name: softmax, typename: Tensor}
    - {name: loss, typename: Tensor}
- name: cumprod_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: dim}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [cumprod_grad]
    param: [x, out, out_grad, dim]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: cumprod
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: dim, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: cumsum_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: axis}
  - {typename: bool, name: flatten}
  - {typename: bool, name: exclusive}
  - {typename: bool, name: reverse}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: cumsum, args: 'out_grad, axis, flatten, exclusive, !reverse'}
  backward: null
  forward:
    name: cumsum
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: axis, typename: Scalar}
    - {name: flatten, typename: bool}
    - {name: exclusive, typename: bool}
    - {name: reverse, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: deformable_conv_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: offset, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: mask, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: 'int[]', name: dilations}
  - {typename: int, name: deformable_groups}
  - {typename: int, name: groups}
  - {typename: int, name: im2col_step}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: offset_grad, intermediate: false}
  - {typename: Tensor, name: filter_grad, intermediate: false}
  - {typename: Tensor, name: mask_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: DeformableConvGradInferMeta
    param: [x, offset, filter, mask, out_grad, strides, paddings, dilations, deformable_groups,
      groups, im2col_step]
  kernel:
    func: [deformable_conv_grad]
    param: [x, offset, filter, mask, out_grad, strides, paddings, dilations, deformable_groups,
      groups, im2col_step]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: null
  forward:
    name: deformable_conv
    inputs:
    - {name: x, typename: Tensor}
    - {name: offset, typename: Tensor}
    - {name: filter, typename: Tensor}
    - {name: mask, typename: Tensor}
    attrs:
    - {name: strides, typename: 'int[]'}
    - {name: paddings, typename: 'int[]'}
    - {name: dilations, typename: 'int[]'}
    - {name: deformable_groups, typename: int}
    - {name: groups, typename: int}
    - {name: im2col_step, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: depthwise_conv2d_grad
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: str, name: paddding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  - {typename: bool, name: use_addto}
  - {typename: int, name: workspace_size_MB}
  - {typename: bool, name: exhaustive_search}
  - {typename: bool, name: fuse_relu}
  - {typename: bool, name: use_gpudnn}
  outputs:
  - {typename: Tensor, name: input_grad, intermediate: false}
  - {typename: Tensor, name: filter_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [input, filter]
  kernel:
    func: [depthwise_conv2d_grad]
    param: [input, filter, out_grad, strides, paddings, paddding_algorithm, groups,
      dilations, data_format, use_addto, workspace_size_MB, exhaustive_search, fuse_relu]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: depthwise_conv2d_grad_grad
  forward:
    name: depthwise_conv2d
    inputs:
    - {name: input, typename: Tensor}
    - {name: filter, typename: Tensor}
    attrs:
    - {name: strides, typename: 'int[]'}
    - {name: paddings, typename: 'int[]'}
    - {name: paddding_algorithm, typename: str}
    - {name: groups, typename: int}
    - {name: dilations, typename: 'int[]'}
    - {name: data_format, typename: str}
    - {name: use_addto, typename: bool}
    - {name: workspace_size_MB, typename: int}
    - {name: exhaustive_search, typename: bool}
    - {name: fuse_relu, typename: bool}
    - {name: use_gpudnn, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: depthwise_conv2d_grad_grad
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_input_grad, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: grad_filter_grad, optional: true, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: str, name: paddding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  - {typename: bool, name: use_addto}
  - {typename: int, name: workspace_size_MB}
  - {typename: bool, name: exhaustive_search}
  - {typename: bool, name: fuse_relu}
  outputs:
  - {typename: Tensor, name: input_grad, intermediate: false}
  - {typename: Tensor, name: filter_grad, intermediate: false}
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralTernaryGradInferMeta
    param: [input, filter, grad_out]
  kernel:
    func: [depthwise_conv2d_grad_grad]
    param: [input, filter, grad_out, grad_input_grad, grad_filter_grad, strides, paddings,
      paddding_algorithm, groups, dilations, data_format, use_addto, workspace_size_MB,
      exhaustive_search, fuse_relu]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: depthwise_conv2d_grad
    inputs:
    - {name: input, typename: Tensor}
    - {name: filter, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: strides, typename: 'int[]'}
    - {name: paddings, typename: 'int[]'}
    - {name: paddding_algorithm, typename: str}
    - {name: groups, typename: int}
    - {name: dilations, typename: 'int[]'}
    - {name: data_format, typename: str}
    - {name: use_addto, typename: bool}
    - {name: workspace_size_MB, typename: int}
    - {name: exhaustive_search, typename: bool}
    - {name: fuse_relu, typename: bool}
    - {name: use_gpudnn, typename: bool}
    outputs:
    - {name: grad_input, typename: Tensor}
    - {name: grad_filter, typename: Tensor}
- name: depthwise_conv2d_transpose_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: filter, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: 'int[]', name: output_padding}
  - {typename: IntArray, name: output_size}
  - {typename: str, name: padding_algorithm}
  - {typename: int, name: groups}
  - {typename: 'int[]', name: dilations}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: filter_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: Conv2dTransposeGradInferMeta
    param: [x, filter, out_grad, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
  kernel:
    func: [depthwise_conv2d_transpose_grad]
    param: [x, filter, out_grad, strides, paddings, output_padding, output_size, padding_algorithm,
      groups, dilations, data_format]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: depthwise_conv2d_transpose
    inputs:
    - {name: x, typename: Tensor}
    - {name: filter, typename: Tensor}
    attrs:
    - {name: strides, typename: 'int[]'}
    - {name: paddings, typename: 'int[]'}
    - {name: output_padding, typename: 'int[]'}
    - {name: output_size, typename: IntArray}
    - {name: padding_algorithm, typename: str}
    - {name: groups, typename: int}
    - {name: dilations, typename: 'int[]'}
    - {name: data_format, typename: str}
    outputs:
    - {name: out, typename: Tensor}
- name: det_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [determinant_grad]
    param: [x, out, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: det
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: divide_double_grad
  inputs:
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: grad_y_grad, optional: true, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: y_grad, intermediate: false}
  - {typename: Tensor, name: out_grad, intermediate: false}
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralTernaryGradInferMeta
    param: [y, grad_x, grad_x]
  kernel:
    func: [divide_double_grad]
    param: [y, out, grad_x, grad_x_grad, grad_y_grad, axis]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [out]
  inplace: {grad_out_grad: grad_x_grad}
  backward: null
  forward:
    name: divide_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    - {name: out, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: axis, typename: int}
    outputs:
    - {name: grad_x, typename: Tensor}
    - {name: grad_y, typename: Tensor}
- name: divide_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, y]
  kernel:
    func: [divide_grad]
    param: [x, y, out, out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: divide_double_grad
  forward:
    name: divide
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: dropout_grad
  inputs:
  - {typename: Tensor, name: mask, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: p}
  - {typename: bool, name: is_test}
  - {typename: str, name: mode}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out_grad]
  kernel:
    func: [dropout_grad]
    param: [mask, out_grad, p, is_test, mode]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: dropout
    inputs:
    - {name: x, typename: Tensor}
    - {name: seed_tensor, typename: Tensor}
    attrs:
    - {name: p, typename: Scalar}
    - {name: is_test, typename: bool}
    - {name: mode, typename: str}
    - {name: seed, typename: int}
    - {name: fix_seed, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
    - {name: mask, typename: Tensor}
- name: eig_grad
  inputs:
  - {typename: Tensor, name: out_w, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_v, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_w_grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_v_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out_v]
  kernel:
    func: [eig_grad]
    param: [out_w, out_v, out_w_grad, out_v_grad]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [out_v]
  inplace: null
  backward: null
  forward:
    name: eig
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out_w, typename: Tensor}
    - {name: out_v, typename: Tensor}
- name: eigh_grad
  inputs:
  - {typename: Tensor, name: out_w, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_v, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_w_grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_v_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out_v]
  kernel:
    func: [eigh_grad]
    param: [out_w, out_v, out_w_grad, out_v_grad]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [out_v]
  inplace: null
  backward: null
  forward:
    name: eigh
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: uplo, typename: str}
    outputs:
    - {name: out_w, typename: Tensor}
    - {name: out_v, typename: Tensor}
- name: eigvalsh_grad
  inputs:
  - {typename: Tensor, name: eigenvectors, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: eigenvalues_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: uplo}
  - {typename: bool, name: is_test}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: EigvalshGradInferMeta
    param: [eigenvectors, eigenvalues_grad, uplo, is_test]
  kernel:
    func: [eigvalsh_grad]
    param: [eigenvectors, eigenvalues_grad, uplo, is_test]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [eigenvectors]
  inplace: null
  backward: null
  forward:
    name: eigvalsh
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: uplo, typename: str}
    - {name: is_test, typename: bool}
    outputs:
    - {name: eigenvalues, typename: Tensor}
    - {name: eigenvectors, typename: Tensor}
- name: einsum_grad
  inputs:
  - {typename: 'Tensor[]', name: x_shape, optional: false, no_need_buffer: false}
  - {typename: 'Tensor[]', name: inner_cache, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: equation}
  outputs:
  - {typename: 'Tensor[]', name: x_grad, size: x.size(), intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedMultiInferMeta
    param: [x_shape]
  kernel:
    func: [einsum_grad]
    param: [x_shape, inner_cache, out_grad, equation]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: einsum
    inputs:
    - {name: x, typename: 'Tensor[]'}
    attrs:
    - {name: equation, typename: str}
    outputs:
    - {name: out, typename: Tensor}
    - {name: inner_cache, typename: 'Tensor[]'}
    - {name: x_shape, typename: 'Tensor[]'}
- name: elementwise_pow_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, y]
  kernel:
    func: [elementwise_pow_grad]
    param: [x, y, out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: elementwise_pow
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: elu_double_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: alpha}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, x]
  kernel:
    func: [elu_double_grad]
    param: [x, grad_out, grad_x_grad, alpha]
    backend: null
    layout: null
    data_type: null
  inplace: {grad_out_grad: grad_x_grad}
  backward: null
  forward:
    name: elu_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: out, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: alpha, typename: float}
    outputs:
    - {name: grad_x, typename: Tensor}
- name: elu_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: alpha}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [elu_grad]
    param: [x, out, out_grad, alpha]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: elu_double_grad
  forward:
    name: elu
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: alpha, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: embedding_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: weight, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int64_t, name: padding_idx, default_value: '-1'}
  - {typename: bool, name: sparse, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: weight_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: embedding_grad_impl, args: 'x, weight, out_grad, padding_idx, sparse,
      weight_grad'}
  backward: null
  forward:
    name: embedding
    inputs:
    - {name: x, typename: Tensor}
    - {name: weight, typename: Tensor}
    attrs:
    - {name: padding_idx, typename: int64_t}
    - {name: sparse, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: exp_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out]
  kernel:
    func: [exp_grad]
    param: [out, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: exp
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: expand_as_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: target_shape}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [expand_as_grad]
    param: [x, out_grad, target_shape]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: expand_as
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    attrs:
    - {name: target_shape, typename: 'int[]'}
    outputs:
    - {name: out, typename: Tensor}
- name: expand_double_grad
  inputs:
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: shape}
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: expand, args: 'grad_x_grad, shape'}
  backward: null
  forward:
    name: expand_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: shape, typename: IntArray}
    outputs:
    - {name: grad_x, typename: Tensor}
- name: expand_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: shape}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [expand_grad]
    param: [x, out_grad, shape]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: expand_double_grad
  forward:
    name: expand
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: shape, typename: IntArray}
    outputs:
    - {name: out, typename: Tensor}
- name: expm1_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out]
  kernel:
    func: [expm1_grad]
    param: [out, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: expm1
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: exponential__grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: zeros_like, args: out_grad}
  backward: null
  forward:
    name: exponential_
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: lambda, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: fill_diagonal_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: value}
  - {typename: int, name: offset}
  - {typename: bool, name: wrap}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: FillDiagonalGradInferMeta
    param: [out_grad, value, offset, wrap]
  kernel:
    func: [fill_diagonal_grad]
    param: [out_grad, value, offset, wrap]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: fill_diagonal
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: value, typename: float}
    - {name: offset, typename: int}
    - {name: wrap, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: fill_diagonal_tensor_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int64_t, name: offset}
  - {typename: int, name: dim1}
  - {typename: int, name: dim2}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: FillDiagonalTensorGradInferMeta
    param: [out_grad, offset, dim1, dim2]
  kernel:
    func: [fill_diagonal_tensor_grad]
    param: [out_grad, offset, dim1, dim2]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: fill_diagonal_tensor
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    attrs:
    - {name: offset, typename: int64_t}
    - {name: dim1, typename: int}
    - {name: dim2, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: fill_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: value}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out_grad]
  kernel:
    func: [fill_grad]
    param: [out_grad, value]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: fill
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: value, typename: Scalar}
    outputs:
    - {name: out, typename: Tensor}
- name: flatten_grad
  inputs:
  - {typename: Tensor, name: xshape, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: KernelWithXShapeInferMeta
    param: [xshape]
  kernel:
    func: [flatten_grad]
    param: [xshape, out_grad]
    backend:
      ordered: false
      candidates: [out_grad]
    layout:
      ordered: false
      candidates: [out_grad]
    data_type:
      ordered: false
      candidates: [out_grad]
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: flatten
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: start_axis, typename: int}
    - {name: stop_axis, typename: int}
    outputs:
    - {name: out, typename: Tensor}
    - {name: xshape, typename: Tensor}
- name: flip_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: axis}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: flip, args: 'out_grad, axis'}
  backward: null
  forward:
    name: flip
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: axis, typename: 'int[]'}
    outputs:
    - {name: out, typename: Tensor}
- name: floor_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out_grad]
  kernel:
    func: [floor_grad]
    param: [out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: floor
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: fmax_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, y]
  kernel:
    func: [fmax_grad]
    param: [x, y, out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: fmax
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    attrs:
    - {name: axis, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: fmin_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, y]
  kernel:
    func: [fmin_grad]
    param: [x, y, out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: fmin
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    attrs:
    - {name: axis, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: frame_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: frame_length}
  - {typename: int, name: hop_length}
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [frame_grad]
    param: [x, out_grad, frame_length, hop_length, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: frame
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: frame_length, typename: int}
    - {name: hop_length, typename: int}
    - {name: axis, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: frobenius_norm_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: axis}
  - {typename: bool, name: keep_dim}
  - {typename: bool, name: reduce_all}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [frobenius_norm_grad]
    param: [x, out, out_grad, axis, keep_dim, reduce_all]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: frobenius_norm
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: axis, typename: 'int64_t[]'}
    - {name: keep_dim, typename: bool}
    - {name: reduce_all, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: gather_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: axis, default_value: '0'}
  - {typename: bool, name: overwrite, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [gather_grad]
    param: [x, index, out_grad, axis, overwrite]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: null
  forward:
    name: gather
    inputs:
    - {name: x, typename: Tensor}
    - {name: index, typename: Tensor}
    attrs:
    - {name: axis, typename: Scalar}
    outputs:
    - {name: out, typename: Tensor}
- name: gather_nd_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [gather_nd_grad]
    param: [x, index, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: gather_nd
    inputs:
    - {name: x, typename: Tensor}
    - {name: index, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: gelu_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: approximate}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [gelu_grad]
    param: [x, out_grad, approximate]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: gelu
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: approximate, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: graph_send_recv_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: src_index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: dst_index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: dst_count, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: reduce_op, default_value: '"SUM"'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralUnaryGradInferMeta
    param: [x]
  kernel:
    func: [graph_send_recv_grad]
    param: [x, src_index, dst_index, out, dst_count, out_grad, reduce_op]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [out_grad]
  inplace: null
  backward: null
  forward:
    name: graph_send_recv
    inputs:
    - {name: x, typename: Tensor}
    - {name: src_index, typename: Tensor}
    - {name: dst_index, typename: Tensor}
    attrs:
    - {name: reduce_op, typename: str}
    - {name: out_size, typename: IntArray}
    outputs:
    - {name: out, typename: Tensor}
    - {name: dst_count, typename: Tensor}
- name: graph_send_ue_recv_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: src_index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: dst_index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: dst_count, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: message_op}
  - {typename: str, name: reduce_op}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, y]
  kernel:
    func: [graph_send_ue_recv_grad]
    param: [x, y, src_index, dst_index, out, dst_count, out_grad, message_op, reduce_op]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [out_grad]
  inplace: null
  backward: null
  forward:
    name: graph_send_ue_recv
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    - {name: src_index, typename: Tensor}
    - {name: dst_index, typename: Tensor}
    attrs:
    - {name: message_op, typename: str}
    - {name: reduce_op, typename: str}
    - {name: out_size, typename: IntArray}
    outputs:
    - {name: out, typename: Tensor}
    - {name: dst_count, typename: Tensor}
- name: grid_sample_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grid, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: mode}
  - {typename: str, name: padding_mode}
  - {typename: bool, name: align_corners}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: grid_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, grid]
  kernel:
    func: [grid_sample_grad]
    param: [x, grid, out_grad, mode, padding_mode, align_corners]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: null
  forward:
    name: grid_sample
    inputs:
    - {name: x, typename: Tensor}
    - {name: grid, typename: Tensor}
    attrs:
    - {name: mode, typename: str}
    - {name: padding_mode, typename: str}
    - {name: align_corners, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: group_norm_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: scale, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: bias, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: mean, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: variance, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: epsilon}
  - {typename: int, name: groups}
  - {typename: str, name: data_layout}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: scale_grad, intermediate: false}
  - {typename: Tensor, name: bias_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralTernaryGradInferMeta
    param: [y, scale, bias]
  kernel:
    func: [group_norm_grad]
    param: [x, scale, bias, y, mean, variance, y_grad, epsilon, groups, data_layout]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [y_grad]
  inplace: {x_grad: y_grad}
  backward: null
  forward:
    name: group_norm
    inputs:
    - {name: x, typename: Tensor}
    - {name: scale, typename: Tensor}
    - {name: bias, typename: Tensor}
    attrs:
    - {name: epsilon, typename: float}
    - {name: groups, typename: int}
    - {name: data_layout, typename: str}
    outputs:
    - {name: y, typename: Tensor}
    - {name: mean, typename: Tensor}
    - {name: variance, typename: Tensor}
- name: gumbel_softmax_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GumbelSoftmaxGradInferMeta
    param: [out, out_grad, axis]
  kernel:
    func: [gumbel_softmax_grad]
    param: [out, out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: gumbel_softmax
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: temperature, typename: float}
    - {name: hard, typename: bool}
    - {name: axis, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: hard_shrink_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: threshold}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [hard_shrink_grad]
    param: [x, out_grad, threshold]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: hard_shrink
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: threshold, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: hard_sigmoid_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: slope}
  - {typename: float, name: offset}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out]
  kernel:
    func: [hard_sigmoid_grad]
    param: [out, out_grad, slope, offset]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: hard_sigmoid
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: slope, typename: float}
    - {name: offset, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: hard_swish_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: threshold}
  - {typename: float, name: scale}
  - {typename: float, name: offset}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [hard_swish_grad]
    param: [x, out_grad, threshold, scale, offset]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: hard_swish
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: threshold, typename: float}
    - {name: scale, typename: float}
    - {name: offset, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: hierarchical_sigmoid_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: w, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: path, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: code, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: bias, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: pre_out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: num_classes}
  - {typename: bool, name: remote_prefetch}
  - {typename: int, name: trainer_id}
  - {typename: 'int64_t[]', name: height_sections}
  - {typename: 'str[]', name: epmap}
  - {typename: 'str[]', name: table_names}
  - {typename: bool, name: is_sparse}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: w_grad, intermediate: false}
  - {typename: Tensor, name: bias_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralTernaryGradInferMeta
    param: [x, w, bias]
  kernel:
    func: [hierarchical_sigmoid_grad]
    param: [x, w, label, path, code, bias, pre_out, out_grad, num_classes, remote_prefetch,
      trainer_id, height_sections, epmap, table_names, is_sparse]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: hierarchical_sigmoid
    inputs:
    - {name: x, typename: Tensor}
    - {name: w, typename: Tensor}
    - {name: label, typename: Tensor}
    - {name: path, typename: Tensor}
    - {name: code, typename: Tensor}
    - {name: bias, typename: Tensor}
    attrs:
    - {name: num_classes, typename: int}
    - {name: remote_prefetch, typename: bool}
    - {name: trainer_id, typename: int}
    - {name: height_sections, typename: 'int64_t[]'}
    - {name: epmap, typename: 'str[]'}
    - {name: table_names, typename: 'str[]'}
    - {name: is_sparse, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
    - {name: pre_out, typename: Tensor}
    - {name: w_out, typename: Tensor}
- name: huber_loss_grad
  inputs:
  - {typename: Tensor, name: residual, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: delta}
  outputs:
  - {typename: Tensor, name: input_grad, intermediate: false}
  - {typename: Tensor, name: label_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [residual, residual]
  kernel:
    func: [huber_loss_grad]
    param: [residual, out_grad, delta]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: huber_loss
    inputs:
    - {name: input, typename: Tensor}
    - {name: label, typename: Tensor}
    attrs:
    - {name: delta, typename: float}
    outputs:
    - {name: out, typename: Tensor}
    - {name: residual, typename: Tensor}
- name: imag_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: imag_grad_impl, args: 'out_grad, x_grad'}
  backward: null
  forward:
    name: imag
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: index_add_grad
  inputs:
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: add_value, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: add_value_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: IndexAddGradInferMeta
    param: [index, add_value, out_grad, axis]
  kernel:
    func: [index_add_grad]
    param: [index, add_value, out_grad, axis]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [out_grad]
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: index_add
    inputs:
    - {name: x, typename: Tensor}
    - {name: index, typename: Tensor}
    - {name: add_value, typename: Tensor}
    attrs:
    - {name: axis, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: index_sample_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [index_sample_grad]
    param: [x, index, out_grad]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [out_grad]
  inplace: null
  backward: null
  forward:
    name: index_sample
    inputs:
    - {name: x, typename: Tensor}
    - {name: index, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: index_select_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: dim}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [index_select_grad]
    param: [x, index, out_grad, dim]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: null
  forward:
    name: index_select
    inputs:
    - {name: x, typename: Tensor}
    - {name: index, typename: Tensor}
    attrs:
    - {name: dim, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: instance_norm_double_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: fwd_scale, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: saved_mean, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: saved_variance, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: grad_scale_grad, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: grad_bias_grad, optional: true, no_need_buffer: false}
  attrs:
  - {typename: float, name: epsilon}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: fwd_scale_grad, intermediate: false}
  - {typename: Tensor, name: grad_y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: InstanceNormDoubleGradInferMeta
    param: [x, fwd_scale, saved_mean, saved_variance, grad_y, grad_x_grad, grad_scale_grad,
      grad_bias_grad, epsilon]
  kernel:
    func: [instance_norm_double_grad]
    param: [x, fwd_scale, saved_mean, saved_variance, grad_y, grad_x_grad, grad_scale_grad,
      grad_bias_grad, epsilon]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: null
  forward:
    name: instance_norm_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: fwd_scale, typename: Tensor}
    - {name: saved_mean, typename: Tensor}
    - {name: saved_variance, typename: Tensor}
    - {name: grad_y, typename: Tensor}
    attrs:
    - {name: epsilon, typename: float}
    outputs:
    - {name: grad_x, typename: Tensor}
    - {name: grad_scale, typename: Tensor}
    - {name: grad_bias, typename: Tensor}
- name: instance_norm_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: scale, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: saved_mean, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: saved_variance, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: epsilon}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: scale_grad, intermediate: false}
  - {typename: Tensor, name: bias_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: InstanceNormGradInferMeta
    param: [x, scale, saved_mean, saved_variance, y_grad, epsilon]
  kernel:
    func: [instance_norm_grad]
    param: [x, scale, saved_mean, saved_variance, y_grad, epsilon]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: instance_norm_double_grad
  forward:
    name: instance_norm
    inputs:
    - {name: x, typename: Tensor}
    - {name: scale, typename: Tensor}
    - {name: bias, typename: Tensor}
    attrs:
    - {name: epsilon, typename: float}
    outputs:
    - {name: y, typename: Tensor}
    - {name: saved_mean, typename: Tensor}
    - {name: saved_variance, typename: Tensor}
- name: inverse_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: InverseGradInferMeta
    param: [out, out_grad]
  kernel:
    func: [inverse_grad]
    param: [out, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: inverse
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: kldiv_loss_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: reduction}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [kldiv_loss_grad]
    param: [x, label, out_grad, reduction]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: kldiv_loss
    inputs:
    - {name: x, typename: Tensor}
    - {name: label, typename: Tensor}
    attrs:
    - {name: reduction, typename: str}
    outputs:
    - {name: out, typename: Tensor}
- name: kron_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, y]
  kernel:
    func: [kron_grad]
    param: [x, y, out_grad]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [out_grad]
  inplace: null
  backward: null
  forward:
    name: kron
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: kthvalue_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: indices, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: k}
  - {typename: int, name: axis}
  - {typename: bool, name: keepdim}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [kthvalue_grad]
    param: [x, indices, out_grad, k, axis, keepdim]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: kthvalue
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: k, typename: int}
    - {name: axis, typename: int}
    - {name: keepdim, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
    - {name: indices, typename: Tensor}
- name: label_smooth_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: epsilon}
  outputs:
  - {typename: Tensor, name: label_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out_grad]
  kernel:
    func: [label_smooth_grad]
    param: [out_grad, epsilon]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: label_smooth
    inputs:
    - {name: label, typename: Tensor}
    - {name: prior_dist, typename: Tensor}
    attrs:
    - {name: epsilon, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: layer_norm_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: scale, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: bias, optional: true, no_need_buffer: true}
  - {typename: Tensor, name: mean, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: variance, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: epsilon}
  - {typename: int, name: begin_norm_axis}
  - {typename: bool, name: is_test}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: scale_grad, intermediate: false}
  - {typename: Tensor, name: bias_grad, intermediate: false}
  no_need_buffer: [bias]
  infer_meta:
    func: LayerNormGradInferMeta
    param: [x, scale, bias]
  kernel:
    func: [layer_norm_grad]
    param: [x, scale, bias, mean, variance, out_grad, epsilon, begin_norm_axis, is_test]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [out_grad]
  inplace: null
  backward: null
  forward:
    name: layer_norm
    inputs:
    - {name: x, typename: Tensor}
    - {name: scale, typename: Tensor}
    - {name: bias, typename: Tensor}
    attrs:
    - {name: epsilon, typename: float}
    - {name: begin_norm_axis, typename: int}
    - {name: is_test, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
    - {name: mean, typename: Tensor}
    - {name: variance, typename: Tensor}
- name: leaky_relu_double_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: alpha}
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [grad_x_grad]
  kernel:
    func: [leaky_relu_double_grad]
    param: [x, grad_x_grad, alpha]
    backend: null
    layout: null
    data_type: null
  inplace: {grad_out_grad: grad_x_grad}
  backward: null
  forward:
    name: leaky_relu_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: alpha, typename: float}
    outputs:
    - {name: grad_x, typename: Tensor}
- name: leaky_relu_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: alpha}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [leaky_relu_grad]
    param: [x, out_grad, alpha]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: leaky_relu_double_grad
  forward:
    name: leaky_relu
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: alpha, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: lerp_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: weight, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, y]
  kernel:
    func: [lerp_grad]
    param: [x, y, weight, out, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: lerp
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    - {name: weight, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: linear_interp_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_size, optional: true, no_need_buffer: false}
  - {typename: 'Tensor[]', name: size_tensor, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: scale_tensor, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: output_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: data_layout}
  - {typename: int, name: out_d}
  - {typename: int, name: out_h}
  - {typename: int, name: out_w}
  - {typename: 'float[]', name: scale}
  - {typename: str, name: interp_method}
  - {typename: bool, name: align_corners}
  - {typename: int, name: align_mode}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [linear_interp_grad]
    param: [x, out_size, size_tensor, scale_tensor, output_grad, data_layout, out_d,
      out_h, out_w, scale, interp_method, align_corners, align_mode]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [output_grad]
  inplace: null
  backward: null
  forward:
    name: linear_interp
    inputs:
    - {name: x, typename: Tensor}
    - {name: out_size, typename: Tensor}
    - {name: size_tensor, typename: 'Tensor[]'}
    - {name: scale_tensor, typename: Tensor}
    attrs:
    - {name: data_layout, typename: str}
    - {name: out_d, typename: int}
    - {name: out_h, typename: int}
    - {name: out_w, typename: int}
    - {name: scale, typename: 'float[]'}
    - {name: interp_method, typename: str}
    - {name: align_corners, typename: bool}
    - {name: align_mode, typename: int}
    outputs:
    - {name: output, typename: Tensor}
- name: log10_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [log10_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: log10
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: log1p_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [log1p_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: log1p
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: log2_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [log2_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: log2
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: log_double_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, x]
  kernel:
    func: [log_double_grad]
    param: [x, grad_out, grad_x_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {grad_out_grad: grad_x_grad}
  backward: null
  forward:
    name: log_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs: []
    outputs:
    - {name: grad_x, typename: Tensor}
- name: log_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [log_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: log_double_grad
  forward:
    name: log
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: log_loss_grad
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: epsilon}
  outputs:
  - {typename: Tensor, name: input_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [input]
  kernel:
    func: [log_loss_grad]
    param: [input, label, out_grad, epsilon]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: log_loss
    inputs:
    - {name: input, typename: Tensor}
    - {name: label, typename: Tensor}
    attrs:
    - {name: epsilon, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: log_softmax_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out]
  kernel:
    func: [log_softmax_grad]
    param: [out, out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: log_softmax
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: axis, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: logcumsumexp_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  - {typename: bool, name: flatten}
  - {typename: bool, name: exclusive}
  - {typename: bool, name: reverse}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [logcumsumexp_grad]
    param: [x, out, out_grad, axis, flatten, exclusive, reverse]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: logcumsumexp
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: axis, typename: int}
    - {name: flatten, typename: bool}
    - {name: exclusive, typename: bool}
    - {name: reverse, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: logit_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: eps}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [logit_grad]
    param: [x, out_grad, eps]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: logit
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: eps, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: logsigmoid_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [logsigmoid_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: logsigmoid
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: logsumexp_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: axis}
  - {typename: bool, name: keepdim}
  - {typename: bool, name: reduce_all}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [logsumexp_grad]
    param: [x, out, out_grad, axis, keepdim, reduce_all]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: logsumexp
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: axis, typename: 'int64_t[]'}
    - {name: keepdim, typename: bool}
    - {name: reduce_all, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: lu_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: pivots, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: pivot}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: LUGradInferMeta
    param: [x, out, pivots, out_grad, pivot]
  kernel:
    func: [lu_grad]
    param: [x, out, pivots, out_grad, pivot]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: lu
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: pivot, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
    - {name: pivots, typename: Tensor}
    - {name: infos, typename: Tensor}
- name: lu_unpack_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: pivots, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: l, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: u, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: pmat, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: l_grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: u_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: unpack_ludata}
  - {typename: bool, name: unpack_pivots}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: LUUnpackGradInferMeta
    param: [x, pivots, l, u, pmat, l_grad, u_grad, unpack_ludata, unpack_pivots]
  kernel:
    func: [lu_unpack_grad]
    param: [x, pivots, l, u, pmat, l_grad, u_grad, unpack_ludata, unpack_pivots]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: lu_unpack
    inputs:
    - {name: x, typename: Tensor}
    - {name: pivots, typename: Tensor}
    attrs:
    - {name: unpack_ludata, typename: bool}
    - {name: unpack_pivots, typename: bool}
    outputs:
    - {name: pmat, typename: Tensor}
    - {name: l, typename: Tensor}
    - {name: u, typename: Tensor}
- name: margin_cross_entropy_grad
  inputs:
  - {typename: Tensor, name: logits, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: softmax, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: loss_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: return_softmax}
  - {typename: int, name: ring_id}
  - {typename: int, name: rank}
  - {typename: int, name: nranks}
  - {typename: float, name: margin1}
  - {typename: float, name: margin2}
  - {typename: float, name: margin3}
  - {typename: float, name: scale}
  outputs:
  - {typename: Tensor, name: logits_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MarginCrossEntropyGradInferMeta
    param: [logits, label, softmax, loss_grad, return_softmax, ring_id, rank, nranks,
      margin1, margin2, margin3, scale]
  kernel:
    func: [margin_cross_entropy_grad]
    param: [logits, label, softmax, loss_grad, return_softmax, ring_id, rank, nranks,
      margin1, margin2, margin3, scale]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [softmax]
  inplace: {logits_grad: softmax}
  backward: null
  forward:
    name: margin_cross_entropy
    inputs:
    - {name: logits, typename: Tensor}
    - {name: label, typename: Tensor}
    attrs:
    - {name: return_softmax, typename: bool}
    - {name: ring_id, typename: int}
    - {name: rank, typename: int}
    - {name: nranks, typename: int}
    - {name: margin1, typename: float}
    - {name: margin2, typename: float}
    - {name: margin3, typename: float}
    - {name: scale, typename: float}
    outputs:
    - {name: softmax, typename: Tensor}
    - {name: loss, typename: Tensor}
- name: masked_select_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: mask, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [masked_select_grad]
    param: [x, mask, out_grad]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: null
  forward:
    name: masked_select
    inputs:
    - {name: x, typename: Tensor}
    - {name: mask, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: matmul_double_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: grad_y_grad, optional: true, no_need_buffer: false}
  attrs:
  - {typename: bool, name: transpose_x, default_value: 'false'}
  - {typename: bool, name: transpose_y, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralTernaryGradInferMeta
    param: [x, y, grad_out]
  kernel:
    func: [matmul_double_grad]
    param: [x, y, grad_out, grad_x_grad, grad_y_grad, transpose_x, transpose_y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: matmul_triple_grad
  forward:
    name: matmul_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: transpose_x, typename: bool}
    - {name: transpose_y, typename: bool}
    outputs:
    - {name: grad_x, typename: Tensor}
    - {name: grad_y, typename: Tensor}
- name: matmul_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: transpose_x, default_value: 'false'}
  - {typename: bool, name: transpose_y, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, y]
  kernel:
    func: [matmul_grad]
    param: [x, y, out_grad, transpose_x, transpose_y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: matmul_double_grad
  forward:
    name: matmul
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    attrs:
    - {name: transpose_x, typename: bool}
    - {name: transpose_y, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: matmul_triple_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: fwd_grad_out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: fwd_grad_grad_x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: fwd_grad_grad_y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: grad_y_grad, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: grad_grad_out_grad, optional: true, no_need_buffer: false}
  attrs:
  - {typename: bool, name: transpose_x, default_value: 'false'}
  - {typename: bool, name: transpose_y, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  - {typename: Tensor, name: fwd_grad_out_grad, intermediate: false}
  - {typename: Tensor, name: fwd_grad_grad_x_grad, intermediate: false}
  - {typename: Tensor, name: fwd_grad_grad_y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralQuinaryGradInferMeta
    param: [x, y, fwd_grad_out, fwd_grad_grad_x, fwd_grad_grad_y]
  kernel:
    func: [matmul_triple_grad]
    param: [x, y, fwd_grad_out, fwd_grad_grad_x, fwd_grad_grad_y, grad_x_grad, grad_y_grad,
      grad_grad_out_grad, transpose_x, transpose_y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: matmul_double_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    - {name: fwd_grad_out, typename: Tensor}
    - {name: fwd_grad_grad_x, typename: Tensor}
    - {name: fwd_grad_grad_y, typename: Tensor}
    attrs:
    - {name: transpose_x, typename: bool}
    - {name: transpose_y, typename: bool}
    outputs:
    - {name: grad_x, typename: Tensor}
    - {name: grad_y, typename: Tensor}
    - {name: grad_grad_out, typename: Tensor}
- name: matrix_power_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: n}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [matrix_power_grad]
    param: [x, out, out_grad, n]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: matrix_power
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: n, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: max_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: dims, default_value: '{}'}
  - {typename: bool, name: keep_dim, default_value: 'false'}
  - {typename: bool, name: reduce_all, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [max_grad]
    param: [x, out, out_grad, dims, keep_dim, reduce_all]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: max
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: dims, typename: IntArray}
    - {name: keep_dim, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: max_pool2d_with_index_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: mask, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: kernel_size}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: bool, name: global_pooling}
  - {typename: bool, name: adaptive}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MaxPoolWithIndexGradInferMeta
    param: [x, mask, out_grad, kernel_size, strides, paddings, global_pooling, adaptive]
  kernel:
    func: [max_pool2d_with_index_grad]
    param: [x, mask, out_grad, kernel_size, strides, paddings, global_pooling, adaptive]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: max_pool2d_with_index
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: kernel_size, typename: 'int[]'}
    - {name: strides, typename: 'int[]'}
    - {name: paddings, typename: 'int[]'}
    - {name: global_pooling, typename: bool}
    - {name: adaptive, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
    - {name: mask, typename: Tensor}
- name: max_pool3d_with_index_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: mask, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: kernel_size}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: bool, name: global_pooling}
  - {typename: bool, name: adaptive}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MaxPoolWithIndexGradInferMeta
    param: [x, mask, out_grad, kernel_size, strides, paddings, global_pooling, adaptive]
  kernel:
    func: [max_pool3d_with_index_grad]
    param: [x, mask, out_grad, kernel_size, strides, paddings, global_pooling, adaptive]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: max_pool3d_with_index
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: kernel_size, typename: 'int[]'}
    - {name: strides, typename: 'int[]'}
    - {name: paddings, typename: 'int[]'}
    - {name: global_pooling, typename: bool}
    - {name: adaptive, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
    - {name: mask, typename: Tensor}
- name: maximum_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, y]
  kernel:
    func: [maximum_grad]
    param: [x, y, out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: maximum
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: maxout_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: groups}
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralUnaryGradInferMeta
    param: [x]
  kernel:
    func: [maxout_grad]
    param: [x, out, out_grad, groups, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: maxout
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: groups, typename: int}
    - {name: axis, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: mean_all_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [mean_all_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: mean_all
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: mean_double_grad
  inputs:
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: dims, default_value: '{}'}
  - {typename: bool, name: keep_dim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: mean, args: 'grad_x_grad, dims, keep_dim'}
  backward: null
  forward:
    name: mean_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: dims, typename: IntArray}
    - {name: keep_dim, typename: bool}
    - {name: reduce_all, typename: bool}
    outputs:
    - {name: grad_x, typename: Tensor}
- name: mean_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: dims, default_value: '{}'}
  - {typename: bool, name: keep_dim, default_value: 'false'}
  - {typename: bool, name: reduce_all, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [mean_grad]
    param: [x, out_grad, dims, keep_dim, reduce_all]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: mean_double_grad
  forward:
    name: mean
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: dims, typename: IntArray}
    - {name: keep_dim, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: meshgrid_grad
  inputs:
  - {typename: 'Tensor[]', name: inputs, optional: false, no_need_buffer: false}
  - {typename: 'Tensor[]', name: outputs_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: 'Tensor[]', name: inputs_grad, size: inputs.size(), intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MeshgridGradInferMeta
    param: [inputs, outputs_grad]
  kernel:
    func: [meshgrid_grad]
    param: [inputs, outputs_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: meshgrid
    inputs:
    - {name: inputs, typename: 'Tensor[]'}
    attrs: []
    outputs:
    - {name: outputs, typename: 'Tensor[]'}
- name: min_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: dims, default_value: '{}'}
  - {typename: bool, name: keep_dim, default_value: 'false'}
  - {typename: bool, name: reduce_all, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [min_grad]
    param: [x, out, out_grad, dims, keep_dim, reduce_all]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: min
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: dims, typename: IntArray}
    - {name: keep_dim, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: minimum_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, y]
  kernel:
    func: [minimum_grad]
    param: [x, y, out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: minimum
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: mish_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: threshold}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [mish_grad]
    param: [x, out_grad, threshold]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: mish
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: threshold, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: mode_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: indices, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  - {typename: bool, name: keepdim}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [mode_grad]
    param: [x, indices, out_grad, axis, keepdim]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: mode
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: axis, typename: int}
    - {name: keepdim, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
    - {name: indices, typename: Tensor}
- name: multi_dot_grad
  inputs:
  - {typename: 'Tensor[]', name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: 'Tensor[]', name: x_grad, size: x.size(), intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MultiDotGradInferMeta
    param: [x, out_grad]
  kernel:
    func: [multi_dot_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: multi_dot
    inputs:
    - {name: x, typename: 'Tensor[]'}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: multiplex_grad
  inputs:
  - {typename: 'Tensor[]', name: ins, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: ids, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: 'Tensor[]', name: ins_grad, size: ins.size(), intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: MultiplexGradInferMeta
    param: [ids, out_grad]
  kernel:
    func: [multiplex_grad]
    param: [ids, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: multiplex
    inputs:
    - {name: ins, typename: 'Tensor[]'}
    - {name: ids, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: multiply_double_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: grad_y_grad, optional: true, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralTernaryGradInferMeta
    param: [x, y, grad_out]
  kernel:
    func: [multiply_double_grad]
    param: [x, y, grad_out, grad_x_grad, grad_y_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: {grad_out_grad: grad_x_grad}
  backward: multiply_triple_grad
  forward:
    name: multiply_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: axis, typename: int}
    outputs:
    - {name: grad_x, typename: Tensor}
    - {name: grad_y, typename: Tensor}
- name: multiply_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, y]
  kernel:
    func: [multiply_grad]
    param: [x, y, out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: multiply_double_grad
  forward:
    name: multiply
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: multiply_triple_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: fwd_grad_out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: fwd_grad_grad_x, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: fwd_grad_grad_y, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_y_grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_grad_out_grad, optional: true, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  - {typename: Tensor, name: fwd_grad_out_grad, intermediate: false}
  - {typename: Tensor, name: fwd_grad_grad_x_grad, intermediate: false}
  - {typename: Tensor, name: fwd_grad_grad_y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralQuinaryGradInferMeta
    param: [x, y, fwd_grad_out, x, y]
  kernel:
    func: [multiply_triple_grad]
    param: [x, y, fwd_grad_out, fwd_grad_grad_x, fwd_grad_grad_y, grad_x_grad, grad_y_grad,
      grad_grad_out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: multiply_double_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    - {name: fwd_grad_out, typename: Tensor}
    - {name: fwd_grad_grad_x, typename: Tensor}
    - {name: fwd_grad_grad_y, typename: Tensor}
    attrs:
    - {name: aixs, typename: int}
    outputs:
    - {name: grad_x, typename: Tensor}
    - {name: grad_y, typename: Tensor}
    - {name: grad_grad_out, typename: Tensor}
- name: nearest_interp_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_size, optional: true, no_need_buffer: false}
  - {typename: 'Tensor[]', name: size_tensor, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: scale_tensor, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: output_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: data_layout}
  - {typename: int, name: out_d}
  - {typename: int, name: out_h}
  - {typename: int, name: out_w}
  - {typename: 'float[]', name: scale}
  - {typename: str, name: interp_method}
  - {typename: bool, name: align_corners}
  - {typename: int, name: align_mode}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [nearest_interp_grad]
    param: [x, out_size, size_tensor, scale_tensor, output_grad, data_layout, out_d,
      out_h, out_w, scale, interp_method, align_corners, align_mode]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [output_grad]
  inplace: null
  backward: null
  forward:
    name: nearest_interp
    inputs:
    - {name: x, typename: Tensor}
    - {name: out_size, typename: Tensor}
    - {name: size_tensor, typename: 'Tensor[]'}
    - {name: scale_tensor, typename: Tensor}
    attrs:
    - {name: data_layout, typename: str}
    - {name: out_d, typename: int}
    - {name: out_h, typename: int}
    - {name: out_w, typename: int}
    - {name: scale, typename: 'float[]'}
    - {name: interp_method, typename: str}
    - {name: align_corners, typename: bool}
    - {name: align_mode, typename: int}
    outputs:
    - {name: output, typename: Tensor}
- name: nll_loss_grad
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: weight, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: total_weight, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int64_t, name: ignore_index}
  - {typename: str, name: reduction}
  outputs:
  - {typename: Tensor, name: input_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: NllLossGradInferMeta
    param: [input, label, weight, total_weight, out_grad, ignore_index, reduction]
  kernel:
    func: [nll_loss_grad]
    param: [input, label, weight, total_weight, out_grad, ignore_index, reduction]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [input]
  inplace: null
  backward: null
  forward:
    name: nll_loss
    inputs:
    - {name: input, typename: Tensor}
    - {name: label, typename: Tensor}
    - {name: weight, typename: Tensor}
    attrs:
    - {name: ignore_index, typename: int64_t}
    - {name: reduction, typename: str}
    outputs:
    - {name: out, typename: Tensor}
    - {name: total_weight, typename: Tensor}
- name: norm_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: norm, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  - {typename: float, name: epsilon}
  - {typename: bool, name: is_test}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [norm_grad]
    param: [x, norm, out_grad, axis, epsilon, is_test]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: norm
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: axis, typename: int}
    - {name: epsilon, typename: float}
    - {name: is_test, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
    - {name: norm, typename: Tensor}
- name: overlap_add_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: hop_length}
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: OverlapAddGradInferMeta
    param: [x, out_grad, hop_length, axis]
  kernel:
    func: [overlap_add_grad]
    param: [x, out_grad, hop_length, axis]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: null
  forward:
    name: overlap_add
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: hop_length, typename: int}
    - {name: axis, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: p_norm_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: porder}
  - {typename: int, name: axis}
  - {typename: float, name: epsilon}
  - {typename: bool, name: keepdim}
  - {typename: bool, name: asvector}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [p_norm_grad]
    param: [x, out, out_grad, porder, axis, epsilon, keepdim, asvector]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: p_norm
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: porder, typename: float}
    - {name: axis, typename: int}
    - {name: epsilon, typename: float}
    - {name: keepdim, typename: bool}
    - {name: asvector, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: pad3d_double_grad
  inputs:
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: paddings}
  - {typename: str, name: mode}
  - {typename: float, name: pad_value}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: Pad3dInferMeta
    param: [grad_x_grad, paddings, mode, pad_value, data_format]
  kernel:
    func: [pad3d]
    param: [grad_x_grad, paddings, mode, pad_value, data_format]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: pad3d_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: paddings, typename: IntArray}
    - {name: mode, typename: str}
    - {name: pad_value, typename: float}
    - {name: data_format, typename: str}
    outputs:
    - {name: grad_x, typename: Tensor}
- name: pad3d_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: paddings}
  - {typename: str, name: mode}
  - {typename: float, name: pad_value}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [pad3d_grad]
    param: [x, out_grad, paddings, mode, pad_value, data_format]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: pad3d_double_grad
  forward:
    name: pad3d
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: paddings, typename: IntArray}
    - {name: mode, typename: str}
    - {name: pad_value, typename: float}
    - {name: data_format, typename: str}
    outputs:
    - {name: out, typename: Tensor}
- name: pad_double_grad
  inputs:
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: paddings}
  - {typename: Scalar, name: pad_value}
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: PadInferMeta
    param: [grad_x_grad, paddings, pad_value]
  kernel:
    func: [pad]
    param: [grad_x_grad, paddings, pad_value]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: pad_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: paddings, typename: 'int[]'}
    - {name: pad_value, typename: Scalar}
    outputs:
    - {name: grad_x, typename: Tensor}
- name: pad_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: paddings}
  - {typename: Scalar, name: pad_value}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [pad_grad]
    param: [out_grad, paddings, pad_value]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: pad_double_grad
  forward:
    name: pad
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: paddings, typename: 'int[]'}
    - {name: pad_value, typename: Scalar}
    outputs:
    - {name: out, typename: Tensor}
- name: pixel_shuffle_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: upscale_factor}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: PixelShuffleGradInferMeta
    param: [out_grad, upscale_factor, data_format]
  kernel:
    func: [pixel_shuffle_grad]
    param: [out_grad, upscale_factor, data_format]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: pixel_shuffle
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: upscale_factor, typename: int}
    - {name: data_format, typename: str}
    outputs:
    - {name: out, typename: Tensor}
- name: pool2d_double_grad
  inputs:
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: kernel_size}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: bool, name: ceil_mode}
  - {typename: bool, name: exclusive}
  - {typename: str, name: data_format}
  - {typename: str, name: pooling_type}
  - {typename: bool, name: global_pooling}
  - {typename: bool, name: adaptive}
  - {typename: str, name: padding_algorithm}
  - {typename: bool, name: use_gpudnn}
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: Pool2DInferMeta
    param: [grad_x_grad, kernel_size, strides, paddings, ceil_mode, exclusive, data_format,
      pooling_type, global_pooling, adaptive, padding_algorithm]
  kernel:
    func: [pool2d_double_grad]
    param: [grad_x_grad, kernel_size, strides, paddings, ceil_mode, exclusive, data_format,
      pooling_type, global_pooling, adaptive, padding_algorithm]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: pool2d_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: out, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: kernel_size, typename: IntArray}
    - {name: strides, typename: 'int[]'}
    - {name: paddings, typename: 'int[]'}
    - {name: ceil_mode, typename: bool}
    - {name: exclusive, typename: bool}
    - {name: data_format, typename: str}
    - {name: pooling_type, typename: str}
    - {name: global_pooling, typename: bool}
    - {name: adaptive, typename: bool}
    - {name: padding_algorithm, typename: str}
    - {name: use_gpudnn, typename: bool}
    outputs:
    - {name: grad_x, typename: Tensor}
- name: pool2d_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: kernel_size}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: bool, name: ceil_mode}
  - {typename: bool, name: exclusive}
  - {typename: str, name: data_format}
  - {typename: str, name: pooling_type}
  - {typename: bool, name: global_pooling}
  - {typename: bool, name: adaptive}
  - {typename: str, name: padding_algorithm}
  - {typename: bool, name: use_gpudnn}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [pool2d_grad]
    param: [x, out, out_grad, kernel_size, strides, paddings, ceil_mode, exclusive,
      data_format, pooling_type, global_pooling, adaptive, padding_algorithm]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: pool2d_double_grad
  forward:
    name: pool2d
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: kernel_size, typename: IntArray}
    - {name: strides, typename: 'int[]'}
    - {name: paddings, typename: 'int[]'}
    - {name: ceil_mode, typename: bool}
    - {name: exclusive, typename: bool}
    - {name: data_format, typename: str}
    - {name: pooling_type, typename: str}
    - {name: global_pooling, typename: bool}
    - {name: adaptive, typename: bool}
    - {name: padding_algorithm, typename: str}
    - {name: use_gpudnn, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: pool3d_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: kernel_size}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: bool, name: ceil_mode}
  - {typename: bool, name: exclusive}
  - {typename: str, name: data_format}
  - {typename: str, name: pooling_type}
  - {typename: bool, name: global_pooling}
  - {typename: bool, name: adaptive}
  - {typename: str, name: padding_algorithm}
  - {typename: bool, name: use_gpudnn}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [pool3d_grad]
    param: [x, out, out_grad, kernel_size, strides, paddings, ceil_mode, exclusive,
      data_format, pooling_type, global_pooling, adaptive, padding_algorithm]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: pool3d
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: kernel_size, typename: 'int[]'}
    - {name: strides, typename: 'int[]'}
    - {name: paddings, typename: 'int[]'}
    - {name: ceil_mode, typename: bool}
    - {name: exclusive, typename: bool}
    - {name: data_format, typename: str}
    - {name: pooling_type, typename: str}
    - {name: global_pooling, typename: bool}
    - {name: adaptive, typename: bool}
    - {name: padding_algorithm, typename: str}
    - {name: use_gpudnn, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: pow_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: s, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [pow_grad]
    param: [x, out_grad, s]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: pow
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: s, typename: Scalar}
    outputs:
    - {name: out, typename: Tensor}
- name: prelu_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: alpha, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: data_format}
  - {typename: str, name: mode}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: alpha_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, alpha]
  kernel:
    func: [prelu_grad]
    param: [x, alpha, out_grad, data_format, mode]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: prelu
    inputs:
    - {name: x, typename: Tensor}
    - {name: alpha, typename: Tensor}
    attrs:
    - {name: data_format, typename: str}
    - {name: mode, typename: str}
    outputs:
    - {name: out, typename: Tensor}
- name: psroi_pool_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: boxes, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: boxes_num, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: pooled_height}
  - {typename: int, name: pooled_width}
  - {typename: int, name: output_channels}
  - {typename: float, name: spatial_scale}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralUnaryGradInferMeta
    param: [x]
  kernel:
    func: [psroi_pool_grad]
    param: [x, boxes, boxes_num, out_grad, pooled_height, pooled_width, output_channels,
      spatial_scale]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: null
  forward:
    name: psroi_pool
    inputs:
    - {name: x, typename: Tensor}
    - {name: boxes, typename: Tensor}
    - {name: boxes_num, typename: Tensor}
    attrs:
    - {name: pooled_height, typename: int}
    - {name: pooled_width, typename: int}
    - {name: output_channels, typename: int}
    - {name: spatial_scale, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: put_along_axis_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  - {typename: str, name: reduce}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: value_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, index]
  kernel:
    func: [put_along_axis_grad]
    param: [x, index, out_grad, axis, reduce]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: put_along_axis
    inputs:
    - {name: x, typename: Tensor}
    - {name: index, typename: Tensor}
    - {name: value, typename: Tensor}
    attrs:
    - {name: axis, typename: int}
    - {name: reduce, typename: str}
    outputs:
    - {name: out, typename: Tensor}
- name: qr_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: q, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: r, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: q_grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: r_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: mode}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [qr_grad]
    param: [x, q, r, q_grad, r_grad, mode]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: qr
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: mode, typename: str}
    outputs:
    - {name: q, typename: Tensor}
    - {name: r, typename: Tensor}
- name: real_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: real_grad_impl, args: 'out_grad, x_grad'}
  backward: null
  forward:
    name: real
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: reciprocal_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out]
  kernel:
    func: [reciprocal_grad]
    param: [out, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: reciprocal
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: reduce_prod_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: dims}
  - {typename: bool, name: keep_dim}
  - {typename: bool, name: reduce_all}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [prod_grad]
    param: [x, out, out_grad, dims, keep_dim, reduce_all]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: reduce_prod
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: dims, typename: IntArray}
    - {name: keep_dim, typename: bool}
    - {name: reduce_all, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: relu6_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: threshold}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out]
  kernel:
    func: [relu6_grad]
    param: [out, out_grad, threshold]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: relu6
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: threshold, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: relu_double_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out]
  kernel:
    func: [relu_double_grad]
    param: [out, grad_x_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {grad_out_grad: grad_x_grad}
  backward: null
  forward:
    name: relu_grad
    inputs:
    - {name: out, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs: []
    outputs:
    - {name: grad_x, typename: Tensor}
- name: relu_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out]
  kernel:
    func: [relu_grad]
    param: [out, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: relu_double_grad
  forward:
    name: relu
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: renorm_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: p}
  - {typename: int, name: axis}
  - {typename: float, name: max_norm}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out_grad]
  kernel:
    func: [renorm_grad]
    param: [x, out_grad, p, axis, max_norm]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: renorm
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: p, typename: float}
    - {name: axis, typename: int}
    - {name: max_norm, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: repeat_interleave_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: repeats}
  - {typename: int, name: dim}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [repeat_interleave_grad]
    param: [x, out_grad, repeats, dim]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: repeat_interleave
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: repeats, typename: int}
    - {name: dim, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: repeat_interleave_with_tensor_index_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: repeats, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: dim}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [repeat_interleave_with_tensor_index_grad]
    param: [x, repeats, out_grad, dim]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: null
  forward:
    name: repeat_interleave_with_tensor_index
    inputs:
    - {name: x, typename: Tensor}
    - {name: repeats, typename: Tensor}
    attrs:
    - {name: dim, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: reshape_double_grad
  inputs:
  - {typename: Tensor, name: grad_out, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: [grad_out]
  infer_meta:
    func: UnchangedInferMeta
    param: [grad_out]
  kernel:
    func: [reshape_double_grad]
    param: [grad_out, grad_x_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {grad_out_grad: grad_x_grad}
  backward: null
  forward:
    name: reshape_grad
    inputs:
    - {name: xshape, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs: []
    outputs:
    - {name: grad_x, typename: Tensor}
- name: reshape_grad
  inputs:
  - {typename: Tensor, name: xshape, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: KernelWithXShapeInferMeta
    param: [xshape]
  kernel:
    func: [reshape_grad]
    param: [out_grad]
    backend:
      ordered: false
      candidates: [out_grad]
    layout:
      ordered: false
      candidates: [out_grad]
    data_type:
      ordered: false
      candidates: [out_grad]
  inplace: {x_grad: out_grad}
  backward: reshape_double_grad
  forward:
    name: reshape
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: shape, typename: IntArray}
    outputs:
    - {name: out, typename: Tensor}
    - {name: xshape, typename: Tensor}
- name: reverse_array_grad
  inputs:
  - {typename: 'Tensor[]', name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: axis}
  outputs:
  - {typename: 'Tensor[]', name: x_grad, size: out_grad.size(), intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: ReverseArrayInferMeta
    param: [out_grad, axis]
  kernel:
    func: [reverse]
    param: [out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: reverse_array
    inputs:
    - {name: x, typename: 'Tensor[]'}
    attrs:
    - {name: axis, typename: IntArray}
    outputs:
    - {name: out, typename: 'Tensor[]'}
- name: reverse_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: axis}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: reverse, args: 'out_grad, axis'}
  backward: null
  forward:
    name: reverse
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: axis, typename: IntArray}
    outputs:
    - {name: out, typename: Tensor}
- name: roi_align_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: boxes, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: boxes_num, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: pooled_height}
  - {typename: int, name: pooled_width}
  - {typename: float, name: spatial_scale}
  - {typename: int, name: sampling_ratio}
  - {typename: bool, name: aligned}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [roi_align_grad]
    param: [x, boxes, boxes_num, out_grad, pooled_height, pooled_width, spatial_scale,
      sampling_ratio, aligned]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [boxes]
  inplace: null
  backward: null
  forward:
    name: roi_align
    inputs:
    - {name: x, typename: Tensor}
    - {name: boxes, typename: Tensor}
    - {name: boxes_num, typename: Tensor}
    attrs:
    - {name: pooled_height, typename: int}
    - {name: pooled_width, typename: int}
    - {name: spatial_scale, typename: float}
    - {name: sampling_ratio, typename: int}
    - {name: aligned, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: roi_pool_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: boxes, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: boxes_num, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: arg_max, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: pooled_height}
  - {typename: int, name: pooled_width}
  - {typename: float, name: spatial_scale}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [roi_pool_grad]
    param: [x, boxes, boxes_num, arg_max, out_grad, pooled_height, pooled_width, spatial_scale]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: null
  forward:
    name: roi_pool
    inputs:
    - {name: x, typename: Tensor}
    - {name: boxes, typename: Tensor}
    - {name: boxes_num, typename: Tensor}
    attrs:
    - {name: pooled_height, typename: int}
    - {name: pooled_width, typename: int}
    - {name: spatial_scale, typename: float}
    outputs:
    - {name: out, typename: Tensor}
    - {name: arg_max, typename: Tensor}
- name: roll_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: shifts}
  - {typename: 'int64_t[]', name: axis}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [roll_grad]
    param: [x, out_grad, shifts, axis]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: null
  forward:
    name: roll
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: shifts, typename: IntArray}
    - {name: axis, typename: 'int64_t[]'}
    outputs:
    - {name: out, typename: Tensor}
- name: round_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out_grad]
  kernel:
    func: [round_grad]
    param: [out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: round
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: rsqrt_double_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out_grad, intermediate: false}
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [out, out]
  kernel:
    func: [rsqrt_double_grad]
    param: [out, grad_x, grad_x_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {grad_out_grad: grad_x_grad}
  backward: null
  forward:
    name: rsqrt_grad
    inputs:
    - {name: out, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs: []
    outputs:
    - {name: grad_x, typename: Tensor}
- name: rsqrt_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out]
  kernel:
    func: [rsqrt_grad]
    param: [out, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: rsqrt_double_grad
  forward:
    name: rsqrt
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: scale_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: scale, default_value: '1.0'}
  - {typename: bool, name: bias_after_scale, default_value: 'true'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: scale, args: 'out_grad, scale, 0.0, bias_after_scale'}
  backward: null
  forward:
    name: scale
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: scale, typename: Scalar}
    - {name: bias, typename: float}
    - {name: bias_after_scale, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: scatter_grad
  inputs:
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: updates, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: overwrite}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: updates_grad, intermediate: false}
  no_need_buffer: [updates]
  infer_meta:
    func: ScatterGradInferMeta
    param: [index, updates, out_grad, overwrite]
  kernel:
    func: [scatter_grad]
    param: [index, updates, out_grad, overwrite]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: scatter
    inputs:
    - {name: x, typename: Tensor}
    - {name: index, typename: Tensor}
    - {name: updates, typename: Tensor}
    attrs:
    - {name: overwrite, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: scatter_nd_add_grad
  inputs:
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: updates, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: updates_grad, intermediate: false}
  no_need_buffer: [updates]
  infer_meta:
    func: ScatterNdAddGradInferMeta
    param: [index, updates, out_grad]
  kernel:
    func: [scatter_nd_add_grad]
    param: [index, updates, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: scatter_nd_add
    inputs:
    - {name: x, typename: Tensor}
    - {name: index, typename: Tensor}
    - {name: updates, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: segment_pool_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: segment_ids, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: summed_ids, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: pooltype}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [segment_pool_grad]
    param: [x, segment_ids, out, summed_ids, out_grad, pooltype]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: null
  forward:
    name: segment_pool
    inputs:
    - {name: x, typename: Tensor}
    - {name: segment_ids, typename: Tensor}
    attrs:
    - {name: pooltype, typename: str}
    outputs:
    - {name: out, typename: Tensor}
    - {name: summed_ids, typename: Tensor}
- name: selu_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: scale}
  - {typename: float, name: alpha}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out]
  kernel:
    func: [selu_grad]
    param: [out, out_grad, scale, alpha]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: selu
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: scale, typename: float}
    - {name: alpha, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: sigmoid_cross_entropy_with_logits_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: label, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: normalize}
  - {typename: int, name: ignore_index}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [sigmoid_cross_entropy_with_logits_grad]
    param: [x, label, out_grad, normalize, ignore_index]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: sigmoid_cross_entropy_with_logits
    inputs:
    - {name: x, typename: Tensor}
    - {name: label, typename: Tensor}
    attrs:
    - {name: normalize, typename: bool}
    - {name: ignore_index, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: sigmoid_double_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: fwd_grad_out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out_grad, intermediate: false}
  - {typename: Tensor, name: fwd_grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [out, fwd_grad_out]
  kernel:
    func: [sigmoid_double_grad]
    param: [out, fwd_grad_out, grad_x_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {fwd_grad_out_grad: grad_x_grad}
  backward: sigmoid_triple_grad
  forward:
    name: sigmoid_grad
    inputs:
    - {name: out, typename: Tensor}
    - {name: fwd_grad_out, typename: Tensor}
    attrs: []
    outputs:
    - {name: grad_x, typename: Tensor}
- name: sigmoid_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out]
  kernel:
    func: [sigmoid_grad]
    param: [out, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: sigmoid_double_grad
  forward:
    name: sigmoid
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: sigmoid_triple_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: fwd_grad_out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_grad_x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_out_grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_grad_out_grad, optional: true, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out_grad, intermediate: false}
  - {typename: Tensor, name: fwd_grad_out_grad, intermediate: false}
  - {typename: Tensor, name: grad_grad_x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralTernaryGradInferMeta
    param: [out, fwd_grad_out, grad_grad_x]
  kernel:
    func: [sigmoid_triple_grad]
    param: [out, fwd_grad_out, grad_grad_x, grad_out_grad, grad_grad_out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {fwd_grad_out_grad: grad_grad_x}
  backward: null
  forward:
    name: sigmoid_double_grad
    inputs:
    - {name: out, typename: Tensor}
    - {name: fwd_grad_out, typename: Tensor}
    - {name: grad_grad_x, typename: Tensor}
    attrs: []
    outputs:
    - {name: grad_out, typename: Tensor}
    - {name: grad_grad_out, typename: Tensor}
- name: sign_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: scale, args: 'out_grad, 0.0, 0.0, true'}
  backward: null
  forward:
    name: sign
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: silu_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [silu_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: silu
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: sin_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [sin_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: sin
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: sinh_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [sinh_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: sinh
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: slice_double_grad
  inputs:
  - {typename: Tensor, name: grad_input_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: axes}
  - {typename: IntArray, name: starts}
  - {typename: IntArray, name: ends}
  - {typename: 'int64_t[]', name: infer_flags}
  - {typename: 'int64_t[]', name: decrease_axis}
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: slice, args: 'grad_input_grad, axes, starts, ends, infer_flags, decrease_axis'}
  backward: null
  forward:
    name: slice_grad
    inputs:
    - {name: input, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: axes, typename: 'int64_t[]'}
    - {name: starts, typename: IntArray}
    - {name: ends, typename: IntArray}
    - {name: infer_flags, typename: 'int64_t[]'}
    - {name: decrease_axis, typename: 'int64_t[]'}
    outputs:
    - {name: grad_input, typename: Tensor}
- name: slice_grad
  inputs:
  - {typename: Tensor, name: input, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int64_t[]', name: axes}
  - {typename: IntArray, name: starts}
  - {typename: IntArray, name: ends}
  - {typename: 'int64_t[]', name: infer_flags}
  - {typename: 'int64_t[]', name: decrease_axis}
  outputs:
  - {typename: Tensor, name: input_grad, intermediate: false}
  no_need_buffer: [input]
  infer_meta:
    func: UnchangedInferMeta
    param: [input]
  kernel:
    func: [slice_grad]
    param: [input, out_grad, axes, starts, ends, infer_flags, decrease_axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: slice_double_grad
  forward:
    name: slice
    inputs:
    - {name: input, typename: Tensor}
    attrs:
    - {name: axes, typename: 'int64_t[]'}
    - {name: starts, typename: IntArray}
    - {name: ends, typename: IntArray}
    - {name: infer_flags, typename: 'int64_t[]'}
    - {name: decrease_axis, typename: 'int64_t[]'}
    outputs:
    - {name: out, typename: Tensor}
- name: slogdet_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [slogdeterminant_grad]
    param: [x, out, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: slogdet
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: soft_shrink_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: lambda}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [soft_shrink_grad]
    param: [x, out_grad, lambda]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: soft_shrink
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: lambda, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: softmax_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out]
  kernel:
    func: [softmax_grad]
    param: [out, out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: softmax
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: axis, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: softplus_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: beta}
  - {typename: float, name: threshold}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [softplus_grad]
    param: [x, out_grad, beta, threshold]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: softplus
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: beta, typename: float}
    - {name: threshold, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: softsign_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [softsign_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: softsign
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: spectral_norm_grad
  inputs:
  - {typename: Tensor, name: weight, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: u, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: v, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: dim}
  - {typename: int, name: power_iters}
  - {typename: float, name: eps}
  outputs:
  - {typename: Tensor, name: weight_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: SpectralNormGradInferMeta
    param: [weight, u, v, out_grad, dim, power_iters, eps]
  kernel:
    func: [spectral_norm_grad]
    param: [weight, u, v, out_grad, dim, power_iters, eps]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [out_grad]
  inplace: null
  backward: null
  forward:
    name: spectral_norm
    inputs:
    - {name: weight, typename: Tensor}
    - {name: u, typename: Tensor}
    - {name: v, typename: Tensor}
    attrs:
    - {name: dim, typename: int}
    - {name: power_iters, typename: int}
    - {name: eps, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: split_grad
  inputs:
  - {typename: 'Tensor[]', name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: concat, args: 'out_grad, axis'}
  backward: null
  forward:
    name: split
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: num_or_sections, typename: IntArray}
    - {name: axis, typename: Scalar}
    outputs:
    - {name: out, typename: 'Tensor[]'}
- name: split_with_num_grad
  inputs:
  - {typename: 'Tensor[]', name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: concat, args: 'out_grad, axis'}
  backward: null
  forward:
    name: split_with_num
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: num, typename: int}
    - {name: axis, typename: Scalar}
    outputs:
    - {name: out, typename: 'Tensor[]'}
- name: sqrt_double_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out_grad, intermediate: false}
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [out, out]
  kernel:
    func: [sqrt_double_grad]
    param: [out, grad_x, grad_x_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {grad_out_grad: grad_x_grad}
  backward: null
  forward:
    name: sqrt_grad
    inputs:
    - {name: out, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs: []
    outputs:
    - {name: grad_x, typename: Tensor}
- name: sqrt_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out]
  kernel:
    func: [sqrt_grad]
    param: [out, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: sqrt_double_grad
  forward:
    name: sqrt
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: square_double_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, x]
  kernel:
    func: [square_double_grad]
    param: [x, grad_out, grad_x_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {grad_out_grad: grad_x_grad}
  backward: null
  forward:
    name: square_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs: []
    outputs:
    - {name: grad_x, typename: Tensor}
- name: square_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [square_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: square_double_grad
  forward:
    name: square
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: squared_l2_norm_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [squared_l2_norm_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: squared_l2_norm
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: squeeze_double_grad
  inputs:
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: axes}
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: squeeze, args: 'grad_x_grad, axes'}
  backward: null
  forward:
    name: squeeze_grad
    inputs:
    - {name: xshape, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: axes, typename: IntArray}
    outputs:
    - {name: grad_x, typename: Tensor}
- name: squeeze_grad
  inputs:
  - {typename: Tensor, name: xshape, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: axes}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: KernelWithXShapeInferMeta
    param: [xshape]
  kernel:
    func: [squeeze_grad]
    param: [xshape, out_grad, axes]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: squeeze_double_grad
  forward:
    name: squeeze
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: axes, typename: IntArray}
    outputs:
    - {name: out, typename: Tensor}
    - {name: xshape, typename: Tensor}
- name: stack_grad
  inputs:
  - {typename: 'Tensor[]', name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: 'Tensor[]', name: x_grad, size: x.size(), intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: StackGradInferMeta
    param: [out_grad, axis]
  kernel:
    func: [stack_grad]
    param: [out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: stack
    inputs:
    - {name: x, typename: 'Tensor[]'}
    attrs:
    - {name: axis, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: strided_slice_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: axes}
  - {typename: IntArray, name: starts}
  - {typename: IntArray, name: ends}
  - {typename: IntArray, name: strides}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: GeneralUnaryGradInferMeta
    param: [x]
  kernel:
    func: [strided_slice_grad]
    param: [x, out_grad, axes, starts, ends, strides]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: strided_slice
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: axes, typename: 'int[]'}
    - {name: starts, typename: IntArray}
    - {name: ends, typename: IntArray}
    - {name: strides, typename: IntArray}
    outputs:
    - {name: out, typename: Tensor}
- name: subtract_double_grad
  inputs:
  - {typename: Tensor, name: y, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: grad_out, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: grad_x_grad, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: grad_y_grad, optional: true, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: [y, grad_out]
  infer_meta:
    func: UnchangedInferMeta
    param: [grad_out]
  kernel:
    func: [subtract_double_grad]
    param: [y, grad_out, grad_x_grad, grad_y_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: {grad_out_grad: grad_x_grad}
  backward: null
  forward:
    name: subtract_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: axis, typename: int}
    outputs:
    - {name: grad_x, typename: Tensor}
    - {name: grad_y, typename: Tensor}
- name: subtract_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis, default_value: '-1'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  no_need_buffer: [x, y]
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, y]
  kernel:
    func: [subtract_grad]
    param: [x, y, out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: subtract_double_grad
  forward:
    name: subtract
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: sum_double_grad
  inputs:
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: dims, default_value: '{}'}
  - {typename: bool, name: keep_dim, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: sum, args: 'grad_x_grad, dims, grad_x_grad.dtype(), keep_dim'}
  backward: null
  forward:
    name: sum_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: dims, typename: IntArray}
    - {name: keep_dim, typename: bool}
    - {name: reduce_all, typename: bool}
    outputs:
    - {name: grad_x, typename: Tensor}
- name: sum_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: dims}
  - {typename: bool, name: keep_dim}
  - {typename: bool, name: reduce_all, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [sum_grad]
    param: [x, out_grad, dims, keep_dim, reduce_all]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: sum_double_grad
  forward:
    name: sum
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: dims, typename: IntArray}
    - {name: out_dtype, typename: DataType}
    - {name: keep_dim, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: svd_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: u, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: vh, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: s, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: u_grad, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: vh_grad, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: s_grad, optional: true, no_need_buffer: false}
  attrs:
  - {typename: bool, name: full}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [svd_grad]
    param: [x, u, vh, s, u_grad, vh_grad, s_grad, full]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: svd
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: full, typename: bool}
    outputs:
    - {name: u, typename: Tensor}
    - {name: s, typename: Tensor}
    - {name: vh, typename: Tensor}
- name: swish_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: bete, default_value: '1.0'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralUnaryGradInferMeta
    param: [x]
  kernel:
    func: [swish_grad]
    param: [x, out_grad, bete]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: swish
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: beta, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: sync_batch_norm_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: scale, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: bias, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: saved_mean, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: saved_variance, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: reserve_space, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: momentum}
  - {typename: float, name: epsilon}
  - {typename: str, name: data_layout}
  - {typename: bool, name: is_test}
  - {typename: bool, name: use_global_stats}
  - {typename: bool, name: trainable_statistics}
  - {typename: bool, name: fuse_with_relu}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: scale_grad, intermediate: false}
  - {typename: Tensor, name: bias_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralTernaryGradInferMeta
    param: [x, scale, bias]
  kernel:
    func: [sync_batch_norm_grad]
    param: [x, scale, bias, saved_mean, saved_variance, reserve_space, out_grad, momentum,
      epsilon, data_layout, is_test, use_global_stats, trainable_statistics, fuse_with_relu]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [out_grad]
  inplace: null
  backward: null
  forward:
    name: sync_batch_norm_
    inputs:
    - {name: x, typename: Tensor}
    - {name: scale, typename: Tensor}
    - {name: bias, typename: Tensor}
    - {name: mean, typename: Tensor}
    - {name: variance, typename: Tensor}
    attrs:
    - {name: momentum, typename: float}
    - {name: epsilon, typename: float}
    - {name: data_layout, typename: str}
    - {name: is_test, typename: bool}
    - {name: use_global_stats, typename: bool}
    - {name: trainable_statistics, typename: bool}
    - {name: fuse_with_relu, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
    - {name: mean_out, typename: Tensor}
    - {name: variance_out, typename: Tensor}
    - {name: saved_mean, typename: Tensor}
    - {name: saved_variance, typename: Tensor}
    - {name: reserve_space, typename: Tensor}
- name: take_along_axis_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: index, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [take_along_axis_grad]
    param: [x, index, out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: take_along_axis
    inputs:
    - {name: x, typename: Tensor}
    - {name: index, typename: Tensor}
    attrs:
    - {name: axis, typename: int}
    outputs:
    - {name: out, typename: Tensor}
- name: tan_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [tan_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: tan
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: tanh_double_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out_grad, intermediate: false}
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [out, out]
  kernel:
    func: [tanh_double_grad]
    param: [out, grad_out, grad_x_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {grad_out_grad: grad_x_grad}
  backward: tanh_triple_grad
  forward:
    name: tanh_grad
    inputs:
    - {name: out, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs: []
    outputs:
    - {name: grad_x, typename: Tensor}
- name: tanh_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out]
  kernel:
    func: [tanh_grad]
    param: [out, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: tanh_double_grad
  forward:
    name: tanh
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: tanh_shrink_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [tanh_shrink_grad]
    param: [x, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: tanh_shrink
    inputs:
    - {name: x, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: tanh_triple_grad
  inputs:
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_out_forward, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_x_grad_forward, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_out_new_grad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: grad_out_grad_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: out_grad, intermediate: false}
  - {typename: Tensor, name: grad_out_forward_grad, intermediate: false}
  - {typename: Tensor, name: grad_x_grad_forward_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralTernaryGradInferMeta
    param: [out, out, grad_x_grad_forward]
  kernel:
    func: [tanh_triple_grad]
    param: [out, grad_out_forward, grad_x_grad_forward, grad_out_new_grad, grad_out_grad_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {grad_out_forward_grad: grad_x_grad_forward}
  backward: null
  forward:
    name: tanh_double_grad
    inputs:
    - {name: out, typename: Tensor}
    - {name: grad_out_forward, typename: Tensor}
    - {name: grad_x_grad_forward, typename: Tensor}
    attrs: []
    outputs:
    - {name: grad_out_new, typename: Tensor}
    - {name: grad_out_grad, typename: Tensor}
- name: temporal_shift_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: seg_num}
  - {typename: float, name: shift_ratio}
  - {typename: str, name: data_format_str}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out_grad]
  kernel:
    func: [temporal_shift_grad]
    param: [out_grad, seg_num, shift_ratio, data_format_str]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: temporal_shift
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: seg_num, typename: int}
    - {name: shift_ratio, typename: float}
    - {name: data_format_str, typename: str}
    outputs:
    - {name: out, typename: Tensor}
- name: thresholded_relu_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: threshold}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [thresholded_relu_grad]
    param: [x, out_grad, threshold]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: thresholded_relu
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: threshold, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: tile_double_grad
  inputs:
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: repeat_times}
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: tile, args: 'grad_x_grad, repeat_times'}
  backward: null
  forward:
    name: tile_grad
    inputs:
    - {name: x, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: repeat_times, typename: IntArray}
    outputs:
    - {name: grad_x, typename: Tensor}
- name: tile_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: repeat_times}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [tile_grad]
    param: [x, out_grad, repeat_times]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: tile_double_grad
  forward:
    name: tile
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: repeat_times, typename: IntArray}
    outputs:
    - {name: out, typename: Tensor}
- name: top_k_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: indices, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: Scalar, name: k, default_value: '-1'}
  - {typename: int, name: axis, default_value: '-1'}
  - {typename: bool, name: largest, default_value: 'true'}
  - {typename: bool, name: sorted, default_value: 'true'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [top_k_grad]
    param: [x, indices, out_grad, k, axis, largest, sorted]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: top_k
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: k, typename: Scalar}
    - {name: axis, typename: int}
    - {name: largest, typename: bool}
    - {name: sorted, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
    - {name: indices, typename: Tensor}
- name: transpose_double_grad
  inputs:
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: axis}
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: transpose, args: 'grad_x_grad, axis'}
  backward: null
  forward:
    name: transpose_grad
    inputs:
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: axis, typename: 'int[]'}
    outputs:
    - {name: grad_x, typename: Tensor}
- name: transpose_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: axis}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: TransposeGradInferMeta
    param: [out_grad, axis]
  kernel:
    func: [transpose_grad]
    param: [out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: transpose_double_grad
  forward:
    name: transpose
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: axis, typename: 'int[]'}
    outputs:
    - {name: out, typename: Tensor}
- name: triangular_solve_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: bool, name: upper}
  - {typename: bool, name: tranpose}
  - {typename: bool, name: unitriangular}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, y]
  kernel:
    func: [triangular_solve_grad]
    param: [x, y, out, out_grad, upper, tranpose, unitriangular]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: triangular_solve
    inputs:
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    attrs:
    - {name: upper, typename: bool}
    - {name: tranpose, typename: bool}
    - {name: unitriangular, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: tril_triu_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: diagonal}
  - {typename: bool, name: lower}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [out_grad]
  kernel:
    func: [tril_triu_grad]
    param: [out_grad, diagonal, lower]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: tril_triu
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: diagonal, typename: int}
    - {name: lower, typename: bool}
    outputs:
    - {name: out, typename: Tensor}
- name: trilinear_interp_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_size, optional: true, no_need_buffer: false}
  - {typename: 'Tensor[]', name: size_tensor, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: scale_tensor, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: output_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: str, name: data_layout}
  - {typename: int, name: out_d}
  - {typename: int, name: out_h}
  - {typename: int, name: out_w}
  - {typename: 'float[]', name: scale}
  - {typename: str, name: interp_method}
  - {typename: bool, name: align_corners}
  - {typename: int, name: align_mode}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [trilinear_interp_grad]
    param: [x, out_size, size_tensor, scale_tensor, output_grad, data_layout, out_d,
      out_h, out_w, scale, interp_method, align_corners, align_mode]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [output_grad]
  inplace: null
  backward: null
  forward:
    name: trilinear_interp
    inputs:
    - {name: x, typename: Tensor}
    - {name: out_size, typename: Tensor}
    - {name: size_tensor, typename: 'Tensor[]'}
    - {name: scale_tensor, typename: Tensor}
    attrs:
    - {name: data_layout, typename: str}
    - {name: out_d, typename: int}
    - {name: out_h, typename: int}
    - {name: out_w, typename: int}
    - {name: scale, typename: 'float[]'}
    - {name: interp_method, typename: str}
    - {name: align_corners, typename: bool}
    - {name: align_mode, typename: int}
    outputs:
    - {name: output, typename: Tensor}
- name: unbind_grad
  inputs:
  - {typename: 'Tensor[]', name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: input_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: stack, args: 'out_grad, axis'}
  backward: null
  forward:
    name: unbind
    inputs:
    - {name: input, typename: Tensor}
    attrs:
    - {name: axis, typename: int}
    outputs:
    - {name: out, typename: 'Tensor[]'}
- name: unfold_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: kernel_sizes}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: 'int[]', name: dilations}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [unfold_grad]
    param: [x, out_grad, kernel_sizes, strides, paddings, dilations]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: unfold
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: kernel_sizes, typename: 'int[]'}
    - {name: strides, typename: 'int[]'}
    - {name: paddings, typename: 'int[]'}
    - {name: dilations, typename: 'int[]'}
    outputs:
    - {name: out, typename: Tensor}
- name: uniform_random_inplace_grad
  inputs:
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: float, name: min}
  - {typename: float, name: max}
  - {typename: int, name: seed}
  - {typename: int, name: diag_num}
  - {typename: int, name: diag_step}
  - {typename: float, name: diag_val}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UniformRandomInplaceGradInferMeta
    param: [out_grad, min, max, seed, diag_num, diag_step, diag_val]
  kernel:
    func: [uniform_random_inplace_grad]
    param: [out_grad, min, max, seed, diag_num, diag_step, diag_val]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: null
  forward:
    name: uniform_random_inplace
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: min, typename: float}
    - {name: max, typename: float}
    - {name: seed, typename: int}
    - {name: diag_num, typename: int}
    - {name: diag_step, typename: int}
    - {name: diag_val, typename: float}
    outputs:
    - {name: out, typename: Tensor}
- name: unsqueeze_double_grad
  inputs:
  - {typename: Tensor, name: grad_x_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: axes}
  outputs:
  - {typename: Tensor, name: grad_out_grad, intermediate: false}
  no_need_buffer: null
  invoke: {func: unsqueeze, args: 'grad_x_grad, axes'}
  backward: null
  forward:
    name: unsqueeze_grad
    inputs:
    - {name: xshape, typename: Tensor}
    - {name: grad_out, typename: Tensor}
    attrs:
    - {name: axes, typename: IntArray}
    outputs:
    - {name: grad_x, typename: Tensor}
- name: unsqueeze_grad
  inputs:
  - {typename: Tensor, name: xshape, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: IntArray, name: axes}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: KernelWithXShapeInferMeta
    param: [xshape]
  kernel:
    func: [unsqueeze_grad]
    param: [xshape, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: {x_grad: out_grad}
  backward: unsqueeze_double_grad
  forward:
    name: unsqueeze
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: axes, typename: IntArray}
    outputs:
    - {name: out, typename: Tensor}
    - {name: xshape, typename: Tensor}
- name: unstack_grad
  inputs:
  - {typename: 'Tensor[]', name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: axis}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnStackGradInferMeta
    param: [out_grad, axis]
  kernel:
    func: [unstack_grad]
    param: [out_grad, axis]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: unstack
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: axis, typename: int}
    - {name: num, typename: int}
    outputs:
    - {name: out, typename: 'Tensor[]'}
- name: warpctc_grad
  inputs:
  - {typename: Tensor, name: logits, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: logits_length, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: warpctcgrad, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: loss_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: int, name: blank}
  - {typename: bool, name: norm_by_times}
  outputs:
  - {typename: Tensor, name: logits_grad, intermediate: false}
  no_need_buffer: [logits]
  infer_meta:
    func: UnchangedInferMeta
    param: [logits]
  kernel:
    func: [warpctc_grad]
    param: [logits, logits_length, warpctcgrad, loss_grad, blank, norm_by_times]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: warpctc
    inputs:
    - {name: logits, typename: Tensor}
    - {name: label, typename: Tensor}
    - {name: logits_length, typename: Tensor}
    - {name: labels_length, typename: Tensor}
    attrs:
    - {name: blank, typename: int}
    - {name: norm_by_times, typename: bool}
    outputs:
    - {name: loss, typename: Tensor}
    - {name: warpctcgrad, typename: Tensor}
- name: where_grad
  inputs:
  - {typename: Tensor, name: condition, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: y, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs: []
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: y_grad, intermediate: false}
  no_need_buffer: [x, y]
  infer_meta:
    func: GeneralBinaryGradInferMeta
    param: [x, y]
  kernel:
    func: [where_grad]
    param: [condition, x, y, out_grad]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: where
    inputs:
    - {name: condition, typename: Tensor}
    - {name: x, typename: Tensor}
    - {name: y, typename: Tensor}
    attrs: []
    outputs:
    - {name: out, typename: Tensor}
- name: yolov3_loss_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: gt_box, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: gt_label, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: gt_score, optional: true, no_need_buffer: false}
  - {typename: Tensor, name: objectness_mask, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: gt_match_mask, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: loss_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: anchors}
  - {typename: 'int[]', name: anchor_mask}
  - {typename: int, name: class_num}
  - {typename: float, name: ignore_thresh}
  - {typename: int, name: downsample_ratio}
  - {typename: bool, name: use_label_smooth, default_value: 'true'}
  - {typename: float, name: scale_x_y, default_value: '1.0'}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  - {typename: Tensor, name: gt_box_grad, intermediate: false}
  - {typename: Tensor, name: gt_label_grad, intermediate: false}
  - {typename: Tensor, name: gt_score_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: Yolov3LossGradInferMeta
    param: [x, gt_box, gt_label, gt_score, objectness_mask, gt_match_mask, loss_grad,
      anchors, anchor_mask, class_num, ignore_thresh, downsample_ratio, use_label_smooth,
      scale_x_y]
  kernel:
    func: [yolov3_loss_grad]
    param: [x, gt_box, gt_label, gt_score, objectness_mask, gt_match_mask, loss_grad,
      anchors, anchor_mask, class_num, ignore_thresh, downsample_ratio, use_label_smooth,
      scale_x_y]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: yolov3_loss
    inputs:
    - {name: x, typename: Tensor}
    - {name: gt_box, typename: Tensor}
    - {name: gt_label, typename: Tensor}
    - {name: gt_score, typename: Tensor}
    attrs:
    - {name: anchors, typename: 'int[]'}
    - {name: anchor_mask, typename: 'int[]'}
    - {name: class_num, typename: int}
    - {name: ignore_thresh, typename: float}
    - {name: downsample_ratio, typename: int}
    - {name: use_label_smooth, typename: bool}
    - {name: scale_x_y, typename: float}
    outputs:
    - {name: loss, typename: Tensor}
    - {name: objectness_mask, typename: Tensor}
    - {name: gt_match_mask, typename: Tensor}
- name: fold_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: true}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: output_sizes}
  - {typename: 'int[]', name: kernel_sizes}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: paddings}
  - {typename: 'int[]', name: dilations}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: [x]
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [fold_grad]
    param: [x, out_grad, output_sizes, kernel_sizes, strides, paddings, dilations]
    backend: null
    layout: null
    data_type: null
  inplace: null
  backward: null
  forward:
    name: fold
    inputs:
    - {name: x, typename: Tensor}
    attrs:
    - {name: output_sizes, typename: 'int[]'}
    - {name: kernel_sizes, typename: 'int[]'}
    - {name: strides, typename: 'int[]'}
    - {name: paddings, typename: 'int[]'}
    - {name: dilations, typename: 'int[]'}
    outputs:
    - {name: out, typename: Tensor}
- name: unpool3d_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: indices, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: ksize}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: padding}
  - {typename: 'int[]', name: output_size}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [unpool3d_grad]
    param: [x, indices, out, out_grad, ksize, strides, padding, output_size, data_format]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: null
  forward:
    name: unpool3d
    inputs:
    - {name: x, typename: Tensor}
    - {name: indices, typename: Tensor}
    attrs:
    - {name: ksize, typename: 'int[]'}
    - {name: strides, typename: 'int[]'}
    - {name: padding, typename: 'int[]'}
    - {name: output_size, typename: 'int[]'}
    - {name: data_format, typename: str}
    outputs:
    - {name: out, typename: Tensor}
- name: unpool_grad
  inputs:
  - {typename: Tensor, name: x, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: indices, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out, optional: false, no_need_buffer: false}
  - {typename: Tensor, name: out_grad, optional: false, no_need_buffer: false}
  attrs:
  - {typename: 'int[]', name: ksize}
  - {typename: 'int[]', name: strides}
  - {typename: 'int[]', name: padding}
  - {typename: IntArray, name: output_size}
  - {typename: str, name: data_format}
  outputs:
  - {typename: Tensor, name: x_grad, intermediate: false}
  no_need_buffer: null
  infer_meta:
    func: UnchangedInferMeta
    param: [x]
  kernel:
    func: [unpool_grad]
    param: [x, indices, out, out_grad, ksize, strides, padding, output_size, data_format]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
  inplace: null
  backward: null
  forward:
    name: unpool
    inputs:
    - {name: x, typename: Tensor}
    - {name: indices, typename: Tensor}
    attrs:
    - {name: ksize, typename: 'int[]'}
    - {name: strides, typename: 'int[]'}
    - {name: padding, typename: 'int[]'}
    - {name: output_size, typename: IntArray}
    - {name: data_format, typename: str}
    outputs:
    - {name: out, typename: Tensor}
