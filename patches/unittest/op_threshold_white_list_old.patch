diff --git a/test/white_list/op_threshold_white_list.py b/test/white_list/op_threshold_white_list.py
index c5eb0862cb..72e048a629 100644
--- a/test/white_list/op_threshold_white_list.py
+++ b/test/white_list/op_threshold_white_list.py
@@ -11,48 +11,104 @@
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
-
-NEED_FIX_FP64_CHECK_GRAD_THRESHOLD_OP_LIST = [
-    'affine_channel',
-    'bilinear_interp',
-    'bilinear_interp_v2',
-    'bilinear_tensor_product',
-    'conv2d',
-    'conv3d',
-    'cross_entropy',
-    'depthwise_conv2d_transpose',
-    'grid_sampler',
-    'group_norm',
-    'gru',
-    'gru_unit',
-    'kldiv_loss',
-    'lstm',
-    'max_pool2d_with_index',
-    'max_pool3d_with_index',
-    'norm',
-    'pool3d',
-    'reduce_prod',
-    'selu',
-    'sigmoid_cross_entropy_with_logits',
-    'soft_relu',
-    'softmax_with_cross_entropy',
-    'spp',
-    'teacher_student_sigmoid_loss',
-    'unpool',
-    'yolov3_loss',
-    'inverse',
-    'bilateral_slice',
-    'cudnn_lstm',
-    'rnn',
-    'lgamma',
-    'sparse_attention',
-    'svd',
-    'matrix_power',
-    'cholesky_solve',
-    'solve',
-    'qr',
-    'layer_norm',
-]
+import paddle
+if paddle.device.cuda.get_device_name() == "K100_AI":
+    NEED_FIX_FP64_CHECK_GRAD_THRESHOLD_OP_LIST = [
+        'affine_channel',
+        'bilinear_interp',
+        'bilinear_interp_v2',
+        'bilinear_tensor_product',
+        'conv2d',
+        'conv3d',
+        'cross_entropy',
+        'depthwise_conv2d_transpose',
+        'grid_sampler',
+        'group_norm',
+        'gru',
+        'gru_unit',
+        'kldiv_loss',
+        'lstm',
+        'max_pool2d_with_index',
+        'max_pool3d_with_index',
+        'norm',
+        'pool3d',
+        'reduce_prod',
+        'selu',
+        'sigmoid_cross_entropy_with_logits',
+        'soft_relu',
+        'softmax_with_cross_entropy',
+        'spp',
+        'teacher_student_sigmoid_loss',
+        'unpool',
+        'yolov3_loss',
+        'inverse',
+        'bilateral_slice',
+        'cudnn_lstm',
+        'rnn',
+        'lgamma',
+        'sparse_attention',
+        'svd',
+        'matrix_power',
+        'cholesky_solve',
+        'solve',
+        'qr',
+        'layer_norm',
+        'elementwise_add',
+        'cos',
+        'elementwise_div',
+        'elementwise_pow',
+        'elementwise_mul',
+        'pow',
+        'scale',
+        'sin',
+        'sum',
+        'mean',
+        'reduce_mean',
+        'rsqrt',
+        'sqrt'
+    ]
+else:
+        NEED_FIX_FP64_CHECK_GRAD_THRESHOLD_OP_LIST = [
+        'affine_channel',
+        'bilinear_interp',
+        'bilinear_interp_v2',
+        'bilinear_tensor_product',
+        'conv2d',
+        'conv3d',
+        'cross_entropy',
+        'depthwise_conv2d_transpose',
+        'grid_sampler',
+        'group_norm',
+        'gru',
+        'gru_unit',
+        'kldiv_loss',
+        'lstm',
+        'max_pool2d_with_index',
+        'max_pool3d_with_index',
+        'norm',
+        'pool3d',
+        'reduce_prod',
+        'selu',
+        'sigmoid_cross_entropy_with_logits',
+        'soft_relu',
+        'softmax_with_cross_entropy',
+        'spp',
+        'teacher_student_sigmoid_loss',
+        'unpool',
+        'yolov3_loss',
+        'inverse',
+        'bilateral_slice',
+        'cudnn_lstm',
+        'rnn',
+        'lgamma',
+        'sparse_attention',
+        'svd',
+        'matrix_power',
+        'cholesky_solve',
+        'solve',
+        'qr',
+        'layer_norm',
+    ]
 
 NEED_FIX_FP64_CHECK_OUTPUT_THRESHOLD_OP_LIST = [
     'bilinear_interp',
