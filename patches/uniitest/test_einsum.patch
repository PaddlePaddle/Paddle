diff --git a/test/legacy_test/test_einsum.py b/test/legacy_test/test_einsum.py
index 830474de90..f910b5c429 100644
--- a/test/legacy_test/test_einsum.py
+++ b/test/legacy_test/test_einsum.py
@@ -29,7 +29,7 @@ class TestErrors(unittest.TestCase):
 
     def test_diagonalize_errors(self):
         a = np.arange(4 * 3 * 4 * 4).reshape(4, 3, 4, 4).astype('float')
-        a = paddle.to_tensor(a)
+        a = paddle.to_tensor(a, dtype='float32')
         with self.assertRaisesRegex(
             AssertionError, ('Duplicate labels are not supported.')
         ):
@@ -45,7 +45,7 @@ class TestErrors(unittest.TestCase):
 
     def test_param_errors(self):
         a = np.arange(4 * 3 * 4 * 4).reshape(4, 3, 4, 4).astype('float')
-        a = paddle.to_tensor(a)
+        a = paddle.to_tensor(a, dtype='float32')
         with self.assertRaisesRegex(
             AssertionError, ('At least one operand is expected.')
         ):
@@ -180,12 +180,12 @@ class TestEinsum(unittest.TestCase):
         equation = self.sample["paradigm"]
 
         with paddle.base.dygraph.guard(self._get_place(force_to_use_cpu=False)):
-            pd_operands = [paddle.to_tensor(operand) for operand in operands]
+            pd_operands = [paddle.to_tensor(operand, dtype='float32') for operand in operands]
             result = paddle.einsum(equation, *pd_operands)
             self.check_output_equal(result.numpy(), expected_result)
 
         with paddle.base.dygraph.guard(self._get_place(force_to_use_cpu=True)):
-            pd_operands = [paddle.to_tensor(operand) for operand in operands]
+            pd_operands = [paddle.to_tensor(operand, dtype='float32') for operand in operands]
             result = paddle.einsum(equation, *pd_operands)
             self.check_output_equal(result.numpy(), expected_result)
 
@@ -347,7 +347,7 @@ class TestNumpyTests(unittest.TestCase):
     def check_output(self, eqn, *ops):
         expect = np.einsum(eqn, *ops)
         with paddle.base.dygraph.guard(self._get_place(force_to_use_cpu=False)):
-            pd_operands = [paddle.to_tensor(op) for op in ops]
+            pd_operands = [paddle.to_tensor(op, dtype='float32') for op in ops]
             actual = paddle.einsum(eqn, *pd_operands)
             self.check_output_equal(actual.numpy(), expect)
 
@@ -454,19 +454,19 @@ class TestNumpyTests(unittest.TestCase):
         startup = base.Program()
         with base.program_guard(main, startup):
             a = paddle.static.data(
-                name='a', shape=[3, None, None, None], dtype='float'
+                name='a', shape=[3, None, None, None], dtype='float32'
             )
             b = paddle.static.data(
-                name='b', shape=[2, None, None, None], dtype='float'
+                name='b', shape=[2, None, None, None], dtype='float32'
             )
             c = paddle.static.data(
-                name='c', shape=[None, None, 2, None], dtype='float'
+                name='c', shape=[None, None, 2, None], dtype='float32'
             )
             d = paddle.static.data(
-                name='d', shape=[None, None, 5], dtype='float'
+                name='d', shape=[None, None, 5], dtype='float32'
             )
             e = paddle.static.data(
-                name='e', shape=[None, 2, None], dtype='float'
+                name='e', shape=[None, 2, None], dtype='float32'
             )
 
             outs = []
@@ -477,11 +477,11 @@ class TestNumpyTests(unittest.TestCase):
             outs.append(paddle.einsum('ijk..., ikj->...ij', c, e))
         exe = base.Executor(self.place)
         exe.run(startup)
-        a = np.arange(72).reshape(3, 2, 3, 4).astype('float')
-        b = np.arange(48).reshape(2, 2, 3, 4).astype('float')
-        c = np.arange(48).reshape(2, 3, 2, 4).astype('float')
-        d = np.arange(30).reshape(2, 3, 5).astype('float')
-        e = np.arange(12).reshape(2, 2, 3).astype('float')
+        a = np.arange(72).reshape(3, 2, 3, 4).astype('float32')
+        b = np.arange(48).reshape(2, 2, 3, 4).astype('float32')
+        c = np.arange(48).reshape(2, 3, 2, 4).astype('float32')
+        d = np.arange(30).reshape(2, 3, 5).astype('float32')
+        e = np.arange(12).reshape(2, 2, 3).astype('float32')
         feeds = {'a': a, 'b': b, 'c': c, 'd': d, 'e': e}
         actual = exe.run(main, feed=feeds, fetch_list=[outs])
         expect = []
