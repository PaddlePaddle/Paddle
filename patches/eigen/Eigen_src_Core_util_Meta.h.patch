diff --git a/Eigen/src/Core/util/Meta.h b/Eigen/src/Core/util/Meta.h
index cad57c3a4..785b2a7a9 100755
--- a/Eigen/src/Core/util/Meta.h
+++ b/Eigen/src/Core/util/Meta.h
@@ -15,7 +15,7 @@
 
  #include <cfloat>
 
- #if defined(EIGEN_CUDA_ARCH)
+ #if defined(EIGEN_CUDA_ARCH) || defined(EIGEN_MUSA_ARCH)
   #include <math_constants.h>
  #endif
 
@@ -300,6 +300,8 @@ template<> struct numeric_limits<float>
   static float (max)() {
   #if defined(EIGEN_CUDA_ARCH)
     return CUDART_MAX_NORMAL_F;
+  #elif defined(EIGEN_MUSA_ARCH)
+    return MUSART_MAX_NORMAL_F;
   #else
     return HIPRT_MAX_NORMAL_F;
   #endif
@@ -310,6 +312,8 @@ template<> struct numeric_limits<float>
   static float infinity() {
   #if defined(EIGEN_CUDA_ARCH)
     return CUDART_INF_F;
+  #elif defined(EIGEN_MUSA_ARCH)
+    return MUSART_INF_F;
   #else
     return HIPRT_INF_F;
   #endif
@@ -318,6 +322,8 @@ template<> struct numeric_limits<float>
   static float quiet_NaN() {
   #if defined(EIGEN_CUDA_ARCH)
     return CUDART_NAN_F;
+  #elif defined(EIGEN_MUSA_ARCH)
+    return MUSART_NAN_F;
   #else
     return HIPRT_NAN_F;
   #endif
@@ -335,6 +341,8 @@ template<> struct numeric_limits<double>
   static double infinity() {
   #if defined(EIGEN_CUDA_ARCH)
     return CUDART_INF;
+  #elif defined(EIGEN_MUSA_ARCH)
+    return MUSART_INF;
   #else
     return HIPRT_INF;
   #endif
@@ -343,6 +351,8 @@ template<> struct numeric_limits<double>
   static double quiet_NaN() {
   #if defined(EIGEN_CUDA_ARCH)
     return CUDART_NAN;
+  #elif defined(EIGEN_MUSA_ARCH)
+    return MUSART_NAN;
   #else
     return HIPRT_NAN;
   #endif
