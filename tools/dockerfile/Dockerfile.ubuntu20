# A image for building paddle binaries
# Use cuda devel base image for both cpu and gpu environment
# When you modify it, please be aware of cudnn-runtime version
FROM <baseimg>
MAINTAINER PaddlePaddle Authors <paddle-dev@baidu.com>

# ENV variables
ARG WITH_GPU
ARG WITH_AVX

ENV WITH_GPU=${WITH_GPU:-ON}
ENV WITH_AVX=${WITH_AVX:-ON}
ENV DEBIAN_FRONTEND=noninteractive
<setcuda>

ENV HOME /root
# Add bash enhancements
COPY paddle/scripts/docker/root/ /root/

RUN chmod 777 /tmp

RUN apt-key del 7fa2af80
RUN rm /etc/apt/sources.list.d/*
RUN apt-key adv --fetch-keys https://developer.download.nvidia.cn/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub

RUN apt-get update --allow-unauthenticated && \
  apt-get install -y software-properties-common && add-apt-repository ppa:deadsnakes/ppa && \
  apt-get update && \
  apt-get install -y curl wget vim git unzip unrar tar xz-utils libssl-dev bzip2 gzip \ 
    coreutils ntp language-pack-zh-hans libsm6 libxext6 libxrender-dev libgl1-mesa-glx \
    bison graphviz libjpeg-dev zlib1g-dev automake locales swig net-tools libtool kmod
<install_cpu_package>

# Downgrade gcc&&g++
WORKDIR /usr/bin 
COPY tools/dockerfile/build_scripts /build_scripts 
RUN bash /build_scripts/install_trt.sh
# Older versions of patchelf limited the size of the files being processed and were fixed in this pr.
# # https://github.com/NixOS/patchelf/commit/ba2695a8110abbc8cc6baf0eea819922ee5007fa
# # So install a newer version here.
RUN bash /build_scripts/install_patchelf.sh
RUN bash /build_scripts/install_gcc.sh gcc121
RUN cp gcc gcc.bak && cp g++ g++.bak && rm gcc && rm g++ 
RUN ln -s /usr/local/gcc-12.1/bin/gcc /usr/local/bin/gcc 
RUN ln -s /usr/local/gcc-12.1/bin/g++ /usr/local/bin/g++ 
RUN ln -s /usr/local/gcc-12.1/bin/gcc /usr/bin/gcc 
RUN ln -s /usr/local/gcc-12.1/bin/g++ /usr/bin/g++ 
ENV PATH=/usr/local/gcc-12.1/bin:$PATH 

Run bash /build_scripts/install_cudnn.sh cudnn841
ENV CUDNN_VERSION=8.4.1
#RUN bash /build_scripts/install_nccl2.sh
RUN rm -rf /build_script

# install cmake
WORKDIR /home
RUN wget -q https://cmake.org/files/v3.18/cmake-3.18.0-Linux-x86_64.tar.gz && tar -zxvf cmake-3.18.0-Linux-x86_64.tar.gz && rm cmake-3.18.0-Linux-x86_64.tar.gz
ENV PATH=/home/cmake-3.18.0-Linux-x86_64/bin:$PATH

