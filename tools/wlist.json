{
    "wlist_dir":[
        {
            "name":"../python/paddle/fluid/contrib",
            "annotation":""
        },
        {
            "name":"../python/paddle/verison.py",
            "annotation":""
        },
        {
            "name":"../python/paddle/fluid/core_avx.py",
            "annotation":""
        },
        {
            "name":"../python/paddle/distributed",
            "annotation":""
        }
    ],
    "wlist_api":[
        {
            "name":"xxxxx",
            "annotation":"not a real api, just for example"
        },
        {
            "name":"squeeze_",
            "annotation":"Inplace APIs don't need sample code. There is a special document introducing Inplace strategy"
        },
        {
            "name":"unsqueeze_",
            "annotation":"Inplace APIs don't need sample code. There is a special document introducing Inplace strategy"
        },
        {
            "name":"reshape_",
            "annotation":"Inplace APIs don't need sample code. There is a special document introducing Inplace strategy"
        },
        {
            "name":"scatter_",
            "annotation":"Inplace APIs don't need sample code. There is a special document introducing Inplace strategy"
        },
        {
            "name":"elu_",
            "annotation":"Inplace APIs don't need sample code. There is a special document introducing Inplace strategy"
        },
        {
            "name":"relu_",
            "annotation":"Inplace APIs don't need sample code. There is a special document introducing Inplace strategy"
        },
        {
            "name":"softmax_",
            "annotation":"Inplace APIs don't need sample code. There is a special document introducing Inplace strategy"
        },
        {
            "name":"tanh_",
            "annotation":"Inplace APIs don't need sample code. There is a special document introducing Inplace strategy"
        }
    ],
    "wlist_temp_api":[
        "to_tensor",
        "LRScheduler",
        "ReduceOnPlateau",
        "append_LARS",
        "BuildStrategy.debug_graphviz_path",
        "BuildStrategy.enable_sequential_execution",
        "BuildStrategy.fuse_elewise_add_act_ops",
        "BuildStrategy.fuse_relu_depthwise_conv",
        "BuildStrategy.gradient_scale_strategy",
        "BuildStrategy.reduce_strategy",
        "BuildStrategy.remove_unnecessary_lock",
        "BuildStrategy.sync_batch_norm",
        "DynamicRNN.step_input",
        "DynamicRNN.static_input",
        "DynamicRNN.block",
        "DynamicRNN.update_memory",
        "DynamicRNN.output",
        "transpiler.DistributeTranspilerConfig",
        "transpiler.DistributeTranspilerConfig.slice_var_up",
        "transpiler.DistributeTranspilerConfig.split_method",
        "transpiler.DistributeTranspilerConfig.min_block_size",
        "DistributeTranspilerConfig.slice_var_up",
        "DistributeTranspilerConfig.split_method",
        "ModelAverage.apply",
        "ModelAverage.restore",
        "DistributeTranspilerConfig",
        "DistributeTranspilerConfig.min_block_size",
        "ExecutionStrategy.allow_op_delay",
        "load",
        "Accuracy.update",
        "ChunkEvaluator.update",
        "ExecutionStrategy.num_iteration_per_drop_scope",
        "ExecutionStrategy.num_threads",
        "CompiledProgram._with_inference_optimize",
        "CompositeMetric.add_metric",
        "CompositeMetric.update",
        "CompositeMetric.eval",
        "DetectionMAP.get_map_var",
        "MetricBase",
        "MetricBase.reset",
        "MetricBase.get_config",
        "MetricBase.update",
        "MetricBase.eval",
        "Accuracy.eval",
        "Auc.update",
        "Auc.eval",
        "EditDistance.update",
        "EditDistance.eval",
        "ExponentialMovingAverage.apply",
        "ExponentialMovingAverage.restore",
        "ExponentialMovingAverage.update",
        "StaticRNN.step",
        "StaticRNN.step_input",
        "StaticRNN.step_output",
        "StaticRNN.update_memory",
        "DetectionMAP.reset",
        "StaticRNN.output",
        "cuda_places",
        "CUDAPinnedPlace",
        "CUDAPlace",
        "Program.parse_from_string",
        "Compressor",
        "Compressor.config",
        "Compressor.run",
        "HDFSClient.upload",
        "HDFSClient.download",
        "HDFSClient.is_exist",
        "HDFSClient.is_dir",
        "HDFSClient.delete",
        "HDFSClient.rename",
        "HDFSClient.makedirs",
        "HDFSClient.ls",
        "HDFSClient.lsr",
        "multi_download",
        "multi_upload",
        "TrainingDecoder.block",
        "QuantizeTranspiler.training_transpile",
        "QuantizeTranspiler.freeze_program",
        "AutoMixedPrecisionLists",
        "Uniform.sample",
        "Uniform.log_prob",
        "Uniform.entropy",
        "Categorical.kl_divergence",
        "Categorical.entropy",
        "MultivariateNormalDiag.entropy",
        "MultivariateNormalDiag.kl_divergence",
        "RNNCell",
        "RNNCell.call",
        "RNNCell.get_initial_states",
        "GRUCell.call",
        "LSTMCell.call",
        "Decoder",
        "Decoder.initialize",
        "Decoder.step",
        "Decoder.finalize",
        "fused_elemwise_activation",
        "search_pyramid_hash",
        "convert_dist_to_sparse_program",
        "load_persistables_for_increment",
        "load_persistables_for_inference",
        "xmap_readers",
        "Metric.reset",
        "Metric.update",
        "Metric.accumulate",
        "Metric.name",
        "Metric.compute",
        "Accuracy.reset",
        "Accuracy.update",
        "Accuracy.accumulate",
        "Accuracy.name",
        "Accuracy.compute",
        "Precision.reset",
        "Precision.update",
        "Precision.accumulate",
        "Precision.name",
        "Precision.compute",
        "Recall.reset",
        "Recall.update",
        "Recall.accumulate",
        "Recall.name",
        "Recall.compute",
        "Auc.reset",
        "Auc.update",
        "Auc.accumulate",
        "Auc.name",
        "Auc.compute",
        "Callback.set_params",
        "Callback.on_train_begin",
        "Callback.on_train_end",
        "Callback.on_eval_begin",
        "Callback.on_eval_end",
        "Callback.on_test_begin",
        "Callback.on_test_end",
        "Callback.on_epoch_begin",
        "Callback.on_epoch_end",
        "Callback.on_train_batch_begin",
        "Callback.on_train_batch_end",
        "Callback.on_eval_batch_begin",
        "Callback.on_eval_batch_end",
        "Callback.on_test_batch_begin",
        "Callback.on_test_batch_end",
        "Model.prepare",
        "SimpleRNNCell",
        "SimpleRNNCell.forward",
        "LSTMCell",
        "LSTMCell.forward",
        "GRUCell",
        "GRUCell.forward",
        "SimpleRNN",
        "GRU",
        "LSTM",
        "RNN",
        "BiRNN",
        "RNNCellBase",
        "RNNCellBase.get_initial_states",
        "gelu",
        "erf",
        "DecodeHelper",
        "DecodeHelper.initialize",
        "DecodeHelper.sample",
        "DecodeHelper.next_inputs",
        "TrainingHelper.initialize",
        "TrainingHelper.sample",
        "TrainingHelper.next_inputs",
        "GreedyEmbeddingHelper.initialize",
        "GreedyEmbeddingHelper.sample",
        "GreedyEmbeddingHelper.next_inputs",
        "LayerList.append",
        "HDFSClient",
        "InitState",
        "TracedLayer",
        "SampleEmbeddingHelper.sample",
        "BasicDecoder.initialize",
        "BasicDecoder.step",
        "ParameterList.append",
        "GreedyEmbeddingHelper",
        "SampleEmbeddingHelper",
        "BasicDecoder",
        "lstm",
        "partial_sum",
        "StateCell",
        "StateCell.compute_state",
        "TrainingDecoder",
        "TrainingDecoder.step_input",
        "TrainingDecoder.static_input",
        "TrainingDecoder.output",
        "BeamSearchDecoder",
        "GradClipByValue",
        "GradClipByNorm",
        "Variable.detach",
        "Variable.numpy",
        "Variable.set_value",
        "Variable.gradient",
        "BeamSearchDecoder.decode",
        "BeamSearchDecoder.read_array",
        "CompiledProgram",
        "CompiledProgram.with_data_parallel",
        "append_backward",
        "guard",
        "to_variable",
        "op_freq_statistic",
        "save_dygraph",
        "load_dygraph",
        "ParallelExecutor",
        "ParallelExecutor.run",
        "ParallelExecutor.drop_local_exe_scopes",
        "GradClipByGlobalNorm",
        "extend_with_decoupled_weight_decay",
        "switch",
        "Normal",
        "memory_usage",
        "decorate",
        "PiecewiseDecay",
        "InverseTimeDecay",
        "PolynomialDecay",
        "NoamDecay",
        "start_profiler",
        "profiler",
        "tree_conv",
        "multiclass_nms2",
        "DataFeedDesc",
        "Conv2D",
        "Conv3D",
        "Conv3DTranspose",
        "Embedding",
        "NCE",
        "PRelu",
        "BilinearTensorProduct",
        "GroupNorm",
        "SpectralNorm",
        "TreeConv"
    ],
    "wlist_temp":[
        "prroi_pool",
        "ChunkEvaluator",
        "EditDistance",
        "ErrorClipByValue",
        "Program.clone",
        "cuda_pinned_places",
        "DataFeeder",
        "elementwise_floordiv",
        "Layer",
        "Layer.create_parameter",
        "Layer.create_variable",
        "Layer.sublayers",
        "Layer.add_parameter",
        "Layer.add_sublayer",
        "Layer.parameters",
        "Tracer",
        "Layer.full_name",
        "InMemoryDataset",
        "layer_norm",
        "bipartite_match",
        "double_buffer",
        "cumsum",
        "thresholded_relu",
        "group_norm",
        "random_crop",
        "row_conv",
        "hard_shrink",
        "ssd_loss",
        "retinanet_target_assign",
        "InMemoryDataset.global_shuffle",
        "InMemoryDataset.get_memory_data_size",
        "DetectionMAP",
        "hash",
        "InMemoryDataset.set_queue_num",
        "LayerNorm",
        "Preprocessor",
        "chunk_eval",
        "GRUUnit",
        "ExponentialMovingAverage",
        "QueueDataset.global_shuffle",
        "NumpyArrayInitializer",
        "create_py_reader_by_data",
        "InMemoryDataset.local_shuffle",
        "InMemoryDataset.get_shuffle_data_size",
        "size",
        "edit_distance",
        "nce",
        "BilinearInitializer",
        "NaturalExpDecay",
        "noam_decay",
        "retinanet_detection_output",
        "Pool2D",
        "PipelineOptimizer",
        "generate_mask_labels",
        "isfinite",
        "InMemoryDataset.set_fleet_send_batch_size",
        "cuda_profiler",
        "unfold",
        "Executor",
        "InMemoryDataset.load_into_memory",
        "ExponentialDecay",
        "BatchNorm",
        "deformable_conv",
        "InMemoryDataset.preload_into_memory",
        "py_reader",
        "linear_lr_warmup",
        "InMemoryDataset.wait_preload_done",
        "CosineDecay",
        "roi_perspective_transform",
        "unique",
        "ones_like",
        "LambOptimizer",
        "InMemoryDataset.release_memory",
        "Conv2DTranspose",
        "QueueDataset.local_shuffle",
        "save_persistables@dygraph/checkpoint.py",
        "load_persistables@dygraph/checkpoint.py",
        "elementwise_pow",
        "WeightedAverage.reset",
        "ChunkEvaluator.eval",
        "NCE.forward",
        "elementwise_div",
        "BilinearTensorProduct.forward",
        "NoamDecay.step",
        "elementwise_min",
        "PiecewiseDecay.step",
        "Conv3DTranspose.forward",
        "elementwise_add",
        "IfElse.output",
        "IfElse.true_block",
        "InverseTimeDecay.step",
        "PolynomialDecay.step",
        "Precision.eval",
        "enabled",
        "elementwise_max",
        "stop_gperf_profiler",
        "IfElse.false_block",
        "WeightedAverage.add",
        "Auc.trapezoid_area",
        "elementwise_mul",
        "GroupNorm.forward",
        "SpectralNorm.forward",
        "elementwise_sub",
        "Switch.case",
        "IfElse.input",
        "prepare_context",
        "PRelu.forward",
        "Recall.update",
        "start_gperf_profiler",
        "TreeConv.forward",
        "Conv2D.forward",
        "Switch.default",
        "elementwise_mod",
        "Precision.update",
        "WeightedAverage.eval",
        "Conv3D.forward",
        "Embedding.forward",
        "Recall.eval",
        "FC.forward",
        "While.block",
        "DGCMomentumOptimizer",
        "ParallelEnv",
        "spawn",
        "init_parallel_env",
        "DataParallel",
        "DataParallel.scale_loss",
        "DataParallel.apply_collective_grads",
        "BasicLSTMCell.forward",
        "BasicGRUCell.forward",
        "RNN.forward",
        "StackedRNNCell.forward",
        "StackedLSTMCell.forward",
        "LSTM.forward",
        "BidirectionalRNN.forward",
        "BidirectionalLSTM.forward",
        "StackedGRUCell.forward",
        "GRU.forward",
        "BidirectionalGRU.forward",
        "DynamicDecode.forward",
        "Conv1dPoolLayer.forward",
        "CNNEncoder.forward",
        "TransformerCell.forward",
        "TransformerBeamSearchDecoder.step",
        "MultiHeadAttention.forward",
        "MultiHeadAttention.cal_kv",
        "FFN.forward",
        "TransformerEncoderLayer.forward",
        "TransformerEncoder.forward",
        "TransformerDecoderLayer.forward",
        "TransformerDecoder.forward",
        "TransformerDecoder.prepare_static_cache",
        "TransformerDecoder.prepare_incremental_cache",
        "LinearChainCRF.forward",
        "CRFDecoding.forward",
        "SequenceTagging.forward",
        "XPUPlace",
        "is_compiled_with_xpu",
        "xpu_places"
    ],
    "gpu_not_white":[
        "deformable_conv",
        "cuda_places",
        "CUDAPinnedPlace",
        "CUDAPlace",
        "cuda_profiler",
        "DGCMomentumOptimizer"
    ]
}
