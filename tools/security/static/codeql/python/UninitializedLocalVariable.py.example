def _rnn_dynamic_graph(cell,
                       inputs,
                       initial_states=None,
                       sequence_length=None,
                       time_major=False,
                       is_reverse=False,
                       **kwargs):
    time_step_index = 0 if time_major else 1
    flat_inputs = flatten(inputs)
    time_steps = flat_inputs[0].shape[time_step_index]

    if initial_states is None:
        initial_states = cell.get_initial_states(
            batch_ref=inputs, batch_dim_idx=1 if time_major else 0)

    if not time_major:
        inputs = map_structure(_transpose_batch_time, inputs)

    if sequence_length is not None:
        mask = sequence_lod.sequence_mask(
            sequence_length, maxlen=time_steps, dtype=inputs.dtype)
        mask = nn.transpose(mask, [1, 0])

    if is_reverse:
        inputs = map_structure(lambda x: tensor.reverse(x, axis=[0]), inputs)
        mask = tensor.reverse(mask, axis=[0]) \
            if sequence_length is not None else None

    states = initial_states
    outputs = []
    for i in range(time_steps):
        step_inputs = map_structure(lambda x: x[i], inputs)
        step_outputs, new_states = cell(step_inputs, states, **kwargs)
        if sequence_length is not None:
            new_states = map_structure(
                partial(
                    _maybe_copy, step_mask=mask[i]), states, new_states)
        states = new_states
        outputs = map_structure(lambda x: ArrayWrapper(x),
                                step_outputs) if i == 0 else map_structure(
                                    lambda x, x_array: x_array.append(x),
                                    step_outputs, outputs)

    final_outputs = map_structure(
        lambda x: nn.stack(x.array, axis=time_step_index),
        outputs)

    if is_reverse:
        final_outputs = map_structure(
            lambda x: tensor.reverse(x, axis=time_step_index),
            final_outputs)

    final_states = new_states
    return final_outputs, final_states